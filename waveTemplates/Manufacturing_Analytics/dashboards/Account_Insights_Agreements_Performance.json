{
  "name" : "Account_Insights_Agreements_Performance_tp",
  "label" : "Account Insights - Agreements Performance",
  "folder" : {
    "id" : "${App.Folder.Id}"
  },
  "dateVersion" : 1,
  "mobileDisabled" : false,
  "xmd" : {
    "measures" : [
      {
        "conditionalFormatting" : {
          "backgroundColor" : {
            "referenceField" : "change_percentage",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "rgb(182, 81, 75)",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#00B531",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "field" : "Change_Percentage_1.change_percentage",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "backgroundColor" : {
            "referenceField" : "change_percentage",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "rgb(182, 81, 75)",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#00B531",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "field" : "Change_Percentage_2.change_percentage",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "backgroundColor" : {
            "referenceField" : "Revenue_Realisation_change",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "rgb(182, 81, 75)",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#00B531",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "field" : "Change_Percentage_3.Revenue_Realisation_change",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "backgroundColor" : {
            "referenceField" : "Revenue_Leak_change",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#00B531",
                  "bin" : "*"
                },
                {
                  "formatValue" : "rgb(182, 81, 75)",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "field" : "Change_Percentage_4.Revenue_Leak_change",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Revenue_Leak",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#C23934",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#04844B",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "field" : "Revenue_Realisation__1.Revenue_Leak",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Revenue_Realisation",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#C23934",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#00B531",
                  "bin" : "100"
                }
              ]
            }
          }
        },
        "field" : "Revenue_Realisation_Trend.Revenue_Realisation",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "backgroundColor" : {
            "referenceField" : "Revenue_Realisation",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "rgb(244, 225, 225)",
                  "bin" : "*"
                },
                {
                  "bin" : "100"
                }
              ]
            }
          }
        },
        "field" : "Details_Table_2.Revenue_Realisation",
        "format" : { }
      }
    ],
    "derivedDimensions" : [ ],
    "organizations" : [ ],
    "showDetailsDefaultFields" : [ ],
    "dates" : [ ],
    "derivedMeasures" : [ ],
    "dimensions" : [
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Revenue_Leak",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#C23934",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#04844B",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "salesforceActions" : [ ],
        "field" : "Revenue_Realisation__1.ALL",
        "members" : [ ],
        "customActions" : [ ]
      },
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Revenue_Realisation",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#C23934",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#00B531",
                  "bin" : "100"
                }
              ]
            }
          }
        },
        "salesforceActions" : [ ],
        "field" : "Revenue_Realisation_Trend.ALL",
        "members" : [ ],
        "customActions" : [ ]
      }
    ]
  },
  "state" : {
    "dataSourceLinks" : [ ],
    "filters" : [
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.SalesAgreement.Account.Type"
        ],
        "locked" : false,
        "operator" : "in"
      },
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.SalesAgreement.Account.Name"
        ],
        "locked" : false,
        "operator" : "in"
      },
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.Product.Name"
        ],
        "locked" : false,
        "operator" : "in"
      },
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.Product.Family"
        ],
        "locked" : false,
        "operator" : "in"
      }
    ],
    "gridLayouts" : [
      {
        "maxWidth" : 1500,
        "name" : "Default",
        "numColumns" : 50,
        "pages" : [
          {
            "label" : "Agreements Performance - Actual Revenue",
            "name" : "96fb1d7e-ae0d-4b51-bd1b-46fee7880e63",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 10,
                "column" : 0,
                "name" : "container_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_2",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 3,
                "name" : "text_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 10,
                "column" : 10,
                "name" : "link_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "rgb(0, 112, 210)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 4
                }
              },
              {
                "colspan" : 9,
                "column" : 20,
                "name" : "link_2",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 7,
                "column" : 29,
                "name" : "link_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 14,
                "column" : 36,
                "name" : "container_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "#E6ECF2",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "listselector_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 8,
                "name" : "listselector_2",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 15,
                "name" : "listselector_3",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 22,
                "name" : "listselector_7",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 29,
                "name" : "listselector_4",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 36,
                "name" : "listselector_5",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 43,
                "name" : "listselector_8",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_8",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 33,
                "name" : "number_1",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_7",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_2",
                "row" : 17,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 17,
                "column" : 15,
                "name" : "text_6",
                "row" : 20,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 37,
                "name" : "text_8",
                "row" : 20,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 5,
                "column" : 43,
                "name" : "pillbox_2",
                "row" : 20,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 33,
                "column" : 15,
                "name" : "chart_1",
                "row" : 24,
                "rowspan" : 30,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 1,
                "name" : "text_2",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_3",
                "row" : 22,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_10",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_25",
                "row" : 31,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_24",
                "row" : 31,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_17",
                "row" : 39,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_26",
                "row" : 39,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "link_12",
                "row" : 45,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_16",
                "row" : 49,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_29",
                "row" : 49,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_5",
                "row" : 55,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_7",
                "row" : 56,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 33,
                "name" : "number_3",
                "row" : 56,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_5",
                "row" : 56,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_11",
                "row" : 57,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "link_11",
                "row" : 55,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_6",
                "row" : 61,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_9",
                "row" : 62,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 33,
                "name" : "number_5",
                "row" : 62,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_11",
                "row" : 62,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_4",
                "row" : 63,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_7",
                "row" : 67,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 1,
                "column" : 36,
                "name" : "text_20",
                "row" : 67,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_10",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 30,
                "name" : "number_7",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 4,
                "column" : 37,
                "name" : "number_12",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_14",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_6",
                "row" : 69,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_13",
                "row" : 75,
                "rowspan" : 44,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(255, 255, 255)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 1,
                "name" : "text_21",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 34,
                "name" : "text_22",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 7,
                "column" : 42,
                "name" : "listselector_6",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 17,
                "column" : 1,
                "name" : "text_4",
                "row" : 79,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_4",
                "row" : 82,
                "rowspan" : 35,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_8",
                "row" : 15,
                "rowspan" : 40,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              }
            ]
          },
          {
            "label" : "Agreements Performance - Revenue Goal",
            "name" : "ef09faa9-66ac-4d25-85d4-1f2a917b4dbf",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 10,
                "column" : 0,
                "name" : "container_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_2",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 3,
                "name" : "text_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 10,
                "column" : 10,
                "name" : "link_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "rgb(0, 112, 210)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 4
                }
              },
              {
                "colspan" : 9,
                "column" : 20,
                "name" : "link_2",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 7,
                "column" : 29,
                "name" : "link_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 14,
                "column" : 36,
                "name" : "container_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "#E6ECF2",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "listselector_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 8,
                "name" : "listselector_2",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 15,
                "name" : "listselector_3",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 22,
                "name" : "listselector_7",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 29,
                "name" : "listselector_4",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 36,
                "name" : "listselector_5",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 43,
                "name" : "listselector_8",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_8",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 33,
                "name" : "number_1",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_7",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_2",
                "row" : 17,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_7",
                "row" : 22,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 33,
                "name" : "number_3",
                "row" : 22,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_5",
                "row" : 22,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_11",
                "row" : 23,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 17,
                "column" : 15,
                "name" : "text_23",
                "row" : 26,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 33,
                "column" : 15,
                "name" : "chart_5",
                "row" : 30,
                "rowspan" : 30,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_6",
                "row" : 61,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_9",
                "row" : 62,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 33,
                "name" : "number_5",
                "row" : 62,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_11",
                "row" : 62,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_4",
                "row" : 63,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_7",
                "row" : 67,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 1,
                "column" : 36,
                "name" : "text_20",
                "row" : 67,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 10,
                "column" : 15,
                "name" : "link_10",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 5,
                "column" : 31,
                "name" : "number_7",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 4,
                "column" : 37,
                "name" : "number_12",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_14",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_6",
                "row" : 69,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_13",
                "row" : 75,
                "rowspan" : 44,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(255, 255, 255)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 1,
                "name" : "text_21",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 34,
                "name" : "text_22",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 7,
                "column" : 42,
                "name" : "listselector_6",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 17,
                "column" : 1,
                "name" : "text_4",
                "row" : 79,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_4",
                "row" : 82,
                "rowspan" : 35,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_5",
                "row" : 21,
                "rowspan" : 40,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_8",
                "row" : 15,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 12,
                "column" : 1,
                "name" : "text_44",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_45",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_46",
                "row" : 22,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_47",
                "row" : 31,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_48",
                "row" : 31,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_49",
                "row" : 39,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_50",
                "row" : 39,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "link_14",
                "row" : 45,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_51",
                "row" : 49,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_52",
                "row" : 49,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "link_15",
                "row" : 55,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              }
            ]
          },
          {
            "label" : "Agreements Performance - Revenue Realization",
            "name" : "a15321b5-62da-4115-af22-0727568412ca",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 10,
                "column" : 0,
                "name" : "container_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_2",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 3,
                "name" : "text_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 10,
                "column" : 10,
                "name" : "link_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "rgb(0, 112, 210)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 4
                }
              },
              {
                "colspan" : 9,
                "column" : 20,
                "name" : "link_2",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 7,
                "column" : 29,
                "name" : "link_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 14,
                "column" : 36,
                "name" : "container_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "#E6ECF2",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "listselector_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 8,
                "name" : "listselector_2",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 15,
                "name" : "listselector_3",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 22,
                "name" : "listselector_7",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 29,
                "name" : "listselector_4",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 36,
                "name" : "listselector_5",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 43,
                "name" : "listselector_8",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_8",
                "row" : 15,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_8",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 32,
                "name" : "number_1",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_7",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_2",
                "row" : 17,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_7",
                "row" : 22,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 32,
                "name" : "number_3",
                "row" : 22,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_5",
                "row" : 22,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_11",
                "row" : 23,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_9",
                "row" : 28,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 32,
                "name" : "number_5",
                "row" : 28,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_11",
                "row" : 28,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_4",
                "row" : 29,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 17,
                "column" : 15,
                "name" : "text_9",
                "row" : 32,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 33,
                "column" : 15,
                "name" : "chart_4",
                "row" : 36,
                "rowspan" : 30,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_7",
                "row" : 67,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 1,
                "column" : 36,
                "name" : "text_20",
                "row" : 67,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_10",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 30,
                "name" : "number_7",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 4,
                "column" : 37,
                "name" : "number_12",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_14",
                "row" : 68,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_6",
                "row" : 69,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_13",
                "row" : 75,
                "rowspan" : 44,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(255, 255, 255)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 1,
                "name" : "text_21",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 34,
                "name" : "text_22",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 7,
                "column" : 42,
                "name" : "listselector_6",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 17,
                "column" : 1,
                "name" : "text_4",
                "row" : 79,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_4",
                "row" : 82,
                "rowspan" : 35,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_6",
                "row" : 27,
                "rowspan" : 40,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_5",
                "row" : 21,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 12,
                "column" : 1,
                "name" : "text_31",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_36",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_37",
                "row" : 22,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_38",
                "row" : 31,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_39",
                "row" : 31,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_40",
                "row" : 39,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_41",
                "row" : 39,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "link_6",
                "row" : 45,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_42",
                "row" : 49,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_43",
                "row" : 49,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "link_13",
                "row" : 55,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              }
            ]
          },
          {
            "label" : "Agreements Performance - Revenue Leak",
            "name" : "7fe60b54-a3db-4220-9b2f-fac2cbfc1167",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 10,
                "column" : 0,
                "name" : "container_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_2",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 3,
                "name" : "text_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 10,
                "column" : 10,
                "name" : "link_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "rgb(0, 112, 210)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 4
                }
              },
              {
                "colspan" : 9,
                "column" : 20,
                "name" : "link_2",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 7,
                "column" : 29,
                "name" : "link_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 14,
                "column" : 36,
                "name" : "container_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "#E6ECF2",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "listselector_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 8,
                "name" : "listselector_2",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 15,
                "name" : "listselector_3",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 22,
                "name" : "listselector_7",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 29,
                "name" : "listselector_4",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 36,
                "name" : "listselector_5",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 43,
                "name" : "listselector_8",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_8",
                "row" : 15,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_8",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 32,
                "name" : "number_1",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_7",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_2",
                "row" : 17,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_5",
                "row" : 21,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_7",
                "row" : 22,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 32,
                "name" : "number_3",
                "row" : 22,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_5",
                "row" : 22,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_11",
                "row" : 23,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_9",
                "row" : 28,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 32,
                "name" : "number_5",
                "row" : 28,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_11",
                "row" : 28,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_4",
                "row" : 29,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 1,
                "column" : 36,
                "name" : "text_20",
                "row" : 33,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "link_10",
                "row" : 34,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 30,
                "name" : "number_7",
                "row" : 34,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 4,
                "column" : 37,
                "name" : "number_12",
                "row" : 34,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 46,
                "name" : "text_14",
                "row" : 34,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 42,
                "name" : "number_6",
                "row" : 35,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 19,
                "column" : 15,
                "name" : "text_12",
                "row" : 38,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 33,
                "column" : 15,
                "name" : "chart_2",
                "row" : 42,
                "rowspan" : 30,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_13",
                "row" : 75,
                "rowspan" : 44,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(255, 255, 255)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 1,
                "name" : "text_21",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 34,
                "name" : "text_22",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 7,
                "column" : 42,
                "name" : "listselector_6",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 17,
                "column" : 1,
                "name" : "text_4",
                "row" : 79,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_4",
                "row" : 82,
                "rowspan" : 35,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_7",
                "row" : 33,
                "rowspan" : 40,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 14,
                "name" : "container_6",
                "row" : 27,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_13",
                "row" : 22,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_15",
                "row" : 31,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_27",
                "row" : 39,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 2,
                "name" : "text_28",
                "row" : 49,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 1,
                "name" : "text_30",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_32",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_33",
                "row" : 31,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_34",
                "row" : 39,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 1,
                "column" : 1,
                "name" : "text_35",
                "row" : 49,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "link_4",
                "row" : 45,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "link_5",
                "row" : 55,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              }
            ]
          }
        ],
        "rowHeight" : "fine",
        "selectors" : [ ],
        "style" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "backgroundColor" : "rgb(4, 29, 64)",
          "cellSpacingX" : 0,
          "cellSpacingY" : 0,
          "fit" : "original",
          "gutterColor" : "#C5D3E0"
        },
        "version" : 1.0
      }
    ],
    "layouts" : [ ],
    "steps" : {
      "Change_Percentage_2_Forecast" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Change_Percentage",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\n q_current = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_curr_forecasted\"]).asObject()}};\n q_previous = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_prev_forecasted\"]).asObject()}};\nresult = group q_current by all full, q_previous by all;\nresult = foreach result generate coalesce(sum(q_current.'Forecasted_Amount'),0) as 'current_Forecasted_Amount', coalesce(sum(q_previous.'Forecasted_Amount'),0) as 'previous_Forecasted_Amount';\nresult = foreach result generate ('current_Forecasted_Amount'-'previous_Forecasted_Amount')*100/'previous_Forecasted_Amount' as 'change_percentage';\nresult = order result by ('change_percentage' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Change_Percentage_2" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Change_Percentage",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\n q_current = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_curr_planned\"]).asObject()}};\n q_previous = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_prev_planned\"]).asObject()}};\nresult = group q_current by all full, q_previous by all;\nresult = foreach result generate coalesce(sum(q_current.'Planned_Amount'),0) as 'current_Planned_Amount', coalesce(sum(q_previous.'Planned_Amount'),0) as 'previous_Planned_Amount';\nresult = foreach result generate ('current_Planned_Amount'-'previous_Planned_Amount')*100/'previous_Planned_Amount' as 'change_percentage';\nresult = order result by ('change_percentage' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Change_Percentage_3" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Change_Percentage",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'DerivedActualAmount' as 'DerivedActualAmount', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\n q_current = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_curr_planned\"]).asObject()}}, {{row(Time_Toggle_1.selection, [0], [\"change_percentage_curr_actuals\"]).asObject()}};\n\nq_previous = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_prev_planned\"]).asObject()}}, {{row(Time_Toggle_1.selection, [0], [\"change_percentage_prev_actuals\"]).asObject()}};\n\nresult = group q_current by all full, q_previous by all;\nresult = foreach result generate coalesce(sum(q_current.'Planned_Amount'),0) as 'current_Planned_Amount', coalesce(sum(q_previous.'Planned_Amount'),0) as 'previous_Planned_Amount', coalesce(sum(q_current.'Actual_Amount'),0) as 'current_Actual_Amount', coalesce(sum(q_previous.'Actual_Amount'),0) as 'previous_Actual_Amount', round(coalesce(sum(q_current.'Actual_Amount'),0)*100/sum(q_current.'Planned_Amount')) as 'current_Revenue_Realisation',  round(coalesce(sum(q_previous.'Actual_Amount'),0)*100/sum(q_previous.'Planned_Amount')) as 'previous_Revenue_Realisation';\nresult = foreach result generate round((coalesce(sum('current_Revenue_Realisation'),0)-sum('previous_Revenue_Realisation'))*100/sum('previous_Revenue_Realisation')) as 'Revenue_Realisation_change';\nresult = order result by ('Revenue_Realisation_change' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Time_Toggle_1" : {
        "broadcastFacet" : false,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "Time_Toggle",
        "selectMode" : "singlerequired",
        "start" : {
          "display" : [
            "YTD"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "display" : "MTD",
            "value" : "Month",
            "startdate_filter" : "[..\"current day\"]",
            "enddate_filter" : "[\"current year\"..]",
            "start_end_epoch" : "date_to_epoch(toDate(toString(now(),\"yyyy-MM\")    +    \"-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "filter" : "[\"current month\"..\"current day\"]",
            "duration" : "daysBetween( (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"))>date_to_epoch(toDate((toString(now(), \"yyyy-MM\")+\"-01\"),\"yyyy-MM-dd\")) then toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\") else toDate((toString(now(), \"yyyy-MM\")+\"-01\"),\"yyyy-MM-dd\") end),  (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\"))>date_to_epoch(now()) then toDate(toString(now(),\"yyyy-MM-dd\"),\"yyyy-MM-dd\") else  toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\") end) )",
            "date_min_timeseries" : "current month",
            "date_max_timeseries" : "current year",
            "date_min" : "current month",
            "date_max" : "current day",
            "change_percentage_curr_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_prev_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Actual_Amount'",
            "change_percentage_curr_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'PlannedAmountFinal'  -  ('PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")))  -  ('PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Planned_Amount'",
            "change_percentage_prev_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Planned_Amount'",
            "change_percentage_curr_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current month\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current month\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current month\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current month\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current month\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current month\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'ForecastedAmountFinal'  -  ('ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")))  -  ('ForecastedDailyAmount'*daysBetween(month_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Forecasted_Amount'",
            "change_percentage_prev_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Forecasted_Amount'",
            "actuals_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'DerivedActualAmount'-'ActualDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'PlannedAmountFinal'-'PlannedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "forecasted_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'ForecastedAmountFinal'-'ForecastedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)"
          },
          {
            "display" : "QTD",
            "value" : "Quarter",
            "startdate_filter" : "[..\"current day\"]",
            "enddate_filter" : "[\"current quarter\"..]",
            "start_end_epoch" : "date_to_epoch(toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01 00:00:00\"), \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "filter" : "[\"current quarter\"..\"current day\"]",
            "duration" : "daysBetween( (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"))>date_to_epoch(toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) then toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\") else toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\") end),  (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\"))>date_to_epoch(now()) then toDate(toString(now(),\"yyyy-MM-dd\"),\"yyyy-MM-dd\") else  toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\") end) )",
            "date_min_timeseries" : "current quarter",
            "date_max_timeseries" : "current year",
            "date_min" : "current quarter",
            "date_max" : "current day",
            "change_percentage_curr_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_prev_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Actual_Amount'",
            "change_percentage_curr_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'PlannedAmountFinal'  -  ('PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")))  -  ('PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")))   else 0 end) as 'Planned_Amount'",
            "change_percentage_prev_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Planned_Amount'",
            "change_percentage_curr_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current quarter\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day( toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3, \"#,00\")+\"-01\"), \"yyyy-MM-dd\") ), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current quarter\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'ForecastedAmountFinal'  -  ('ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")))  -  ('ForecastedDailyAmount'*daysBetween(month_last_day( toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3, \"#,00\")+\"-01\"), \"yyyy-MM-dd\") ), toDate('ActualEndDate', \"yyyy-MM-dd\")))   else 0 end) as 'Forecasted_Amount'",
            "change_percentage_prev_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Forecasted_Amount'",
            "actuals_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'DerivedActualAmount'-'ActualDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'PlannedAmountFinal'-'PlannedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "forecasted_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'ForecastedAmountFinal'-'ForecastedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)"
          },
          {
            "display" : "YTD",
            "value" : "Year",
            "startdate_filter" : "[..\"current day\"]",
            "enddate_filter" : "[\"current year\"..]",
            "start_end_epoch" : "date_to_epoch(toDate(toString(now(),\"yyyy\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "duration" : "daysBetween( (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"))>date_to_epoch(toDate((toString(now(), \"yyyy\")+\"-01-01\"),\"yyyy-MM-dd\")) then toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\") else toDate((toString(now(), \"yyyy\")+\"-01-01\"),\"yyyy-MM-dd\") end),  (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\"))>date_to_epoch(now()) then toDate(toString(now(),\"yyyy-MM-dd\"),\"yyyy-MM-dd\") else  toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\") end) )",
            "filter" : "[\"current year\"..\"current day\"]",
            "date_min_timeseries" : "current year",
            "date_max_timeseries" : "current year",
            "date_min" : "current year",
            "date_max" : "current day",
            "change_percentage_curr_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_prev_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('LastValidDate', \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_curr_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'  -  ('PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")))  -  ('PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Planned_Amount'",
            "change_percentage_prev_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Planned_Amount'",
            "change_percentage_curr_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(year_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'  -  ('ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")))  -  ('ForecastedDailyAmount'*daysBetween(year_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Forecasted_Amount'",
            "change_percentage_prev_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Forecasted_Amount'",
            "actuals_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-'ActualDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-'PlannedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "forecasted_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-'ForecastedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)"
          },
          {
            "display" : "CY",
            "value" : "Current Year",
            "startdate_filter" : "[..\"current year\"]",
            "enddate_filter" : "[\"current year\"..]",
            "start_end_epoch" : "date_to_epoch(toDate(toString(now(),\"yyyy\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(year_last_day(now()),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "duration" : "daysBetween( (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"))>date_to_epoch(toDate((toString(now(), \"yyyy\")+\"-01-01\"),\"yyyy-MM-dd\")) then toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\") else toDate((toString(now(), \"yyyy\")+\"-01-01\"),\"yyyy-MM-dd\") end),  (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\"))>date_to_epoch(toDate(toString(year_last_day(now()),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) then toDate(toString(year_last_day(now()),\"yyyy-MM-dd\") ,\"yyyy-MM-dd\") else  toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\") end) )",
            "filter" : "[\"current year\"..\"current year\"]",
            "date_min_timeseries" : "current year",
            "date_max_timeseries" : "current year",
            "date_min" : "current year",
            "date_max" : "current year",
            "change_percentage_curr_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_prev_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('LastValidDate', \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_curr_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(year_last_day(now()), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'  -  ('PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")))  -  ('PlannedDailyAmount'*daysBetween(toDate(toString(year_last_day(now()), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Planned_Amount'",
            "change_percentage_prev_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Planned_Amount'",
            "change_percentage_curr_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(year_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'  -  ('ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")))  -  ('ForecastedDailyAmount'*daysBetween(year_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Forecasted_Amount'",
            "change_percentage_prev_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Forecasted_Amount'",
            "actuals_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-'ActualDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(year_last_day(now()), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-'PlannedDailyAmount'*( daysBetween(toDate(toString(year_last_day(now()), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "forecasted_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-'ForecastedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)"
          },
          {
            "display" : "ALL TIME",
            "value" : "All Time",
            "startdate_filter" : "all",
            "enddate_filter" : "all",
            "start_end_epoch" : "date_to_epoch(toDate(number_to_string(string_to_number(toString(now(),\"yyyy\"))-10, \"#\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(number_to_string(string_to_number(toString(now(),\"yyyy\"))+10, \"#\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "duration" : "daysBetween( toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"),  toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\")  )",
            "filter" : "[..\"current day\"]",
            "date_min_timeseries" : "current year - 10 years",
            "date_max_timeseries" : "current year + 10 years",
            "date_min" : "current year - 10 years",
            "date_max" : "current day + 10 years",
            "change_percentage_curr_actuals" : "'DerivedActualAmount' as 'Actual_Amount'",
            "change_percentage_prev_actuals" : "0 as 'Actual_Amount'",
            "change_percentage_curr_planned" : "'PlannedAmountFinal' as 'Planned_Amount'",
            "change_percentage_prev_planned" : "0 as 'Planned_Amount'",
            "change_percentage_curr_forecasted" : "'ForecastedAmountFinal' as 'Forecasted_Amount'",
            "change_percentage_prev_forecasted" : "0 as 'Forecasted_Amount'",
            "actuals_cal" : "'DerivedActualAmount'",
            "planned_cal" : "'PlannedAmountFinal'",
            "forecasted_cal" : "'ForecastedAmountFinal'"
          }
        ]
      },
      "Revenue_Realisation_Trend_Forecast" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Realisation_Trend",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n all_slaps = filter all_slaps by 'isValidProductSchedule' == \"true\";\n valid_slaps = filter all_slaps by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"current day\"];\nvalid_slaps = filter valid_slaps by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"1 year ago\"..];\nvalid_slaps = foreach valid_slaps generate date_to_epoch(toDate(number_to_string(string_to_number(toString(now(),\"yyyy\"))-1, \"#\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nStart = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month', \ncase when ('StartDate_sec_epoch' >= 'Start') && ('LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' < date_to_epoch(month_last_day(toDate('Start')))) then (daysBetween(toDate('Start'),toDate('LastValidDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted_Amount', \ncase when ('StartDate_sec_epoch' >= 'Start') && ('LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ActualDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' < date_to_epoch(month_last_day(toDate('Start')))) then (daysBetween(toDate('Start'),toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ActualDailyAmount' else 'DerivedActualAmount' end as 'ActualAmount', \n'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\nEnd_Value = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', \ncase \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('LastValidDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('LastValidDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Forecasted_Amount', \ncase \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('LastValidDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'ActualDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('LastValidDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ActualDailyAmount' \n    else 0 end as 'ActualAmount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\nDataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','ActualAmount' as 'ActualAmount', 'Forecasted_Amount' as 'Forecasted_Amount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('ActualAmount') as 'ActualAmount', sum('Forecasted_Amount') as 'Forecasted_Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount';\nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Forecasted_Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted_Amount' end as 'Forecasted_Amount', case when 'ActualAmount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'ActualAmount' end as 'ActualAmount';\nresult = group FilledData by ('Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', 'Date_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', sum('Forecasted_Amount') as 'Forecasted_Amount', sum('ActualAmount') as 'ActualAmount';\nresult_cy = filter result by {{row(Time_Toggle_1.selection, [0], [\"date_min\",\"date_max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\nresult_cy = group result_cy by 'StartDate_Year~~~StartDate_Month';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', coalesce(sum('ActualAmount'),0)*100/sum('Forecasted_Amount') as 'Revenue_Realisation';\nresult_cy = order result_cy by 'StartDate_Year~~~StartDate_Month' asc;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-bar",
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "binValues" : false,
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Change_Percentage_4" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Change_Percentage",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'DerivedActualAmount' as 'DerivedActualAmount', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\n q_current = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_curr_planned\"]).asObject()}}, {{row(Time_Toggle_1.selection, [0], [\"change_percentage_curr_actuals\"]).asObject()}};\n\nq_previous = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_prev_planned\"]).asObject()}}, {{row(Time_Toggle_1.selection, [0], [\"change_percentage_prev_actuals\"]).asObject()}};\n\nresult = group q_current by all full, q_previous by all;\nresult = foreach result generate coalesce(sum(q_current.'Planned_Amount'),0) as 'current_Planned_Amount', coalesce(sum(q_previous.'Planned_Amount'),0) as 'previous_Planned_Amount', coalesce(sum(q_current.'Actual_Amount'),0) as 'current_Actual_Amount', coalesce(sum(q_previous.'Actual_Amount'),0) as 'previous_Actual_Amount', coalesce(sum(q_current.'Planned_Amount'),0) - coalesce(sum(q_current.'Actual_Amount'),0) as 'current_Revenue_Leak',  coalesce(sum(q_previous.'Planned_Amount'),0) - coalesce(sum(q_previous.'Actual_Amount'),0) as 'previous_Revenue_Leak';\nresult = foreach result generate round((coalesce(sum('current_Revenue_Leak'),0)-sum('previous_Revenue_Leak'))*100/sum('previous_Revenue_Leak')) as 'Revenue_Leak_change';\nresult = order result by ('Revenue_Leak_change' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Actual_Revenue_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Actual_Revenue",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'PlannedDailyAmount' as 'PlannedDailyAmount';\n result = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{cell(Time_Toggle_1.selection, 0, \"actuals_cal\").asObject()}} as 'Actual_Amount'\n, 'DerivedActualAmount' as 'A', 'ActualDailyAmount' as 'B', daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) as 'days', daysBetween(year_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\") ) as 'days_to_end';\nresult = foreach result generate 'Id' as 'Id', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'A', 'B', 'days', 'days_to_end', 'Actual_Amount', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate';\nresult = group result by all;\nresult = foreach result generate sum('Actual_Amount') as 'Actual_Amount';\nresult = order result by ('Actual_Amount' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Change_Percentage_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Change_Percentage",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\n q_current = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_curr_actuals\"]).asObject()}};\n q_previous = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_prev_actuals\"]).asObject()}};\nresult = group q_current by all full, q_previous by all;\nresult = foreach result generate coalesce(sum(q_current.'Actual_Amount'),0) as 'current_Actual_Amount', coalesce(sum(q_previous.'Actual_Amount'),0) as 'previous_Actual_Amount';\nresult = foreach result generate ('current_Actual_Amount'-'previous_Actual_Amount')*100/'previous_Actual_Amount' as 'change_percentage';\nresult = order result by ('change_percentage' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Revenue_Realisation__1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Realisation_Trend",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n all_slaps = filter all_slaps by 'isValidProductSchedule' == \"true\";\n valid_slaps = filter all_slaps by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"startdate_filter\").asObject()}};\nvalid_slaps = filter valid_slaps by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"enddate_filter\").asObject()}};\nvalid_slaps = foreach valid_slaps generate {{cell(Time_Toggle_1.selection, 0, \"start_end_epoch\").asObject()}}, 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nStart = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month', \n                (case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end) as  'PlannedAmount',                 \n(case  when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now()) >= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('End'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now())>= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('End'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(now()) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), now())+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch' && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount'  else 0 end) as 'ActualAmount'                , \n'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\nEnd_Value = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', \n                (case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400))     && ('LastValidDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'PlannedDailyAmount'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('LastValidDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyAmount'    else 0 end) as 'PlannedAmount'                , \n(case \n    when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' <= 'End') && (date_to_epoch(now()) >= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'ActualDailyAmount'  when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= 'End') && (date_to_epoch(now()) <= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * 'ActualDailyAmount'  when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)))  && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' >= 'End') && (date_to_epoch(now()) >= 'End' ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ActualDailyAmount'  else 0 end)  as 'ActualAmount'                , 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\nDataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','ActualAmount' as 'ActualAmount', 'PlannedAmount' as 'PlannedAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount') as 'PlannedAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount';\nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'PlannedAmount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'PlannedAmount' end as 'PlannedAmount', case when 'ActualAmount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'ActualAmount' end as 'ActualAmount';\nresult = group FilledData by ('Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', 'Date_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', sum('PlannedAmount') as 'PlannedAmount', sum('ActualAmount') as 'ActualAmount';\nresult_cy = filter result by {{row(Time_Toggle_1.selection, [0], [\"date_min\",\"date_max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\nresult_cy = group result_cy by 'StartDate_Year~~~StartDate_Month';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', coalesce(sum('ActualAmount'),0) - sum('PlannedAmount') as 'Revenue_Leak';\nresult_cy = order result_cy by 'StartDate_Year~~~StartDate_Month' asc;",
        "receiveFacet" : true,
        "selectMode" : "none",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-bar",
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "binValues" : false,
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Change_Percentage_3_Forecast" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Change_Percentage",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'DerivedActualAmount' as 'DerivedActualAmount', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\n q_current = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_curr_forecasted\"]).asObject()}}, {{row(Time_Toggle_1.selection, [0], [\"change_percentage_curr_actuals\"]).asObject()}};\n\nq_previous = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_prev_forecasted\"]).asObject()}}, {{row(Time_Toggle_1.selection, [0], [\"change_percentage_prev_actuals\"]).asObject()}};\n\nresult = group q_current by all full, q_previous by all;\nresult = foreach result generate coalesce(sum(q_current.'Forecasted_Amount'),0) as 'current_Planned_Amount', coalesce(sum(q_previous.'Forecasted_Amount'),0) as 'previous_Forecasted_Amount', coalesce(sum(q_current.'Actual_Amount'),0) as 'current_Actual_Amount', coalesce(sum(q_previous.'Actual_Amount'),0) as 'previous_Actual_Amount', round(coalesce(sum(q_current.'Actual_Amount'),0)*100/sum(q_current.'Forecasted_Amount')) as 'current_Revenue_Realisation',  round(coalesce(sum(q_previous.'Actual_Amount'),0)*100/sum(q_previous.'Forecasted_Amount')) as 'previous_Revenue_Realisation';\nresult = foreach result generate round((coalesce(sum('current_Revenue_Realisation'),0)-sum('previous_Revenue_Realisation'))*100/sum('previous_Revenue_Realisation')) as 'Revenue_Realisation_change';\nresult = order result by ('Revenue_Realisation_change' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Planned_Revenue_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Planned_Revenue",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nresult = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{cell(Time_Toggle_1.selection, 0, \"planned_cal\").asObject()}} as 'Planned_Amount'\n, 'DerivedPlannedAmount' as 'A', 'PlannedDailyAmount' as 'B', daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) as 'days', daysBetween(year_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\") ) as 'days_to_end';\nresult = foreach result generate 'Id' as 'Id', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'A', 'B', 'days', 'days_to_end', 'Planned_Amount', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate';\nresult = group result by all;\nresult = foreach result generate sum('Planned_Amount') as 'Planned_Amount';\nresult = order result by ('Planned_Amount' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Revenue_Realization_1_Forecast" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Realisation",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal';\n result = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{cell(Time_Toggle_1.selection, 0, \"forecasted_cal\").asObject()}} as 'Forecasted_Amount', \n{{cell(Time_Toggle_1.selection, 0, \"actuals_cal\").asObject()}} as 'Actual_Amount';\nresult = foreach result generate 'Id' as 'Id', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'Forecasted_Amount', 'Actual_Amount';\nresult = group result by all;\nresult = foreach result generate round(coalesce(sum('Actual_Amount'),0)*100/sum('Forecasted_Amount')) as 'Revenue_Realisation';\nresult = order result by ('Revenue_Realisation' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Selected_Acc_Info_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Selected_Acc_Info",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n q = foreach q generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status', 'StartDate' as 'StartDate', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', 'DiscountPercentage' as 'DiscountPercentage', 'IsDeleted' as 'IsDeleted', 'PlannedAmountFinal' as 'PlannedAmountFinal', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\n q = foreach q generate 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', 'DiscountPercentage' as 'DiscountPercentage', 'IsDeleted' as 'IsDeleted', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', \n (case  \n when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount' \n when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  \n else 0\n end) as 'Actual_Amount',\n (case when 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\" && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current day\"..\"60 days ahead\"] then 'DerivedPlannedAmount' else 0 end) as 'Upcoming_Renewal',\n (case when 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\" && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"] then 'SalesAgreementProduct.SalesAgreement.Account.Name' else null end) as 'Upcoming_Renewal_Agreements',\n (case when 'SalesAgreementProduct.SalesAgreement.Status' == \"InProcess\" then \n     (case  \n     when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current year\"]) then 'DerivedPlannedAmount' \n     when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'DerivedPlannedAmount'-('PlannedDailyAmount'*daysBetween(year_last_day(now()), toDate('ActualEndDate',\"yyyy-MM-dd\")))  \n     else 0 end)\n else 0 end) as 'Pending_Approvals',\n (case when 'SalesAgreementProduct.SalesAgreement.Status' == \"InProcess\" then \n     (case  \n     when toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"] then 'SalesAgreementProduct.SalesAgreement.Account.Name'  \n     else null end)\n else null end) as 'Pending_Approvals_Agreements';\n q_filtered = filter q by {{cell(SalesAgreementProduc_4.selection, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asEquality( 'SalesAgreementProduct.SalesAgreement.Account.Name')}};\n q_res = group q by all full, q_filtered by all;\n q_res = foreach q_res generate first(q_filtered.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', date_diff(\"year\", toDate(min(q_filtered.'StartDate_sec_epoch')), now()) as 'Relationship_Duration', (case when date_diff(\"year\", toDate(min(q_filtered.'StartDate_sec_epoch')), now()) == 1 then  number_to_string(date_diff(\"year\", toDate(min(q_filtered.'StartDate_sec_epoch')), now()),\"#,00\")+\" year\" else number_to_string(date_diff(\"year\", toDate(min(q_filtered.'StartDate_sec_epoch')), now()),\"#,00\")+\" years\" end) as 'Relationship_Duration_phrase', toDate(min(q_filtered.'StartDate_sec_epoch')) as 'First_Agreement_Date', number_to_string(round(coalesce(sum(q_filtered.'DerivedActualAmount'),0)/1000000), \"#,00\") as 'Lifetime_Value', round(coalesce(sum(q_filtered.'Actual_Amount'),0)*100/sum(q.'Actual_Amount'),2) as 'CY_Contribution', number_to_string(round(coalesce(sum(q_filtered.'Upcoming_Renewal'),0)/1000000),\"#,00\") as 'Upcoming_Renewal', unique(q_filtered.'Upcoming_Renewal_Agreements') as 'Upcoming_Renewal_Agreements', (case when unique(q_filtered.'Upcoming_Renewal_Agreements')==1 then \"is \" else \"are \" end)+number_to_string(unique(q_filtered.'Upcoming_Renewal_Agreements'), \"#,00\")+(case when unique(q_filtered.'Upcoming_Renewal_Agreements')==1 then \" upcoming agreement renewal\" else \" upcoming agreement renewals\" end) as 'Upcoming_Renewal_Agreements_phrase', (case when unique(q_filtered.'Pending_Approvals_Agreements')==1 then \"is \" else \"are \" end)+number_to_string(unique(q_filtered.'Pending_Approvals_Agreements'), \"#,00\")+(case when unique(q_filtered.'Pending_Approvals_Agreements')==1 then \" agreement with pending approval\" else \" agreements with pending approvals\" end) as 'Pending_Approvals_Agreements_phrase', number_to_string(round(coalesce(sum(q_filtered.'Pending_Approvals'),0)/1000000), \"#,00\") as 'Pending_Approvals', unique(q_filtered.'Pending_Approvals_Agreements') as 'Pending_Approvals_Agreements';",
        "receiveFacet" : false,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [ ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "mode" : "fittocontainer",
            "numberOfLines" : 1,
            "showActionMenu" : true,
            "totals" : true,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "Revenue_Realization_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Realisation",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal';\n result = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{cell(Time_Toggle_1.selection, 0, \"planned_cal\").asObject()}} as 'Planned_Amount', \n{{cell(Time_Toggle_1.selection, 0, \"actuals_cal\").asObject()}} as 'Actual_Amount';\nresult = foreach result generate 'Id' as 'Id', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'Planned_Amount', 'Actual_Amount';\nresult = group result by all;\nresult = foreach result generate round(coalesce(sum('Actual_Amount'),0)*100/sum('Planned_Amount')) as 'Revenue_Realisation';\nresult = order result by ('Revenue_Realisation' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Revenue_Difference_1_Forecast" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Difference",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal';\n result = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{cell(Time_Toggle_1.selection, 0, \"forecasted_cal\").asObject()}} as 'Forecasted_Amount', \n{{cell(Time_Toggle_1.selection, 0, \"actuals_cal\").asObject()}} as 'Actual_Amount';\nresult = foreach result generate 'Id' as 'Id', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'Forecasted_Amount', 'Actual_Amount';\nresult = group result by all;\nresult = foreach result generate round((sum('Forecasted_Amount')-coalesce(sum('Actual_Amount'),0))*100/sum('Forecasted_Amount')) as 'Revenue_Difference';\nresult = order result by ('Revenue_Difference' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Account_Actual_Reven_Forecast" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Account Actual Revenue",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n all_slaps = filter all_slaps by 'isValidProductSchedule' == \"true\";\n valid_slaps = filter all_slaps by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"current month\"];\nvalid_slaps = filter valid_slaps by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"1 year ago\"..];\n valid_slaps = foreach valid_slaps generate date_to_epoch(toDate(number_to_string(string_to_number(toString(now(),\"yyyy\"))-1, \"#\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy\")    +    \"-\"    +    toString(month_last_day(now()),\"MM-dd \")    +    \"23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'DerivedActualAmount' as 'DerivedActualAmount';\n\nStart = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 (case  when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now()) >= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('End'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now())>= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('End'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(now()) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), now())+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch' && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount'  else 0 end) as 'Amount'                , 'DerivedActualAmount' as 'DerivedActualAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\n\nEnd_Value = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month',                  (case  when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' <= 'End') && (date_to_epoch(now()) >= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'ActualDailyAmount'  when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= 'End') && (date_to_epoch(now()) <= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * 'ActualDailyAmount'  when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)))  && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' >= 'End') && (date_to_epoch(now()) >= 'End' ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ActualDailyAmount'  else 0 end)  as 'Amount'                , 'DerivedActualAmount' as 'DerivedActualAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\n\nDataForFill = union Start, End_Value; \nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'DerivedActualAmount' as 'DerivedActualAmount', 'ActualDailyAmount' as 'ActualDailyAmount'; \nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); \nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month'); \n\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Amount') as 'Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount'; \nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Amount' end as 'Amount'; \nresult = group FilledData by ('Date_Year', 'Date_Month'); \nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', 'Date_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', sum('Amount') as 'Amount';\n\n\n\nresult = fill result by (dateCols=('StartDate_Year','StartDate_Month', \"Y-M\"));\nresult = timeseries result generate 'Amount' as 'Amount_prediction' with (length=12, predictionInterval=95, dateCols=('StartDate_Year', 'StartDate_Month', \"Y-M\"), ignoreLast = false);\nresult = foreach result generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', (case when date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [\"current month\"..] then coalesce('Amount', 'Amount_prediction') else 'Amount' end) as 'Amount', 'Amount_prediction_low_95', 'Amount_prediction_high_95';\nresult_cy = filter result by {{row(Time_Toggle_1.selection, [0], [\"date_min_timeseries\",\"date_max_timeseries\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\nresult_cy = group result_cy by 'StartDate_Year~~~StartDate_Month';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum('Amount_prediction_low_95') as 'Amount_prediction_low_95', sum('Amount_prediction_high_95') as 'Amount_prediction_high_95', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', (sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc)  -  sum('Amount')  +  sum('Amount_prediction_low_95')) as 'cumm_Amount_low_95', (sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc)  -  sum('Amount')  +  sum('Amount_prediction_high_95')) as 'cumm_Amount_high_95';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', {{row(Project_Toggle_1.selection,[0],[\"projection_final\"]).asObject()}};\nresult_cy = order result_cy by 'StartDate_Year~~~StartDate_Month' asc;  ",
        "receiveFacet" : true,
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [
                {
                  "color" : "rgb(0, 161, 224)",
                  "time" : "{{cell(TODAY_reference_line_1.result, 0, \"Current_Year~~~Current_Month\").asObject()}}",
                  "label" : "TODAY"
                }
              ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Revenue_Difference_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Difference",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal';\n result = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{cell(Time_Toggle_1.selection, 0, \"planned_cal\").asObject()}} as 'Planned_Amount', \n{{cell(Time_Toggle_1.selection, 0, \"actuals_cal\").asObject()}} as 'Actual_Amount';\nresult = foreach result generate 'Id' as 'Id', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'Planned_Amount', 'Actual_Amount';\nresult = group result by all;\nresult = foreach result generate round((sum('Planned_Amount')-coalesce(sum('Actual_Amount'),0))*100/sum('Planned_Amount')) as 'Revenue_Difference';\nresult = order result by ('Revenue_Difference' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "TODAY_reference_line_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "TODAY_reference_line",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = foreach q generate date_diff(\"week\", toDate(toString(now(), \"yyyy\")+\"-01-01 00:00:00\"), now()) as 'CurrentWeek';\nq = group q by all;\nq = foreach q generate first('CurrentWeek') as 'CurrentWeek', \"W\"+number_to_string(first('CurrentWeek'), \"#00\") as 'CurrentWeek_label', toString(now(),\"yyyy\")+\"~~~\"+toString(now(),\"MM\") as 'Current_Year~~~Current_Month';\nq = limit q 1;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Planned_Amount_MoM_Forecast" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Planned_Amount_MoM_CY",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n all_slaps = filter all_slaps by 'isValidProductSchedule' == \"true\";\n valid_slaps = filter all_slaps by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"current day\"];\nvalid_slaps = filter valid_slaps by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"1 year ago\"..];\nvalid_slaps = foreach valid_slaps generate date_to_epoch(toDate(number_to_string(string_to_number(toString(now(),\"yyyy\"))-1, \"#\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nStart = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month', case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' < date_to_epoch(month_last_day(toDate('Start')))) then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nDataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount';\nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount';\nresult = group FilledData by ('Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', 'Date_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', sum('Amount') as 'Amount';\nresult = fill result by (dateCols=('StartDate_Year','StartDate_Month', \"Y-M\"));\nresult = timeseries result generate 'Amount' as 'Amount_prediction' with (length=12, predictionInterval=95, dateCols=('StartDate_Year', 'StartDate_Month', \"Y-M\"), ignoreLast = false);\nresult = foreach result generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', (case when date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [\"current month\"..] then coalesce('Amount', 'Amount_prediction') else 'Amount' end) as 'Amount', 'Amount_prediction_low_95', 'Amount_prediction_high_95';\nresult_cy = filter result by {{row(Time_Toggle_1.selection, [0], [\"date_min\",\"date_max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\nresult_cy = group result_cy by 'StartDate_Year~~~StartDate_Month';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum('Amount_prediction_low_95') as 'Amount_prediction_low_95', sum('Amount_prediction_high_95') as 'Amount_prediction_high_95', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', (sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc)  -  sum('Amount')  +  sum('Amount_prediction_low_95')) as 'cumm_Amount_low_95', (sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc)  -  sum('Amount')  +  sum('Amount_prediction_high_95')) as 'cumm_Amount_high_95';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount';\nresult_cy = order result_cy by 'StartDate_Year~~~StartDate_Month' asc;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "timeAxis" : [
                "StartDate_Year~~~StartDate_Month"
              ],
              "trellis" : [ ],
              "plots" : [
                "Amount",
                "cumm_Amount"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Project_Toggle_1" : {
        "broadcastFacet" : true,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "Project_Toggle",
        "selectMode" : "singlerequired",
        "start" : {
          "display" : [
            "OFF"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "display" : "OFF",
            "value" : "Off",
            "start_filter" : "date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"current month\"]",
            "end_filter" : "date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"1 year ago\"..]",
            "projection_start_end" : "date_to_epoch(toDate(number_to_string(string_to_number(toString(now(),\"yyyy\"))-1, \"#\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy\")    +    \"-\"    +    toString(month_last_day(now()),\"MM-dd \")    +    \"23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "projection_final" : "(case when (string_to_number('StartDate_Month')> string_to_number(toString(now(),\"MM\")) && string_to_number('StartDate_Year')== string_to_number(toString(now(),\"yyyy\"))) or string_to_number('StartDate_Year')> string_to_number(toString(now(),\"yyyy\"))  then null else 'Amount' end) as 'Actual_Revenue', (case when (string_to_number('StartDate_Month')> string_to_number(toString(now(),\"MM\")) && string_to_number('StartDate_Year')== string_to_number(toString(now(),\"yyyy\"))) or string_to_number('StartDate_Year')> string_to_number(toString(now(),\"yyyy\"))  then null else 'cumm_Amount' end) as 'cumm_Amount'"
          },
          {
            "display" : "ON",
            "value" : "On",
            "start_filter" : "date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"1 month ago\"]",
            "end_filter" : "date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"1 year ago\"..]",
            "projection_start_end" : "date_to_epoch(toDate(number_to_string(string_to_number(toString(now(),\"yyyy\"))-1, \"#\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy\")    +    \"-\"    +    number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")    +    toString(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800))),\"-dd \")    +    \"23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "projection_final" : "'Amount' as 'Actual_Revenue', 'cumm_Amount' as 'cumm_Amount', (case when toString(now(),\"yyyy\")+\"~~~\"+toString(now(),\"MM\") == 'StartDate_Year~~~StartDate_Month' then 'cumm_Amount' else 'cumm_Amount_low_95' end) as 'cumm_Amount_low_95', (case when toString(now(),\"yyyy\")+\"~~~\"+toString(now(),\"MM\") == 'StartDate_Year~~~StartDate_Month' then 'cumm_Amount' else 'cumm_Amount_high_95' end) as 'cumm_Amount_high_95'"
          }
        ]
      },
      "SalesAgreementProduc_2" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.SalesAgreement.Account.Owner.Name"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "multi",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "Revenue_Realisation_Trend" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Realisation_Trend",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n all_slaps = filter all_slaps by 'isValidProductSchedule' == \"true\";\n valid_slaps = filter all_slaps by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"startdate_filter\").asObject()}};\nvalid_slaps = filter valid_slaps by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"enddate_filter\").asObject()}};\nvalid_slaps = foreach valid_slaps generate {{cell(Time_Toggle_1.selection, 0, \"start_end_epoch\").asObject()}}, 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\n Start = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month', \n                (case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end) as  'PlannedAmount',                 \n(case  when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now()) >= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('End'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now())>= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('End'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(now()) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), now())+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch' && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount'  else 0 end) as 'ActualAmount'                , \n'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\nEnd_Value = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', \n                (case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400))     && ('LastValidDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'PlannedDailyAmount'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('LastValidDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyAmount'    else 0 end) as 'PlannedAmount'                , \n(case \n    when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' <= 'End') && (date_to_epoch(now()) >= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'ActualDailyAmount'  when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= 'End') && (date_to_epoch(now()) <= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * 'ActualDailyAmount'  when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)))  && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' >= 'End') && (date_to_epoch(now()) >= 'End' ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ActualDailyAmount'  else 0 end)  as 'ActualAmount'                , 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\n DataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','ActualAmount' as 'ActualAmount', 'PlannedAmount' as 'PlannedAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount') as 'PlannedAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount';\nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'PlannedAmount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'PlannedAmount' end as 'PlannedAmount', case when 'ActualAmount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'ActualAmount' end as 'ActualAmount';\nresult = group FilledData by ('Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', 'Date_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', sum('PlannedAmount') as 'PlannedAmount', sum('ActualAmount') as 'ActualAmount';\nresult_cy = filter result by {{row(Time_Toggle_1.selection, [0], [\"date_min\",\"date_max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\nresult_cy = group result_cy by 'StartDate_Year~~~StartDate_Month';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', coalesce(sum('ActualAmount'),0)*100/sum('PlannedAmount') as 'Revenue_Realisation';\nresult_cy = order result_cy by 'StartDate_Year~~~StartDate_Month' asc;",
        "receiveFacet" : true,
        "selectMode" : "none",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-bar",
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "binValues" : false,
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "SalesAgreementProduc_3" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.SalesAgreement.Account.Type"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "multi",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "Revenue_Leak_1_Forecast" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Leak",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal';\n  result = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{cell(Time_Toggle_1.selection, 0, \"forecasted_cal\").asObject()}} as 'Forecasted_Amount', \n{{cell(Time_Toggle_1.selection, 0, \"actuals_cal\").asObject()}} as 'Actual_Amount';\nresult = foreach result generate 'Id' as 'Id', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'Forecasted_Amount', 'Actual_Amount';\nresult = group result by all;\nresult = foreach result generate coalesce(sum('Forecasted_Amount'),0) - coalesce(sum('Actual_Amount'),0) as 'Revenue_Leak';\nresult = order result by ('Revenue_Leak' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Change_Percentage_4_Forecast" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Change_Percentage",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'DerivedActualAmount' as 'DerivedActualAmount', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\n q_current = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_curr_forecasted\"]).asObject()}}, {{row(Time_Toggle_1.selection, [0], [\"change_percentage_curr_actuals\"]).asObject()}};\n\nq_previous = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', {{row(Time_Toggle_1.selection, [0], [\"change_percentage_prev_forecasted\"]).asObject()}}, {{row(Time_Toggle_1.selection, [0], [\"change_percentage_prev_actuals\"]).asObject()}};\n\nresult = group q_current by all full, q_previous by all;\nresult = foreach result generate coalesce(sum(q_current.'Forecasted_Amount'),0) as 'current_Forecasted_Amount', coalesce(sum(q_previous.'Forecasted_Amount'),0) as 'previous_Forecasted_Amount', coalesce(sum(q_current.'Actual_Amount'),0) as 'current_Actual_Amount', coalesce(sum(q_previous.'Actual_Amount'),0) as 'previous_Actual_Amount', coalesce(sum(q_current.'Forecasted_Amount'),0) - coalesce(sum(q_current.'Actual_Amount'),0) as 'current_Revenue_Leak',  coalesce(sum(q_previous.'Forecasted_Amount'),0) - coalesce(sum(q_previous.'Actual_Amount'),0) as 'previous_Revenue_Leak';\nresult = foreach result generate round((coalesce(sum('current_Revenue_Leak'),0)-sum('previous_Revenue_Leak'))*100/sum('previous_Revenue_Leak')) as 'Revenue_Leak_change';\nresult = order result by ('Revenue_Leak_change' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Details_Table_2" : {
        "broadcastFacet" : true,
        "groups" : [
          "SalesAgreementProduct.SalesAgreement.Status",
          "Frequency",
          "SalesAgreementProduct.SalesAgreement.Name",
          "Agreement Start Date",
          "Agreement End Date"
        ],
        "label" : "Details Table",
        "numbers" : [
          "Active Days",
          "Planned Revenue",
          "Actual Revenue",
          "Revenue_Realisation"
        ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n q = filter q by 'isValidProductSchedule' == \"true\";\n q = filter q by date('StartDate_Year','StartDate_Month','StartDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"startdate_filter\").asObject())}};\n q = filter q by date('ActualEndDate_Year','ActualEndDate_Month','ActualEndDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"enddate_filter\").asObject())}};\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Status', 'SalesAgreementProduct.SalesAgreement.ScheduleFrequency', 'SalesAgreementProduct.SalesAgreementId', 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.StartDate', 'SalesAgreementProduct.SalesAgreement.EndDate','SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal';\n result = foreach q generate 'Id' as 'Id', 'SalesAgreementProduct.SalesAgreement.Status', 'SalesAgreementProduct.SalesAgreement.ScheduleFrequency', 'SalesAgreementProduct.SalesAgreementId', 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.StartDate', 'SalesAgreementProduct.SalesAgreement.EndDate','SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{cell(Time_Toggle_1.selection, 0, \"planned_cal\").asObject()}} as 'Planned_Amount', \n{{cell(Time_Toggle_1.selection, 0, \"actuals_cal\").asObject()}} as 'Actual_Amount';\n result = group result by ('SalesAgreementProduct.SalesAgreement.Status', 'SalesAgreementProduct.SalesAgreement.ScheduleFrequency', 'SalesAgreementProduct.SalesAgreementId', 'SalesAgreementProduct.SalesAgreement.StartDate' ,'SalesAgreementProduct.SalesAgreement.EndDate');\n result = foreach result generate 'SalesAgreementProduct.SalesAgreement.Status', 'SalesAgreementProduct.SalesAgreement.ScheduleFrequency' as 'Frequency', first('SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.StartDate' as 'Agreement Start Date' ,'SalesAgreementProduct.SalesAgreement.EndDate' as 'Agreement End Date', {{cell(Time_Toggle_1.selection, 0, \"duration\").asObject()}} as 'Active Days', coalesce(sum('Actual_Amount'),0) as 'Actual Revenue', coalesce(sum('Planned_Amount'),0) as 'Planned Revenue', coalesce(sum('Actual_Amount'),0)*100/sum('Planned_Amount') as 'Revenue_Realisation';\n result = filter result by {{column(Agreement_Status_Selector.selection, [\"SalesAgreementProduct.SalesAgreement.Status\"]).asEquality(\"SalesAgreementProduct.SalesAgreement.Status\")}};\n result = order result by ('SalesAgreementProduct.SalesAgreement.Status' asc, 'Frequency' asc, 'SalesAgreementProduct.SalesAgreement.Name' asc, 'Agreement Start Date' asc, 'Revenue_Realisation' desc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [
          "SalesAgreementProduct.SalesAgreement.Status",
          "Frequency",
          "SalesAgreementProduct.SalesAgreement.Name",
          "Agreement Start Date",
          "Agreement End Date"
        ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [
              "Active Days",
              "Planned Revenue",
              "Actual Revenue",
              "Revenue_Realisation",
              "SalesAgreementProduct.SalesAgreement.Status",
              "Frequency",
              "SalesAgreementProduct.SalesAgreement.Name",
              "Agreement StartDate",
              "Agreement End Date"
            ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "mode" : "fittocontainer",
            "numberOfLines" : 1,
            "pivoted" : false,
            "showActionMenu" : true,
            "showRowIndexColumn" : false,
            "totals" : true,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "SalesAgreementProduc_1" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "unique",
                "SalesAgreementProduct.Name"
              ]
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "single",
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "trellis" : [ ],
              "dimensionAxis" : [ ],
              "plots" : [
                "unique_SalesAgreementProduct.Name"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Revenue_Realisation__1_Forecast" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Realisation_Trend",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n all_slaps = filter all_slaps by 'isValidProductSchedule' == \"true\";\n valid_slaps = filter all_slaps by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"current day\"];\nvalid_slaps = filter valid_slaps by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"1 year ago\"..];\nvalid_slaps = foreach valid_slaps generate date_to_epoch(toDate(number_to_string(string_to_number(toString(now(),\"yyyy\"))-1, \"#\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nStart = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month', \ncase when ('StartDate_sec_epoch' >= 'Start') && ('LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' < date_to_epoch(month_last_day(toDate('Start')))) then (daysBetween(toDate('Start'),toDate('LastValidDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted_Amount', \ncase when ('StartDate_sec_epoch' >= 'Start') && ('LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ActualDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' < date_to_epoch(month_last_day(toDate('Start')))) then (daysBetween(toDate('Start'),toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ActualDailyAmount' else 'DerivedActualAmount' end as 'ActualAmount', \n'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\nEnd_Value = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', \ncase \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('LastValidDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('LastValidDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Forecasted_Amount', \ncase \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('LastValidDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'ActualDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('LastValidDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ActualDailyAmount' \n    else 0 end as 'ActualAmount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\nDataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','ActualAmount' as 'ActualAmount', 'Forecasted_Amount' as 'Forecasted_Amount', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('ActualAmount') as 'ActualAmount', sum('Forecasted_Amount') as 'Forecasted_Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount';\nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Forecasted_Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted_Amount' end as 'Forecasted_Amount', case when 'ActualAmount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'ActualAmount' end as 'ActualAmount';\nresult = group FilledData by ('Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', 'Date_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', sum('Forecasted_Amount') as 'Forecasted_Amount', sum('ActualAmount') as 'ActualAmount';\nresult_cy = filter result by {{row(Time_Toggle_1.selection, [0], [\"date_min\",\"date_max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\nresult_cy = group result_cy by 'StartDate_Year~~~StartDate_Month';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Forecasted_Amount')-coalesce(sum('ActualAmount'),0) as 'Revenue_Leak';\nresult_cy = order result_cy by 'StartDate_Year~~~StartDate_Month' asc;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-bar",
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "binValues" : false,
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Details_Table_1" : {
        "broadcastFacet" : true,
        "groups" : [
          "SalesAgreementProduct.SalesAgreement.Status",
          "StartDate",
          "Frequency",
          "End Date",
          "CQ Pending Approvals",
          "CQ Upcoming Renewals"
        ],
        "label" : "Details Table",
        "numbers" : [
          "Duration",
          "Planned Amount",
          "DerivedActualAmount",
          "Revenue_Realisation"
        ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.Status', 'SalesAgreementProduct.SalesAgreement.ScheduleFrequency', 'SalesAgreementProduct.SalesAgreementId', 'SalesAgreementProduct.SalesAgreement.Name', date_to_epoch(toDate(number_to_string(string_to_number(toString(now(),\"yyyy\"))-1, \"#\")+\"-01-01 00:00:00\",\"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy\")+\"-12-31 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nresult = group q by ('SalesAgreementProduct.SalesAgreement.Status', 'SalesAgreementProduct.SalesAgreement.ScheduleFrequency', 'SalesAgreementProduct.SalesAgreementId', 'StartDate', 'ActualEndDate');\nresult = foreach result generate q.'SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status', q.'SalesAgreementProduct.SalesAgreement.ScheduleFrequency' as 'Frequency', first(q.'SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name', daysBetween(toDate(q.'StartDate',\"yyyy-MM-dd\"), toDate(q.'ActualEndDate',\"yyyy-MM-dd\")) as 'Duration', q.'StartDate' as 'StartDate', q.'ActualEndDate' as 'End Date', (case when toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"] && 'SalesAgreementProduct.SalesAgreement.Status' == \"InProcess\" then \"#f4e1e1\" else \"#ffffff\" end) as 'CQ Pending Approvals', (case when toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"] && 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\" then \"#f4e1e1\" else \"#ffffff\" end) as 'CQ Upcoming Renewals', sum(q.'PlannedAmountFinal') as 'Planned Amount', sum(q.'DerivedActualAmount') as 'DerivedActualAmount', coalesce(sum(q.'DerivedActualAmount'),0)*100/sum(q.'PlannedAmountFinal') as 'Revenue_Realisation';\n\nresult = order result by ('SalesAgreementProduct.SalesAgreement.Status' asc, 'Frequency' asc, 'SalesAgreementProduct.SalesAgreement.Name' asc, 'StartDate' asc, 'Revenue_Realisation' desc);\nresult = limit result 2000;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [
          "SalesAgreementProduct.SalesAgreement.Status",
          "Frequency",
          "SalesAgreementProduct.SalesAgreement.Name",
          "StartDate",
          "End Date",
          "CQ Pending Approvals",
          "CQ Upcoming Renewals"
        ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [
              "Duration",
              "Planned Amount",
              "DerivedActualAmount",
              "Revenue_Realisation",
              "SalesAgreementProduct.SalesAgreement.Status",
              "Frequency",
              "SalesAgreementProduct.SalesAgreement.Name",
              "StartDate",
              "End Date"
            ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "mode" : "fittocontainer",
            "numberOfLines" : 1,
            "pivoted" : false,
            "showActionMenu" : true,
            "showRowIndexColumn" : false,
            "totals" : true,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "Revenue_Realisation_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Realisation",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal';\n result = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{cell(Time_Toggle_1.selection, 0, \"planned_cal\").asObject()}} as 'Planned_Amount', \n{{cell(Time_Toggle_1.selection, 0, \"actuals_cal\").asObject()}} as 'Actual_Amount';\nresult = foreach result generate 'Id' as 'Id', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'Planned_Amount', 'Actual_Amount';\nresult = group result by all;\nresult = foreach result generate round(coalesce(sum('Actual_Amount'),0)*100/sum('Planned_Amount')) as 'Revenue_Realisation';\nresult = order result by ('Revenue_Realisation' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Account_Actual_Reven_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Account Actual Revenue",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n all_slaps = filter all_slaps by 'isValidProductSchedule' == \"true\";\n valid_slaps = filter all_slaps by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"current month\"];\nvalid_slaps = filter valid_slaps by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"1 year ago\"..];\n valid_slaps = foreach valid_slaps generate date_to_epoch(toDate(number_to_string(string_to_number(toString(now(),\"yyyy\"))-1, \"#\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy\")    +    \"-\"    +    toString(month_last_day(now()),\"MM-dd \")    +    \"23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', 'DerivedActualAmount' as 'DerivedActualAmount';\n\nStart = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                  (case  when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now()) >= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('End'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now())>= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('End'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(now()) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), now())+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch' && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount'  else 0 end) as 'Amount'                , 'DerivedActualAmount' as 'DerivedActualAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\n\n End_Value = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month',                  (case  when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' <= 'End') && (date_to_epoch(now()) >= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'ActualDailyAmount'  when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= 'End') && (date_to_epoch(now()) <= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * 'ActualDailyAmount'  when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)))  && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' >= 'End') && (date_to_epoch(now()) >= 'End' ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ActualDailyAmount'  else 0 end)  as 'Amount'                          , 'DerivedActualAmount' as 'DerivedActualAmount', 'ActualDailyAmount' as 'ActualDailyAmount';\n\n DataForFill = union Start, End_Value; \nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'DerivedActualAmount' as 'DerivedActualAmount', 'ActualDailyAmount' as 'ActualDailyAmount'; \nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); \nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month'); \n\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Amount') as 'Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount'; \nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Amount' end as 'Amount';\n result = group FilledData by ('Date_Year', 'Date_Month');\n result_1 = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', 'Date_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', sum('Amount') as 'Amount';\n\n\n\n result = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', 'Date_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', sum('Amount') as 'Amount';\n\n\n\n result_ts = fill result_1 by (dateCols=('StartDate_Year','StartDate_Month', \"Y-M\"));\n result_ts = timeseries result_ts generate 'Amount' as 'Amount_prediction' with (length=12, predictionInterval=95, dateCols=('StartDate_Year', 'StartDate_Month', \"Y-M\"), ignoreLast = true);\n result_ts = foreach result_ts generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', (case when date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [\"current month\"..] then coalesce('Amount', 'Amount_prediction') else 'Amount' end) as 'Amount', 'Amount_prediction_low_95', 'Amount_prediction_high_95';\n result_ts_result = cogroup result_ts by 'StartDate_Year~~~StartDate_Month' left, result by 'StartDate_Year~~~StartDate_Month';result_ts_result = foreach result_ts_result generate result_ts.'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first(result_ts.'StartDate_Year') as 'StartDate_Year', first(result_ts.'StartDate_Month') as 'StartDate_Month', first(result_ts.'StartDate_Day') as 'StartDate_Day', (case when toString(now(),\"yyyy\")+\"~~~\"+toString(now(),\"MM\") == result_ts.'StartDate_Year~~~StartDate_Month' then (case when \"{{cell(Project_Toggle_1.selection,0,\"value\").asObject()}}\" == \"On\" && sum(result_ts.'Amount')>sum(result.'Amount') then sum(result_ts.'Amount') else sum(result.'Amount') end) else sum(result_ts.'Amount') end) as 'Amount', sum(result_ts.'Amount_prediction_low_95') as 'Amount_prediction_low_95', sum(result_ts.'Amount_prediction_high_95') as 'Amount_prediction_high_95';result_ts = filter result_ts_result by {{row(Time_Toggle_1.selection, [0], [\"date_min_timeseries\",\"date_max_timeseries\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n result_ts = group result_ts by 'StartDate_Year~~~StartDate_Month';\n result_ts_actuals = foreach result_ts generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum('Amount_prediction_low_95') as 'Amount_prediction_low_95', sum('Amount_prediction_high_95') as 'Amount_prediction_high_95', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', (sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc)  -  sum('Amount')  +  sum('Amount_prediction_low_95')) as 'cumm_Amount_low_95', (sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc)  -  sum('Amount')  +  sum('Amount_prediction_high_95')) as 'cumm_Amount_high_95';\n --result_ts = foreach result_ts generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', {{row(Project_Toggle_1.selection,[0],[\"projection_final\"]).asObject()}};\n --result_ts_actuals = order result_ts by 'StartDate_Year~~~StartDate_Month' asc;\n                                                                                                  \n\n\n\n\n\n all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n all_slaps = filter all_slaps by 'isValidProductSchedule' == \"true\";\n valid_slaps = filter all_slaps by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"startdate_filter\").asObject()}};\nvalid_slaps = filter valid_slaps by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"enddate_filter\").asObject()}};\nvalid_slaps = foreach valid_slaps generate {{cell(Time_Toggle_1.selection, 0, \"start_end_epoch\").asObject()}}, 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nStart = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Amount'                , 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyAmount' \n    else 0 end as 'Amount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nDataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount';\nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Amount' end as 'Amount';\nresult = group FilledData by ('Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount';\n result = foreach result generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount';\nresult_cy = filter result by {{row(Time_Toggle_1.selection, [0], [\"date_min\",\"date_max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\nresult_cy = group result_cy by 'StartDate_Year~~~StartDate_Month';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'cumm_Amount' as 'cumm_Planned_Revenue';\nresult_cy_planned = order result_cy by 'StartDate_Year~~~StartDate_Month' asc;\n final = group result_ts_actuals by ('StartDate_Year~~~StartDate_Month') full, result_cy_planned by ('StartDate_Year~~~StartDate_Month');\n  final = foreach final generate coalesce(result_ts_actuals.'StartDate_Year~~~StartDate_Month', result_cy_planned.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', first(result_ts_actuals.'StartDate_Year') as 'StartDate_Year', first(result_ts_actuals.'StartDate_Month') as 'StartDate_Month', sum(result_cy_planned.'cumm_Planned_Revenue') as 'cumm_Planned_Revenue', sum(result_ts_actuals.'Amount') as 'Amount', sum(result_ts_actuals.'cumm_Amount') as 'cumm_Amount', sum(result_ts_actuals.'cumm_Amount_low_95') as 'cumm_Amount_low_95', sum(result_ts_actuals.'cumm_Amount_high_95') as 'cumm_Amount_high_95';\n final = foreach final generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'cumm_Planned_Revenue' as 'cumm_Planned_Revenue', {{row(Project_Toggle_1.selection,[0],[\"projection_final\"]).asObject()}};\n",
        "receiveFacet" : true,
        "selectMode" : "none",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [
                {
                  "color" : "rgb(0, 161, 224)",
                  "time" : "{{cell(TODAY_reference_line_1.result, 0, \"Current_Year~~~Current_Month\").asObject()}}",
                  "label" : "TODAY"
                }
              ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Agreement_Status_Selector" : {
        "broadcastFacet" : false,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.SalesAgreement.Status"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "multi",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "unique_prod_families_1" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "label" : "unique_prod_families",
        "query" : {
          "query" : {
            "measures" : [
              [
                "unique",
                "SalesAgreementProduct.Product.Family"
              ]
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "single",
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "trellis" : [ ],
              "dimensionAxis" : [ ],
              "plots" : [
                "unique_SalesAgreementProduct.Product.Family"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Revenue_Leak_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Leak",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal';\n  result = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{cell(Time_Toggle_1.selection, 0, \"planned_cal\").asObject()}} as 'Planned_Amount', \n{{cell(Time_Toggle_1.selection, 0, \"actuals_cal\").asObject()}} as 'Actual_Amount';\nresult = foreach result generate 'Id' as 'Id', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'Planned_Amount', 'Actual_Amount';\nresult = group result by all;\nresult = foreach result generate coalesce(sum('Actual_Amount'),0) - coalesce(sum('Planned_Amount'),0) as 'Revenue_Leak';\nresult = order result by ('Revenue_Leak' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Planned_Amount_MoM_C_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Planned_Amount_MoM_CY",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n all_slaps = filter all_slaps by 'isValidProductSchedule' == \"true\";\n valid_slaps = filter all_slaps by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"startdate_filter\").asObject()}};\nvalid_slaps = filter valid_slaps by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"enddate_filter\").asObject()}};\nvalid_slaps = foreach valid_slaps generate {{cell(Time_Toggle_1.selection, 0, \"start_end_epoch\").asObject()}}, 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nStart = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Amount'                , 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyAmount' \n    else 0 end as 'Amount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nDataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount';\nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Amount' end as 'Amount';\nresult = group FilledData by ('Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount';\n result = foreach result generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount';\nresult_cy = filter result by {{row(Time_Toggle_1.selection, [0], [\"date_min\",\"date_max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\nresult_cy = group result_cy by 'StartDate_Year~~~StartDate_Month';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount';\nresult_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Planned_Revenue', 'cumm_Amount' as 'cumm_Planned_Revenue';\nresult_cy = order result_cy by 'StartDate_Year~~~StartDate_Month' asc;",
        "receiveFacet" : true,
        "selectMode" : "none",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "timeAxis" : [
                "StartDate_Year~~~StartDate_Month"
              ],
              "trellis" : [ ],
              "plots" : [
                "Amount",
                "cumm_Amount"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Forecasted_Revenue_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Planned_Revenue",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nresult = foreach q generate 'Id' as 'Id','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{cell(Time_Toggle_1.selection, 0, \"forecasted_cal\").asObject()}} as 'Forecasted_Amount'\n, 'ForecastedAmountFinal' as 'A', 'ForecastedDailyAmount' as 'B', daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) as 'days', daysBetween(year_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\") ) as 'days_to_end';\nresult = foreach result generate 'Id' as 'Id', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'A', 'B', 'days', 'days_to_end', 'Forecasted_Amount', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate';\nresult = group result by all;\nresult = foreach result generate sum('Forecasted_Amount') as 'Forecasted_Amount';\nresult = order result by ('Forecasted_Amount' asc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "SalesAgreementProduc_6" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.Product.Family"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "multi",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "SalesAgreementProduc_7" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.SalesAgreement.Account.Parent.Name"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "multi",
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "SalesAgreementProduc_4" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.SalesAgreement.Account.Name"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "singlerequired",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "SalesAgreementProduc_5" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.Name"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "multi",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      }
    },
    "widgetStyle" : {
      "backgroundColor" : "rgba(255, 255, 255, 0)",
      "borderColor" : "#E6ECF2",
      "borderEdges" : [ ],
      "borderRadius" : 0,
      "borderWidth" : 1
    },
    "widgets" : {
      "text_18" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "Choose KPI:",
          "textAlignment" : "center",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_17" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "There {{cell(Selected_Acc_Info_1.result, 0, \"Upcoming_Renewal_Agreements_phrase\").asObject()}} within 60 days, valued at $ {{cell(Selected_Acc_Info_1.result, 0, \"Upcoming_Renewal\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "link_14" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Sales Agreements Insights'].Name}",
            "namespace" : "${Org.Namespace}",
            "pageName" : "958150b7-123d-48ff-a984-7525ca18d609"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "CLICK HERE FOR DETAILS",
          "textAlignment" : "left",
          "textColor" : "rgb(29, 118, 226)"
        },
        "type" : "link"
      },
      "text_19" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "Group by:",
          "textAlignment" : "center",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "container_13" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "link_15" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Sales Agreements Insights'].Name}",
            "namespace" : "${Org.Namespace}",
            "pageName" : "958150b7-123d-48ff-a984-7525ca18d609"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "CLICK HERE FOR DETAILS",
          "textAlignment" : "left",
          "textColor" : "rgb(29, 118, 226)"
        },
        "type" : "link"
      },
      "text_14" : {
        "parameters" : {
          "fontSize" : 10,
          "showActionMenu" : false,
          "text" : "VS LAST PERIOD",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "link_12" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Sales Agreements Insights'].Name}",
            "namespace" : "${Org.Namespace}",
            "pageName" : "958150b7-123d-48ff-a984-7525ca18d609"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "CLICK HERE FOR DETAILS",
          "textAlignment" : "left",
          "textColor" : "rgb(29, 118, 226)"
        },
        "type" : "link"
      },
      "text_13" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}}'s contribution to the total revenue generated through your accounts this year is {{cell(Selected_Acc_Info_1.result, 0, \"CY_Contribution\").asObject()}}%",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "link_13" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Sales Agreements Insights'].Name}",
            "namespace" : "${Org.Namespace}",
            "pageName" : "958150b7-123d-48ff-a984-7525ca18d609"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "CLICK HERE FOR DETAILS",
          "textAlignment" : "left",
          "textColor" : "rgb(29, 118, 226)"
        },
        "type" : "link"
      },
      "link_10" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "7fe60b54-a3db-4220-9b2f-fac2cbfc1167"
          },
          "destinationType" : "page",
          "fontSize" : 18,
          "includeState" : false,
          "text" : "Actual vs Planned Difference",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "link"
      },
      "text_16" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "There {{cell(Selected_Acc_Info_1.result, 0, \"Pending_Approvals_Agreements_phrase\").asObject()}} starting this quarter, valued at $ {{cell(Selected_Acc_Info_1.result, 0, \"Pending_Approvals\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "link_11" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Sales Agreements Insights'].Name}",
            "namespace" : "${Org.Namespace}",
            "pageName" : "958150b7-123d-48ff-a984-7525ca18d609"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "CLICK HERE FOR DETAILS",
          "textAlignment" : "left",
          "textColor" : "rgb(29, 118, 226)"
        },
        "type" : "link"
      },
      "text_15" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}} has been your customer for {{cell(Selected_Acc_Info_1.result, 0, \"Relationship_Duration_phrase\").asObject()}} with a Customer Lifetime Value of $ {{cell(Selected_Acc_Info_1.result, 0, \"Lifetime_Value\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "text_10" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_12" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : false,
          "text" : "How has the account revenue variance trended over time?",
          "textAlignment" : "left",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "text_11" : {
        "parameters" : {
          "fontSize" : 10,
          "showActionMenu" : false,
          "text" : "VS LAST PERIOD",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "text_3" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}}'s contribution to the total revenue generated through your accounts this year is {{cell(Selected_Acc_Info_1.result, 0, \"CY_Contribution\").asObject()}}%",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "text_2" : {
        "parameters" : {
          "fontSize" : 18,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}} Highlights",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "chart_5" : {
        "parameters" : {
          "showValues" : true,
          "stack" : false,
          "showPoints" : true,
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : true,
            "customSize" : "auto",
            "position" : "bottom-center",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "customText" : "Date:  [StartDate_Year~~~StartDate_Month]",
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "missingValue" : "connect",
          "visualizationType" : "time-combo",
          "showValuesOnLine" : false,
          "timeAxis" : {
            "showTitle" : false,
            "showAxis" : true,
            "referenceLines" : [
              {
                "color" : "rgb(0, 161, 224)",
                "time" : "{{cell(TODAY_reference_line_1.result, 0, \"Current_Year~~~Current_Month\").asObject()}}",
                "label" : "TODAY"
              }
            ],
            "title" : ""
          },
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "columnMap" : {
            "timeAxis" : [
              "StartDate_Year~~~StartDate_Month"
            ],
            "trellis" : [ ],
            "plots" : [
              "Planned_Revenue",
              "cumm_Planned_Revenue"
            ]
          },
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : true,
            "title" : "Amount",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "Planned_Amount_MoM_C_1",
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_5" : {
        "parameters" : {
          "fontSize" : 10,
          "showActionMenu" : false,
          "text" : "VS LAST PERIOD",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "text_4" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : false,
          "text" : "NOTE - All metrics are appropriated for selected time frame",
          "textAlignment" : "left",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_7" : {
        "parameters" : {
          "fontSize" : 10,
          "showActionMenu" : false,
          "text" : "VS LAST PERIOD",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "chart_2" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : true,
            "customSize" : "auto",
            "position" : "bottom-center",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "customText" : "Date:  [StartDate_Year~~~StartDate_Month]",
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "time-bar",
          "timeAxis" : {
            "showTitle" : false,
            "showAxis" : true,
            "referenceLines" : [
              {
                "color" : "rgb(0, 161, 224)",
                "time" : "{{cell(TODAY_reference_line_1.result, 0, \"Current_Year~~~Current_Month\").asObject()}}",
                "label" : "TODAY"
              }
            ],
            "title" : ""
          },
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "binValues" : false,
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : true,
            "title" : "Amount",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "Revenue_Realisation__1",
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "chart_1" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "stack" : false,
          "showPoints" : true,
          "legend" : {
            "descOrder" : false,
            "showHeader" : false,
            "show" : true,
            "customSize" : "auto",
            "position" : "bottom-center",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "customText" : "Date:  [StartDate_Year~~~StartDate_Month]",
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "missingValue" : "connect",
          "visualizationType" : "time-combo",
          "showValuesOnLine" : false,
          "timeAxis" : {
            "showTitle" : false,
            "showAxis" : true,
            "referenceLines" : [
              {
                "color" : "rgb(0, 161, 224)",
                "time" : "{{cell(TODAY_reference_line_1.result, 0, \"Current_Year~~~Current_Month\").asObject()}}",
                "label" : "TODAY"
              }
            ],
            "title" : "Time (Year>Month)"
          },
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "left",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "plots" : {
            "cumm_Amount" : {
              "mark" : "line"
            },
            "cumm_Amount_low_95" : {
              "mark" : "line"
            },
            "Actual_Revenue" : {
              "mark" : "bar"
            },
            "Amount" : {
              "mark" : "bar"
            },
            "cumm_Planned_Revenue" : {
              "mark" : "line"
            },
            "cumm_Amount_high_95" : {
              "mark" : "line"
            }
          },
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : true,
            "referenceLines" : [ ],
            "title" : "Amount",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "Account_Actual_Reven_1",
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_6" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : false,
          "text" : "How has the account revenue grown over time?",
          "textAlignment" : "left",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "text_9" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : false,
          "text" : "How is the account performing against its commitments?",
          "textAlignment" : "left",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "chart_4" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : true,
            "customSize" : "auto",
            "position" : "bottom-center",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "customText" : "Date:  [StartDate_Year~~~StartDate_Month]",
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "time-bar",
          "timeAxis" : {
            "showTitle" : false,
            "showAxis" : true,
            "referenceLines" : [
              {
                "color" : "rgb(0, 161, 224)",
                "label" : "TODAY",
                "time" : "{{cell(TODAY_reference_line_1.result, 0, \"Current_Year~~~Current_Month\").asObject()}}"
              }
            ],
            "title" : ""
          },
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "binValues" : false,
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : true,
            "title" : "Amount",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "Revenue_Realisation_Trend",
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_8" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : false,
          "text" : "REVENUE PROJECTION",
          "textAlignment" : "right",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_1" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Account Insights",
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "number_5" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "Revenue_Realisation",
          "numberColor" : "#FFFFFF",
          "numberSize" : 18,
          "showActionMenu" : true,
          "step" : "Revenue_Realization_1",
          "textAlignment" : "right",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_4" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "Revenue_Realisation_change",
          "numberColor" : "#FFFFFF",
          "numberSize" : 16,
          "showActionMenu" : true,
          "step" : "Change_Percentage_3",
          "textAlignment" : "center",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_3" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "Planned_Amount",
          "numberColor" : "#FFFFFF",
          "numberSize" : 18,
          "showActionMenu" : true,
          "step" : "Planned_Revenue_1",
          "textAlignment" : "right",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_2" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "change_percentage",
          "numberColor" : "#FFFFFF",
          "numberSize" : 16,
          "showActionMenu" : true,
          "step" : "Change_Percentage_1",
          "textAlignment" : "center",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_1" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "Actual_Amount",
          "numberColor" : "#FFFFFF",
          "numberSize" : 18,
          "showActionMenu" : true,
          "step" : "Actual_Revenue_1",
          "textAlignment" : "right",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "container_12" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "number_7" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "Revenue_Leak",
          "numberColor" : "#FFFFFF",
          "numberSize" : 18,
          "showActionMenu" : true,
          "step" : "Revenue_Leak_1",
          "textAlignment" : "right",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_6" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "Revenue_Leak_change",
          "numberColor" : "#FFFFFF",
          "numberSize" : 16,
          "showActionMenu" : true,
          "step" : "Change_Percentage_4",
          "textAlignment" : "center",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "link_3" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Account Insights - Order Status'].Name}",
            "namespace" : "${Org.Namespace}"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "ORDER STATUS",
          "textAlignment" : "center",
          "textColor" : "rgb(84, 105, 141)"
        },
        "type" : "link"
      },
      "link_4" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Sales Agreements Insights'].Name}",
            "namespace" : "${Org.Namespace}",
            "pageName" : "958150b7-123d-48ff-a984-7525ca18d609"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "CLICK HERE FOR DETAILS",
          "textAlignment" : "left",
          "textColor" : "rgb(29, 118, 226)"
        },
        "type" : "link"
      },
      "link_1" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "96fb1d7e-ae0d-4b51-bd1b-46fee7880e63"
          },
          "destinationType" : "page",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "AGREEMENTS PERFORMANCE",
          "textAlignment" : "center",
          "textColor" : "#0070D2"
        },
        "type" : "link"
      },
      "link_2" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Account Insights - Product Sales & Pricing'].Name}",
            "namespace" : "${Org.Namespace}"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "PRODUCT SALES & PRICING",
          "textAlignment" : "center",
          "textColor" : "rgb(84, 105, 141)"
        },
        "type" : "link"
      },
      "link_9" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "a15321b5-62da-4115-af22-0727568412ca"
          },
          "destinationType" : "page",
          "fontSize" : 18,
          "includeState" : false,
          "text" : "Revenue Realization",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "link"
      },
      "table_4" : {
        "parameters" : {
          "borderColor" : "#e0e5ee",
          "borderWidth" : 1,
          "cell" : {
            "backgroundColor" : "#ffffff",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "columnProperties" : { },
          "columns" : [ ],
          "customBulkActions" : [ ],
          "exploreLink" : true,
          "header" : {
            "backgroundColor" : "#f4f6f9",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "innerMajorBorderColor" : "#a8b7c7",
          "innerMinorBorderColor" : "#e0e5ee",
          "mode" : "fittocontainer",
          "numberOfLines" : 1,
          "pivoted" : false,
          "showActionMenu" : true,
          "showRowIndexColumn" : false,
          "step" : "Details_Table_2",
          "totals" : true,
          "verticalPadding" : 8
        },
        "type" : "table"
      },
      "link_7" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "ef09faa9-66ac-4d25-85d4-1f2a917b4dbf"
          },
          "destinationType" : "page",
          "fontSize" : 18,
          "includeState" : false,
          "text" : "Planned Revenue",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "link"
      },
      "pillbox_2" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 12,
          "selectedTab" : {
            "backgroundColor" : "#335779",
            "borderColor" : "rgb(51, 87, 121)",
            "borderEdges" : [
              "all"
            ],
            "borderWidth" : 0,
            "textColor" : "#C6D3E1"
          },
          "showActionMenu" : false,
          "step" : "Project_Toggle_1",
          "textColor" : "#C6D3E1"
        },
        "type" : "pillbox"
      },
      "link_8" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "96fb1d7e-ae0d-4b51-bd1b-46fee7880e63"
          },
          "destinationType" : "page",
          "fontSize" : 18,
          "includeState" : false,
          "text" : "Actual Revenue",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "link"
      },
      "link_5" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Sales Agreements Insights'].Name}",
            "namespace" : "${Org.Namespace}",
            "pageName" : "958150b7-123d-48ff-a984-7525ca18d609"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "CLICK HERE FOR DETAILS",
          "textAlignment" : "left",
          "textColor" : "rgb(29, 118, 226)"
        },
        "type" : "link"
      },
      "link_6" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Sales Agreements Insights'].Name}",
            "namespace" : "${Org.Namespace}",
            "pageName" : "958150b7-123d-48ff-a984-7525ca18d609"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "CLICK HERE FOR DETAILS",
          "textAlignment" : "left",
          "textColor" : "rgb(29, 118, 226)"
        },
        "type" : "link"
      },
      "number_12" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "Revenue_Difference",
          "numberColor" : "#FFFFFF",
          "numberSize" : 18,
          "showActionMenu" : true,
          "step" : "Revenue_Difference_1",
          "textAlignment" : "right",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_11" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "change_percentage",
          "numberColor" : "#FFFFFF",
          "numberSize" : 16,
          "showActionMenu" : true,
          "step" : "Change_Percentage_2",
          "textAlignment" : "center",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "text_50" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "There {{cell(Selected_Acc_Info_1.result, 0, \"Upcoming_Renewal_Agreements_phrase\").asObject()}} within 60 days, valued at $ {{cell(Selected_Acc_Info_1.result, 0, \"Upcoming_Renewal\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "text_52" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "There {{cell(Selected_Acc_Info_1.result, 0, \"Pending_Approvals_Agreements_phrase\").asObject()}} starting this quarter, valued at $ {{cell(Selected_Acc_Info_1.result, 0, \"Pending_Approvals\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "container_1" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_51" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "container_3" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_5" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_6" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_7" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_8" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_47" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_46" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}}'s contribution to the total revenue generated through your accounts this year is {{cell(Selected_Acc_Info_1.result, 0, \"CY_Contribution\").asObject()}}%",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "text_49" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_48" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}} has been your customer for {{cell(Selected_Acc_Info_1.result, 0, \"Relationship_Duration_phrase\").asObject()}} with a Customer Lifetime Value of $ {{cell(Selected_Acc_Info_1.result, 0, \"Lifetime_Value\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "text_43" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "There {{cell(Selected_Acc_Info_1.result, 0, \"Pending_Approvals_Agreements_phrase\").asObject()}} starting this quarter, valued at $ {{cell(Selected_Acc_Info_1.result, 0, \"Pending_Approvals\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "text_42" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_45" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_44" : {
        "parameters" : {
          "fontSize" : 18,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}} Highlights",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_41" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_40" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "There {{cell(Selected_Acc_Info_1.result, 0, \"Upcoming_Renewal_Agreements_phrase\").asObject()}} within 60 days, valued at $ {{cell(Selected_Acc_Info_1.result, 0, \"Upcoming_Renewal\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "image_2" : {
        "parameters" : {
          "alignmentX" : "center",
          "alignmentY" : "center",
          "fit" : "fitwidth",
          "image" : {
            "name" : "${App.Images['manufacturing_app_iconpng11'].Name}",
            "namespace" : "${Org.Namespace}"
          }
        },
        "type" : "image"
      },
      "text_39" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}} has been your customer for {{cell(Selected_Acc_Info_1.result, 0, \"Relationship_Duration_phrase\").asObject()}} with a Customer Lifetime Value of $ {{cell(Selected_Acc_Info_1.result, 0, \"Lifetime_Value\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "text_36" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_35" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_38" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_37" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}}'s contribution to the total revenue generated through your accounts this year is {{cell(Selected_Acc_Info_1.result, 0, \"CY_Contribution\").asObject()}}%",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "text_32" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_31" : {
        "parameters" : {
          "fontSize" : 18,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}} Highlights",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_34" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_33" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_30" : {
        "parameters" : {
          "fontSize" : 18,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}} Highlights",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "listselector_7" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_7",
          "title" : "Parent Account Name"
        },
        "type" : "listselector"
      },
      "listselector_6" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "combo",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#091A3E",
            "valueColor" : "#091A3E"
          },
          "instant" : false,
          "measureField" : "count",
          "showActionMenu" : false,
          "step" : "Agreement_Status_Selector",
          "title" : ""
        },
        "type" : "listselector"
      },
      "listselector_8" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "showActionMenu" : false,
          "step" : "Time_Toggle_1",
          "title" : "Time Period"
        },
        "type" : "listselector"
      },
      "listselector_3" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_4",
          "title" : "Account Name"
        },
        "type" : "listselector"
      },
      "text_29" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "listselector_2" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_3",
          "title" : "Account Type"
        },
        "type" : "listselector"
      },
      "text_28" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "There {{cell(Selected_Acc_Info_1.result, 0, \"Pending_Approvals_Agreements_phrase\").asObject()}} starting this quarter, valued at $ {{cell(Selected_Acc_Info_1.result, 0, \"Pending_Approvals\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "listselector_5" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_6",
          "title" : "Product Family"
        },
        "type" : "listselector"
      },
      "listselector_4" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_5",
          "title" : "Product Name"
        },
        "type" : "listselector"
      },
      "text_25" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "{{cell(Selected_Acc_Info_1.result, 0, \"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}} has been your customer for {{cell(Selected_Acc_Info_1.result, 0, \"Relationship_Duration_phrase\").asObject()}} with a Customer Lifetime Value of $ {{cell(Selected_Acc_Info_1.result, 0, \"Lifetime_Value\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "text_24" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_27" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "There {{cell(Selected_Acc_Info_1.result, 0, \"Upcoming_Renewal_Agreements_phrase\").asObject()}} within 60 days, valued at $ {{cell(Selected_Acc_Info_1.result, 0, \"Upcoming_Renewal\").asObject()}}M",
          "textAlignment" : "left",
          "textColor" : "rgb(150, 181, 211)"
        },
        "type" : "text"
      },
      "text_26" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "◼︎",
          "textAlignment" : "left",
          "textColor" : "rgb(3, 179, 179)"
        },
        "type" : "text"
      },
      "text_21" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Details Table",
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "text_20" : {
        "parameters" : {
          "fontSize" : 32,
          "showActionMenu" : false,
          "text" : "|",
          "textAlignment" : "right",
          "textColor" : "rgb(4, 29, 64)"
        },
        "type" : "text"
      },
      "text_23" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : false,
          "text" : "How has the account planned revenue trended over time?",
          "textAlignment" : "left",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "text_22" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : false,
          "text" : "Sales Agreement Status",
          "textAlignment" : "right",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "listselector_1" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_2",
          "title" : "Owner Name"
        },
        "type" : "listselector"
      }
    }
  }
}