{
  "name" : "Accounts_Health_tp",
  "label" : "Accounts Health",
  "folder" : {
    "id" : "${App.Folder.Id}"
  },
  "dateVersion" : 1,
  "mobileDisabled" : false,
  "xmd" : {
    "measures" : [
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Outstanding Amount",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#006714",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#B50E03",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "field" : "SalesAgreementProduc_4.Outstanding Amount",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Realization",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "linear-gradient(to bottom, #F71979, #CC203D)",
                  "bin" : "*"
                },
                {
                  "formatValue" : "linear-gradient(to bottom, #FED444, #F29946)",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "field" : "RevenueRealization_1.Realization",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Actual Vs Planned Revenue(%)",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#B50E03",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#006714",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "field" : "Clone_of_SalesAgreem_1.Actual Vs Planned Revenue(%)",
        "format" : { }
      },
      {
        "conditionalFormatting" : { },
        "field" : "Clone_of_SalesAgreem_1.Actual Vs Planned Revenue%",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Realization",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#B50E03",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#006714",
                  "bin" : "1"
                }
              ]
            }
          }
        },
        "field" : "SalesAgreementProduc_3.Realization",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "color" : {
            "referenceField" : "C",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#B50E03",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#00B531",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "field" : "all_1.C",
        "format" : { }
      }
    ],
    "derivedDimensions" : [ ],
    "organizations" : [ ],
    "showDetailsDefaultFields" : [ ],
    "dates" : [ ],
    "derivedMeasures" : [ ],
    "dimensions" : [
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Outstanding Amount",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#006714",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#B50E03",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "salesforceActions" : [ ],
        "field" : "SalesAgreementProduc_4.ALL",
        "members" : [ ],
        "customActions" : [ ]
      },
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Realization",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "linear-gradient(to bottom, #F71979, #CC203D)",
                  "bin" : "*"
                },
                {
                  "formatValue" : "linear-gradient(to bottom, #FED444, #F29946)",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "salesforceActions" : [ ],
        "field" : "RevenueRealization_1.ALL",
        "members" : [ ],
        "customActions" : [ ]
      },
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Actual Vs Planned Revenue(%)",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#B50E03",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#006714",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "salesforceActions" : [ ],
        "field" : "Clone_of_SalesAgreem_1.ALL",
        "members" : [ ],
        "customActions" : [ ]
      },
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Realization",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#B50E03",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#006714",
                  "bin" : "1"
                }
              ]
            }
          }
        },
        "salesforceActions" : [ ],
        "field" : "SalesAgreementProduc_3.ALL",
        "members" : [ ],
        "customActions" : [ ]
      }
    ]
  },
  "state" : {
    "dataSourceLinks" : [ ],
    "filters" : [
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.SalesAgreement.Account.Owner.Name"
        ],
        "label" : "Account Owner",
        "locked" : false,
        "operator" : "in"
      },
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.SalesAgreement.Account.Type"
        ],
        "label" : "Account Type",
        "locked" : false,
        "operator" : "in"
      },
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.SalesAgreement.Account.Name"
        ],
        "label" : "Account",
        "locked" : false,
        "operator" : "in"
      },
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.SalesAgreement.Account.Parent.Name"
        ],
        "label" : "Parent Account",
        "locked" : false,
        "operator" : "in"
      },
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.SalesAgreement.Account.Industry"
        ],
        "label" : "Industry",
        "locked" : false,
        "operator" : "in"
      },
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.SalesAgreement.Account.BillingCountry"
        ],
        "locked" : false,
        "operator" : "in"
      }
    ],
    "gridLayouts" : [
      {
        "maxWidth" : 1500,
        "name" : "Default",
        "numColumns" : 50,
        "pages" : [
          {
            "label" : "OVERVIEW",
            "name" : "32e04838-d3ff-4554-b350-dbf372b7b843",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_1",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(228, 234, 239)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 49,
                "column" : 1,
                "name" : "filterpanel_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "right"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_3",
                "row" : 13,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 7,
                "column" : 8,
                "name" : "text_7",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 7,
                "column" : 1,
                "name" : "text_8",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "text_9",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 8,
                "name" : "number_5",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "number_6",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 15,
                "name" : "number_7",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 4,
                "column" : 2,
                "name" : "text_11",
                "row" : 27,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 10,
                "column" : 6,
                "name" : "pillbox_2",
                "row" : 27,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 15,
                "column" : 2,
                "name" : "chart_5",
                "row" : 30,
                "rowspan" : 34,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 30,
                "column" : 18,
                "name" : "chart_6",
                "row" : 30,
                "rowspan" : 34,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_10",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 9,
                "column" : 3,
                "name" : "text_10",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#FFFFFF",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 9,
                "column" : 21,
                "name" : "link_4",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 12,
                "name" : "link_8",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "rgb(0, 112, 210)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 30,
                "name" : "link_12",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 25,
                "name" : "chart_3",
                "row" : 14,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 10,
                "column" : 39,
                "name" : "dateselector_1",
                "row" : 15,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0.4)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 15,
                "column" : 2,
                "name" : "text_35",
                "row" : 23,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_4",
                "row" : 75,
                "rowspan" : 32,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "container_11",
                "row" : 22,
                "rowspan" : 44,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 16,
                "column" : 18,
                "name" : "text_13",
                "row" : 23,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 68,
                "rowspan" : 41,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 1,
                "name" : "text_34",
                "row" : 69,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 15,
                "column" : 1,
                "name" : "text_36",
                "row" : 72,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              }
            ]
          },
          {
            "label" : "ACCOUNTS IN FOCUS1",
            "name" : "63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_1",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(228, 234, 239)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 49,
                "column" : 1,
                "name" : "filterpanel_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "right"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 21,
                "column" : 2,
                "name" : "text_1",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 17,
                "column" : 2,
                "name" : "text_2",
                "row" : 20,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 10,
                "column" : 19,
                "name" : "pillbox_1",
                "row" : 20,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "text_4",
                "row" : 28,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "number_1",
                "row" : 30,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "text_5",
                "row" : 38,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "number_3",
                "row" : 40,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "text_6",
                "row" : 48,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "number_4",
                "row" : 50,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 18,
                "column" : 2,
                "name" : "link_1",
                "row" : 61,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_10",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 9,
                "column" : 12,
                "name" : "link_5",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 21,
                "name" : "link_6",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "rgb(0, 112, 210)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 30,
                "name" : "link_13",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_3",
                "row" : 75,
                "rowspan" : 32,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 38,
                "column" : 10,
                "name" : "chart_4",
                "row" : 38,
                "rowspan" : 21,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 38,
                "column" : 10,
                "name" : "chart_9",
                "row" : 25,
                "rowspan" : 13,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 3,
                "name" : "text_10",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#FFFFFF",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "container_11",
                "row" : 15,
                "rowspan" : 45,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 68,
                "rowspan" : 41,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 1,
                "name" : "text_34",
                "row" : 69,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 15,
                "column" : 1,
                "name" : "text_36",
                "row" : 72,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "container_14",
                "row" : 60,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              }
            ]
          },
          {
            "label" : "ACCOUNTS IN FOCUS2",
            "name" : "125726a0-29bd-48b9-af08-393c33e20ede",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_1",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(228, 234, 239)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 49,
                "column" : 1,
                "name" : "filterpanel_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "right"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 12,
                "column" : 2,
                "name" : "text_15",
                "row" : 26,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "rgba(255, 255, 255, 0)",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "text_16",
                "row" : 53,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "number_2",
                "row" : 55,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "text_17",
                "row" : 35,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "number_8",
                "row" : 37,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "text_18",
                "row" : 44,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 2,
                "name" : "number_9",
                "row" : 46,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 33,
                "name" : "text_20",
                "row" : 26,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(17, 48, 91, 0)",
                  "borderColor" : "rgba(230, 236, 242, 0)",
                  "borderEdges" : [
                    "right"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 4,
                "column" : 44,
                "name" : "pillbox_4",
                "row" : 26,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 14,
                "name" : "pillbox_5",
                "row" : 26,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 24,
                "column" : 2,
                "name" : "link_2",
                "row" : 16,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 38,
                "column" : 10,
                "name" : "chart_7",
                "row" : 31,
                "rowspan" : 33,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_10",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 9,
                "column" : 12,
                "name" : "link_5",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 21,
                "name" : "link_6",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "rgb(0, 112, 210)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 30,
                "name" : "link_14",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_1",
                "row" : 75,
                "rowspan" : 32,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 3,
                "name" : "text_10",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#FFFFFF",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 68,
                "rowspan" : 41,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 1,
                "name" : "text_34",
                "row" : 69,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 15,
                "column" : 1,
                "name" : "text_36",
                "row" : 72,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "container_14",
                "row" : 21,
                "rowspan" : 45,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 24,
                "column" : 2,
                "name" : "link_1",
                "row" : 22,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "container_11",
                "row" : 15,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              }
            ]
          },
          {
            "label" : "RELATIONSHIP WITH MY ACCOUNTS",
            "name" : "affd9fef-3319-4206-840e-62d065d7b8c8",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_1",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(228, 234, 239)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 49,
                "column" : 1,
                "name" : "filterpanel_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "right"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_4",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 9,
                "column" : 21,
                "name" : "link_9",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 12,
                "name" : "link_10",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_2",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 30,
                "name" : "link_11",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "rgb(0, 112, 210)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 17,
                "column" : 2,
                "name" : "chart_2",
                "row" : 28,
                "rowspan" : 36,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 15,
                "column" : 2,
                "name" : "text_26",
                "row" : 23,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 17,
                "column" : 19,
                "name" : "text_27",
                "row" : 23,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 12,
                "column" : 36,
                "name" : "pillbox_3",
                "row" : 24,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_9",
                "row" : 13,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 5,
                "column" : 15,
                "name" : "number_13",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 10,
                "column" : 29,
                "name" : "number_14",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 7,
                "column" : 21,
                "name" : "number_15",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 15,
                "name" : "text_28",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 21,
                "name" : "text_29",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 12,
                "column" : 29,
                "name" : "text_30",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 1,
                "name" : "pillbox_8",
                "row" : 15,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 41,
                "name" : "text_31",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 20,
                "column" : 23,
                "name" : "text_33",
                "row" : 63,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 29,
                "column" : 19,
                "name" : "chart_8",
                "row" : 28,
                "rowspan" : 35,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 41,
                "name" : "number_17",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_2",
                "row" : 75,
                "rowspan" : 32,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 3,
                "name" : "text_10",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#FFFFFF",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 68,
                "rowspan" : 41,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 1,
                "name" : "text_34",
                "row" : 69,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 15,
                "column" : 1,
                "name" : "text_36",
                "row" : 72,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(18, 37, 76, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "container_11",
                "row" : 22,
                "rowspan" : 44,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              }
            ]
          }
        ],
        "rowHeight" : "fine",
        "selectors" : [ ],
        "style" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "backgroundColor" : "rgb(4, 29, 64)",
          "cellSpacingX" : 0,
          "cellSpacingY" : 0,
          "fit" : "original",
          "gutterColor" : "#C5D3E0"
        },
        "version" : 1.0
      }
    ],
    "layouts" : [ ],
    "steps" : {
      "RelationshipLength_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "RelationshipLength",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = filter q by {{column(ActiveAccounts_1.result, [\"AccountId\"]).asEquality('SalesAgreementProduct.SalesAgreement.AccountId')}};\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name',\n'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch' as 'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch',q.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch' as 'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch', case when  q.'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Activated\", \"Approved\"] then 'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch' end as 'PlannedEndDate';\n\nq = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name';\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name',\ntoDate(min(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch')) as 'MinDate', \ntoDate(max(q.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch')) as 'MaxDate', \ntoDate(max(PlannedEndDate)) as 'PlannedMaxDate';\n\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name',q.'MinDate'  as 'MinDate', q.'MaxDate' as 'MaxDate',daysBetween(q.'MinDate', now()) as '1.Length of relationship (To Date)',\ncase when q.'MinDate'<now() then round(daysBetween(q.'MinDate', case when q.'MaxDate'<now() then q.'MaxDate' else now() end)/365,2) else 0 end as 'Current_Years', \ndaysBetween(now(),q.'PlannedMaxDate') as '2.Future length of relationship (Agreed Upon)',\ncase when q.'PlannedMaxDate'>now() then round(daysBetween(now(),q.'PlannedMaxDate')/365,2) else 0 end as 'Planned_Years', \n\n(case when q.'MinDate'<now() then round(daysBetween(q.'MinDate', case when q.'MaxDate'<now() then q.'MaxDate' else now() end)/365,2) else 0 end)+(case when q.'PlannedMaxDate'>now() then round(daysBetween(now(),q.'PlannedMaxDate')/365,2) else 0 end) as 'Total_Years';\nStream1 = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', \"1.Length of relationship (To Date)\" as 'Current_Planned_Flag', q.'Current_Years' as 'Number of Years', q.'Total_Years' as 'Total_Years';\nStream2 = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', \"2.Future length of relationship (Agreed Upon)\" as 'Current_Planned_Flag', q.'Planned_Years' as 'Number of Years', q.'Total_Years' as 'Total_Years';\nStream3 = union Stream1, Stream2;\nresult = order Stream3 by ('Total_Years' desc);\nresult = limit result 2000;",
        "receiveFacet" : true,
        "selectMode" : "multi",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : false,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "multi",
            "totalSumMode" : "none",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "stackhbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "split" : [
                "Current_Planned_Flag"
              ],
              "trellis" : [ ],
              "dimensionAxis" : [
                "SalesAgreementProduct.SalesAgreement.Account.Name"
              ],
              "plots" : [
                "Number of Years"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Total Length of Relationship(Years)",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "normalize" : false,
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : false,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Account_Value_2" : {
        "broadcastFacet" : true,
        "groups" : [
          "SalesAgreementProduct.SalesAgreement.Account.Name"
        ],
        "label" : "Account_Value",
        "numbers" : [
          "PlannedAfterToday",
          "RelationshipLength",
          "Realization",
          "CLV",
          "Avg_Realization"
        ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = filter q by {{column(ActiveAccounts_1.result, [\"AccountId\"]).asEquality('SalesAgreementProduct.SalesAgreement.AccountId')}};\nq = foreach q generate 'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId',q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.AccountId' as 'AccountId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', q.'StartDate_sec_epoch' as 'StartDate_sec_epoch', q.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch' as 'EndDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount',\n    q.'DerivedActualAmount'/(daysBetween(toDate(q.'StartDate_sec_epoch'),case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1) as 'ActualDailyAmount',\n\n(case when toDate(q.'StartDate_sec_epoch') > now() then 0 else (daysBetween(toDate(q.'StartDate_sec_epoch'),\n   case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1)\n   end) as 'ActualDays_YTD', \nq.'PlannedDailyAmount' as 'PlannedDailyAmount',\n    case when toDate(q.'ActualEndDate_sec_epoch') >= now() then  daysBetween( case when toDate(q.'StartDate_sec_epoch') <= now() then now() else toDate(q.'StartDate_sec_epoch') end, \n    toDate(q.'ActualEndDate_sec_epoch'))+1 end as 'FutureDays';\n\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name','AccountId' as 'AccountId', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'EndDate_sec_epoch' as 'EndDate_sec_epoch', \n'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (q.'ActualDailyAmount'*q.'ActualDays_YTD') as  'RevenueTillToday', (q.'PlannedDailyAmount'*q.'ActualDays_YTD') as 'PlannedTillToday', (q.'PlannedDailyAmount'*q.'FutureDays') as 'PlannedAfterToday'; \n\nq = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name';\n\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', toDate(min('StartDate_sec_epoch')) as 'MinDate', toDate(max('EndDate_sec_epoch')) as 'MaxDate', sum(DerivedActualAmount) as 'Revenue', sum(PlannedAmountFinal) as 'PlannedAmount', sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday')) as 'PlannedAfterToday', sum('RevenueTillToday')+(sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday'))) as 'CLV', (sum('RevenueTillToday')+(sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday'))))/sum(PlannedAmountFinal) as 'Realization', \n    avg(((sum('RevenueTillToday')+(sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday'))))/sum(PlannedAmountFinal))) over ([..] partition by all) as 'Avg_Realization'; \n\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name','MinDate', 'MaxDate','PlannedAfterToday', {{row(CLV_1.selection,[0],[\"RelationshipLengthCalc\"]).asObject()}} as 'RelationshipLength', 'Realization', {{row(CLV_1.selection,[0],[\"value\"]).asObject()}} as 'CLV', 'Avg_Realization'*100 as 'Avg_Realization'; \n\nq = order q by 'SalesAgreementProduct.SalesAgreement.Account.Name' asc;\nq = limit q 2000;  ",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [
          "SalesAgreementProduct.SalesAgreement.Account.Name",
          "MinDate",
          "MaxDate"
        ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "legend" : {
              "descOrder" : false,
              "showHeader" : false,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "scatter",
            "title" : {
              "fontSize" : 10,
              "subtitleFontSize" : 10,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "radiusRatio" : 5,
            "columnMap" : {
              "r" : [
                "CLV"
              ],
              "x" : [
                "RelationshipLength"
              ],
              "y" : [
                "Realization"
              ],
              "trellis" : [ ],
              "plots" : [
                "AccountName"
              ]
            },
            "showActionMenu" : true,
            "x" : {
              "sqrtScale" : false,
              "showZero" : true,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "{{row(CLV_1.selection,[0],[\"RelationshipLengthLabel\"]).asObject()}}",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "y" : {
              "sqrtScale" : false,
              "showZero" : true,
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [
                {
                  "color" : "rgb(0, 161, 224)",
                  "label" : "Avg Realization",
                  "value" : "{{coalesce(cell(Account_Value_2.result,0,\"Avg_Realization\"),1).asObject()}}"
                }
              ],
              "title" : "Revenue Realization (To Date)",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "REVENUE_1" : {
        "broadcastFacet" : true,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "REVENUE",
        "selectMode" : "singlerequired",
        "type" : "staticflex",
        "values" : [
          {
            "display" : "REV REALIZATION",
            "value" : "Realization",
            "label" : "REV REALIZATION"
          },
          {
            "display" : "ACTUAL REVENUE",
            "value" : "Actual_Revenue",
            "label" : "ACTUAL REVENUE"
          }
        ]
      },
      "Time_Range_Selector_1" : {
        "broadcastFacet" : false,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "label" : "Time Range Selector",
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              [
                "StartDate_Year",
                "StartDate_Month",
                "StartDate_Day"
              ]
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : false,
        "selectMode" : "single",
        "start" : [
          [
            1546300800000,
            1577750400000
          ]
        ],
        "type" : "aggregateflex",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "trellis" : [ ],
              "dimensionAxis" : [
                "StartDate_Year~~~StartDate_Month~~~StartDate_Day"
              ],
              "plots" : [
                "count"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Clone_of_SalesAgreem_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Actual Vs Planned Revenue",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' in {{row(static_2.selection,[0],[\"value\"]).asObject()}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nresult = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name';\nresult = foreach result generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum(q.'DerivedActualAmount') as 'ActualRevenue', sum(q.'PlannedAmountFinal') as 'PlannedRevenue', sum(q.'DerivedActualAmount')-sum(q.'PlannedAmountFinal') as 'NetRevenue', ((sum(q.'DerivedActualAmount')-sum(q.'PlannedAmountFinal'))/sum(q.'PlannedAmountFinal')) as 'NetRevenuePercent';\nresult = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name', {{row(static_1.selection,[0],[\"value\",\"label\"]).asProjection()}};\nresult = order result by ('{{row(static_1.selection,[0],[\"label\"]).asObject()}}' desc);\nresult = limit result 2000;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : false,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : false,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : false,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "RevenueRealization_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "RevenueRealization",
        "numbers" : [
          "Revenue",
          "ValidPlannedAmount",
          "PlannedAmountTilldate",
          "Realization"
        ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Planned Amount') as 'Plan', (sum('Planned Amount')-sum('Actual Amount')) as 'Demand Shortfall'; result = group result by all; result = foreach result generate sum('Plan') as 'ValidPlannedAmount', sum('Actual') as 'Revenue', sum('Actual')/sum('Plan') as 'Realization';",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "max" : "{{coalesce(cell(RevenueRealization_1.result,0,\"ValidPlannedAmount\"),0).asObject()}}",
            "legend" : {
              "showHeader" : true,
              "show" : false,
              "position" : "right-top",
              "inside" : false
            },
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : [
                "Revenue"
              ],
              "showNullValues" : true,
              "showPercentage" : false,
              "customText" : "[Realization] of  [ValidPlannedAmount]",
              "showDimensions" : true,
              "showMeasures" : true,
              "dimensions" : "",
              "customizeTooltip" : true
            },
            "visualizationType" : "flatgauge",
            "medium" : 33,
            "title" : {
              "fontSize" : 10,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "colors" : {
              "mediumColor2" : "#F29946",
              "mediumColor1" : "#FED444",
              "lowColor1" : "#F71979",
              "lowColor2" : "#CC203D",
              "highColor1" : "#7BDE4E",
              "highColor2" : "#169913"
            },
            "high" : 66,
            "columnMap" : {
              "trellis" : [ ],
              "plots" : [
                "Realization"
              ]
            },
            "min" : 0,
            "showActionMenu" : true,
            "valueType" : "compactNumber",
            "theme" : "wave",
            "referenceLines" : [
              {
                "color" : "rgb(0, 161, 224)",
                "label" : "PLANNED",
                "value" : "{{coalesce(cell(RevenueRealization_1.result,0,\"PlannedAmountTilldate\"),0).asObject()}}"
              }
            ],
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "AccountInFocus_Detai_2" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "AccountInFocus_Details",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' in {{row(static_2.selection,[0],[\"value\"]).asObject()}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = foreach q generate q.'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status', q.'StartDate' as 'StartDate', q.'EndDate' as 'EndDate', q.'SalesAgreementProduct.SalesAgreement.Account.Phone' as 'Phone', q.'SalesAgreementProduct.SalesAgreement.Contact.Email' as 'Email', case when q.'ActualEndDate_sec_epoch' < date_to_epoch(now()) then q.'DerivedActualAmount' end as 'PastActualAmount', case when q.'ActualEndDate_sec_epoch' < date_to_epoch(now()) then q.'PlannedAmountFinal' end as 'PastPlannedAmount', case when q.'StartDate_sec_epoch' < date_to_epoch(now()) and q.'ActualEndDate_sec_epoch' > date_to_epoch(now()) then q.'DerivedActualAmount' end as 'CurrentActualAmount', case when q.'StartDate_sec_epoch' < date_to_epoch(now()) and q.'ActualEndDate_sec_epoch' > date_to_epoch(now()) then q.'PlannedAmountFinal' end as 'CurrentPlannedAmount',q.'Schedule_Derived_Status' as 'Schedule_Derived_Status';\n\nresult = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status', q.'StartDate' as 'StartDate', q.'EndDate' as 'Schedule End Date',q.'Schedule_Derived_Status' as 'Schedule_Derived_Status', sum(q.'PastActualAmount') as 'Actual_Revenue', sum( q.'PastPlannedAmount') as 'Planned Revenue', sum(q.'PastActualAmount')-sum( q.'PastPlannedAmount') as 'Actual Vs Planned Revenue';\n\nresult = order result by ('SalesAgreementProduct.SalesAgreement.Account.Name' asc, 'SalesAgreementProduct.SalesAgreement.Name' asc, 'SalesAgreementProduct.SalesAgreement.Status' asc, 'StartDate' asc, 'Schedule End Date' asc);\n\n\nresult = limit result 2000;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [ ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "mode" : "fittocontainer",
            "numberOfLines" : 1,
            "pivoted" : false,
            "showActionMenu" : true,
            "totals" : true,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "AccountInFocus_Detai_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "AccountInFocus_Details",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' in [\"Activated\",\"Expired\"];\nq = filter q by date('EndDate_Year', 'EndDate_Month', 'EndDate_Day') in {{cell(DateFilter_Static_1.selection, 0, \"value\").asObject()}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = foreach q generate q.'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status', q.'ActivatedDate' as 'ActivatedDate', q.'SalesAgreementEndDate' as 'ExpiryDate', q.'SalesAgreementProduct.SalesAgreement.Account.Phone' as 'Phone', q.'SalesAgreementProduct.SalesAgreement.Contact.Email' as 'Email', case when q.'ActualEndDate_sec_epoch' < date_to_epoch(now()) then q.'DerivedActualAmount' end as 'PastActualAmount', case when q.'ActualEndDate_sec_epoch' < date_to_epoch(now()) then q.'PlannedAmountFinal' end as 'PastPlannedAmount', case when q.'StartDate_sec_epoch' < date_to_epoch(now()) and q.'ActualEndDate_sec_epoch' > date_to_epoch(now()) then q.'DerivedActualAmount' end as 'CurrentActualAmount', case when q.'StartDate_sec_epoch' < date_to_epoch(now()) and q.'ActualEndDate_sec_epoch' > date_to_epoch(now()) then q.'PlannedAmountFinal' end as 'CurrentPlannedAmount',q.'StartDate' as 'StartDate',q.'EndDate' as 'EndDate',q.'Schedule_Derived_Status' as 'Schedule_Derived_Status';\n\nresult = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status',q.'StartDate' as 'StartDate',q.'EndDate' as 'Schedule End Date',q.'Schedule_Derived_Status' as 'Schedule_Derived_Status', sum(q.'PastActualAmount') as 'Actual_Revenue',sum( q.'PastPlannedAmount') as 'Planned Revenue',sum(q.'PastActualAmount')-sum( q.'PastPlannedAmount') as 'Actual Vs Planned Revenue';\n\nresult = order result by ('SalesAgreementProduct.SalesAgreement.Account.Name' asc, 'SalesAgreementProduct.SalesAgreement.Name' asc, 'SalesAgreementProduct.SalesAgreement.Status' asc, 'StartDate' asc, 'Schedule End Date' asc);\n\n\nresult = limit result 2000;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [ ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "mode" : "fittocontainer",
            "numberOfLines" : 1,
            "pivoted" : false,
            "showActionMenu" : true,
            "totals" : true,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "all_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "all_1",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Planned Amount') as 'Plan', (sum('Planned Amount')-sum('Actual Amount')) as 'Demand Shortfall'; result = group result by all; result = foreach result generate sum('Plan') as 'PlannedAmount', sum('Actual') as 'Revenue', sum('Actual')-sum('Plan') as 'C';",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Relationship_Header_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Relationship_Header",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by {{column(ActiveAccounts_1.result, [\"AccountId\"]).asEquality('SalesAgreementProduct.SalesAgreement.AccountId')}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId',q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.AccountId' as 'AccountId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'AccountName', q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch' as 'StartDate_sec_epoch', q.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch' as 'EndDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount',\nq.'DerivedActualAmount'/(daysBetween(toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch'),case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1) as 'ActualDailyAmount', \n(case when toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch') > now() then 0 else (daysBetween((case when toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch') < toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\") && toDate(q.'EndDate_sec_epoch') > toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\") then toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\") else toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch') end),case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1) end) as 'ActualDays_YTD', \nq.'PlannedDailyAmount' as 'PlannedDailyAmount',\n    case when toDate(q.'ActualEndDate_sec_epoch') > now() then  daysBetween( case when toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch') > now() then toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch') else now() end, toDate(q.'ActualEndDate_sec_epoch'))+1 end as 'FutureDays';\n\n\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'AccountName' as 'AccountName','AccountId' as 'AccountId', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'EndDate_sec_epoch' as 'EndDate_sec_epoch', \n'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (q.'ActualDailyAmount'*q.'ActualDays_YTD') as  'RevenueTillToday', (q.'PlannedDailyAmount'*q.'ActualDays_YTD') as 'PlannedTillToday', (q.'PlannedDailyAmount'*q.'FutureDays') as 'PlannedAfterToday'; \n\nresult = group q by all;\nresult = foreach result generate unique('AccountId') as 'NoOfAccounts', sum(q.'RevenueTillToday')+(sum(q.'PlannedAfterToday')* (sum(q.'RevenueTillToday')/sum(q.PlannedTillToday))) as 'RevenueGenerated', sum(q.'DerivedPlannedAmount') as 'PlannedRevenue', (sum(q.'RevenueTillToday')+(sum(q.'PlannedAfterToday')* (sum(q.'RevenueTillToday')/sum(q.PlannedTillToday))))/unique('AccountId') as 'Avg_Customer_Lifetime_Value';\nresult = limit result 2000;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Relationship_Header_2" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Relationship_Header",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = filter q by {{column(ActiveAccounts_1.result, [\"AccountId\"]).asEquality('SalesAgreementProduct.SalesAgreement.AccountId')}};\n--q = filter q by 'SalesAgreementProduct.SalesAgreementId'==\"0YAB00000004C93OAE\";\nq = foreach q generate 'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId',q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.AccountId' as 'AccountId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'AccountName', \n   q.'StartDate_sec_epoch' as 'StartDate_sec_epoch', q.'EndDate_sec_epoch' as 'EndDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount',\nq.'DerivedActualAmount'/(daysBetween(toDate(q.'StartDate_sec_epoch'),case when toDate(q.'EndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1) as 'ActualDailyAmount', \n\n(case when toDate(q.'StartDate_sec_epoch') > now() then 0 else (\n\ndaysBetween(toDate(q.'StartDate_sec_epoch'),\n   case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1)\n   end) as 'ActualDays_YTD', \n\nq.'PlannedDailyAmount' as 'PlannedDailyAmount',\n\n    case when toDate(q.'ActualEndDate_sec_epoch') >= now() then  daysBetween( case when toDate(q.'StartDate_sec_epoch') <= now() then now() else toDate(q.'StartDate_sec_epoch') end, \n    toDate(q.'ActualEndDate_sec_epoch'))+1 end as 'FutureDays';\n\n\nq = foreach q generate 'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'AccountName' as 'AccountName','AccountId' as 'AccountId', toDate('StartDate_sec_epoch') as 'StartDate_sec_epoch', toDate('EndDate_sec_epoch') as 'EndDate_sec_epoch', \n'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (q.'ActualDailyAmount'*q.'ActualDays_YTD') as  'RevenueTillToday', (q.'PlannedDailyAmount'*q.'ActualDays_YTD') as 'PlannedTillToday', (q.'PlannedDailyAmount'*q.'FutureDays') as 'PlannedAfterToday'; \n\nresult = group q by all;\nresult = foreach result generate unique('AccountId') as 'NoOfAccounts', sum(q.'RevenueTillToday') as 'RevenueTillToday',sum(q.PlannedTillToday) as 'PlannedTillToday', sum(q.'PlannedAfterToday') as 'PlannedAfterToday', sum(q.'RevenueTillToday')+(sum(q.'PlannedAfterToday')* (sum(q.'RevenueTillToday')/sum(q.PlannedTillToday))) as 'RevenueGenerated', sum(q.'DerivedPlannedAmount') as 'PlannedRevenue', (sum(q.'RevenueTillToday')+(sum(q.'PlannedAfterToday')* (sum(q.'RevenueTillToday')/sum(q.PlannedTillToday))))/unique('AccountId') as 'Avg_Customer_Lifetime_Value';\nresult = limit result 2000;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [ ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "maxColumnWidth" : 300,
            "minColumnWidth" : 40,
            "mode" : "variable",
            "numberOfLines" : 1,
            "showActionMenu" : true,
            "totals" : true,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "RealtionshipDetailsT_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "RealtionshipDetailsTable",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = foreach q generate 'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId',q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.AccountId' as 'AccountId', \n'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name',\n'SalesAgreementProduct.SalesAgreement.Account.Type' as 'AccountType', 'SalesAgreementProduct.SalesAgreement.Account.BillingCountry' as 'AccountCountry', 'SalesAgreementProduct.SalesAgreement.Account.Industry' as 'Industry', q.'StartDate_sec_epoch' as 'StartDate_sec_epoch', q.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch' as 'EndDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount',\nq.'DerivedActualAmount'/(daysBetween(toDate(q.'StartDate_sec_epoch'),case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1) as 'ActualDailyAmount', \n(case when toDate(q.'StartDate_sec_epoch') > now() then 0 else (daysBetween(toDate(q.'StartDate_sec_epoch'),\n   case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1)\n   end) as 'ActualDays_YTD', \nq.'PlannedDailyAmount' as 'PlannedDailyAmount',\n    case when toDate(q.'ActualEndDate_sec_epoch') >= now() then  daysBetween( case when toDate(q.'StartDate_sec_epoch') <= now() then now() else toDate(q.'StartDate_sec_epoch') end, \n    toDate(q.'ActualEndDate_sec_epoch'))+1 end as 'FutureDays',q.'SalesAgreementProduct.SalesAgreement.StartDate' as 'SalesAgreementProduct.SalesAgreement.StartDate',\n    q.'SalesAgreementProduct.SalesAgreement.EndDate' as 'SalesAgreementProduct.SalesAgreement.EndDate',\n    q.'SalesAgreementProduct.SalesAgreement.StatusCode' as 'SalesAgreementProduct.SalesAgreement.StatusCode';\nq = foreach q generate 'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId',  'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name','AccountId' as 'AccountId', 'AccountType' as 'AccountType','AccountCountry' as 'AccountCountry','Industry' as 'Industry', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'EndDate_sec_epoch' as 'EndDate_sec_epoch', \n'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (q.'ActualDailyAmount'*q.'ActualDays_YTD') as  'RevenueTillToday', (q.'PlannedDailyAmount'*q.'ActualDays_YTD') as 'PlannedTillToday', (q.'PlannedDailyAmount'*q.'FutureDays') as 'PlannedAfterToday',\ncase when q.'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Activated\",\"Approved\"] then \nq.'SalesAgreementProduct.SalesAgreement.Name' end as 'SalesAgreementProduct.SalesAgreement.Name',\ncase when q.'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Activated\",\"Approved\"] then \nq.'SalesAgreementProduct.SalesAgreement.StartDate' end as 'SalesAgreementProduct.SalesAgreement.StartDate',\ncase when q.'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Activated\",\"Approved\"] then \n    q.'SalesAgreementProduct.SalesAgreement.EndDate' end as 'SalesAgreementProduct.SalesAgreement.EndDate'; \n\nq = order q by ('SalesAgreementProduct.SalesAgreement.Account.Name' asc, 'SalesAgreementProduct.SalesAgreement.EndDate' desc) ;\n\nq = group q by ('AccountId','SalesAgreementProduct.SalesAgreement.Account.Name','AccountType','AccountCountry','Industry');\n\nq = foreach q generate 'AccountId' as 'AccountId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'AccountType' as 'AccountType','AccountCountry' as 'AccountCountry','Industry' as 'Industry', toDate(min('StartDate_sec_epoch')) as 'MinDate', toDate(max('EndDate_sec_epoch')) as 'MaxDate', sum('RevenueTillToday') as 'RevenueTillToday', sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday')) as 'PlannedAfterToday', sum('RevenueTillToday')+(sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday'))) as 'CLV', (sum('RevenueTillToday')+(sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday'))))/sum(PlannedAmountFinal) as 'Realization', case when toDate(min('StartDate_sec_epoch'))<now() then round(daysBetween(toDate(min('StartDate_sec_epoch')), case when toDate(max('EndDate_sec_epoch'))<now() then toDate(max('EndDate_sec_epoch')) else now() end)/365,2) else 0 end as 'Current_Years', case when toDate(max('EndDate_sec_epoch'))>now() then round(daysBetween(now(),toDate(max('EndDate_sec_epoch')))/365,2) else 0 end as 'Planned_Years',\nfirst(q.'SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name',\nfirst(q.'SalesAgreementProduct.SalesAgreement.StartDate') \n    as 'AgreementStartDate',\n    first(q.'SalesAgreementProduct.SalesAgreement.EndDate') as 'AgreementEndDate'\n;\n\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name','AccountType' as 'Account Type','Industry','AccountCountry' as 'Account Country',\n    'RevenueTillToday' as 'Actual Revenue (To Date)','Realization' as 'Revenue Realization (To Date)', 'Current_Years' \n     as 'Length of relationship(To Date)', 'Planned_Years' as 'Future Length of relationship (Agreed Upon)','PlannedAfterToday' as 'Planned Revenue(from Tomorrow)', 'CLV' as 'Customer Lifetime Value', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'AgreementStartDate' as 'Agreement Start Date', 'AgreementEndDate' as 'Agreement End Date' ; \n\nq = order q by 'SalesAgreementProduct.SalesAgreement.Account.Name' asc;\nq = limit q 2000; ",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 10
            },
            "columnProperties" : { },
            "columns" : [ ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "mode" : "fittocontainer",
            "numberOfLines" : 1,
            "pivoted" : false,
            "showActionMenu" : true,
            "showRowIndexColumn" : false,
            "totals" : true,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "AccountsToggle_1" : {
        "broadcastFacet" : true,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "AccountsToggle",
        "selectMode" : "singlerequired",
        "type" : "staticflex",
        "values" : [
          {
            "display" : "ACTIVE ACCOUNTS",
            "value" : "[\"Activated\", \"Approved\"]",
            "label" : "Active Accounts",
            "filtercondition" : ""
          },
          {
            "display" : "ALL ACCOUNTS",
            "value" : "[\"Activated\", \"Approved\", \"Cancelled\", \"Expired\"]",
            "label" : "All Accounts",
            "filtercondition" : "--"
          }
        ]
      },
      "Overview_Details_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Overview_Details",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by 'Id' left, valid_slaps by 'Id'; result = foreach result generate first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Status') as 'SalesAgreementProduct.SalesAgreement.Status', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Owner.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Owner.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.StartDate') as 'SalesAgreementProduct.SalesAgreement.StartDate', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.EndDate') as 'SalesAgreementProduct.SalesAgreement.EndDate', sum(FilledData.'Actual Amount') as 'Actual', sum(FilledData.'Planned Amount') as 'Plan', (sum(FilledData.'Planned Amount')-sum(FilledData.'Actual Amount')) as 'Demand Shortfall'; result = group result by ('SalesAgreementProduct.SalesAgreement.Account.Name','SalesAgreementProduct.SalesAgreement.Name','SalesAgreementProduct.SalesAgreement.Status','SalesAgreementProduct.SalesAgreement.Account.Owner.Name', 'SalesAgreementProduct.SalesAgreement.StartDate','SalesAgreementProduct.SalesAgreement.EndDate'); result = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'SalesAgreementProduct.SalesAgreement.Account.Owner.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Owner.Name','SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name','SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status', case when now() >= toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\") then daysBetween(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"),toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\")) when now() >= toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\") then daysBetween(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"),toDate(date_to_string(now(),\"yyyy-MM-dd\"),\"yyyy-MM-dd\")) else 0 end as 'Active Days',  sum('Plan') as 'Planned Revenue', sum('Actual') as 'Actual Revenue', sum('Actual')/sum('Plan') as 'Revenue Realization';",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [ ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "maxColumnWidth" : 300,
            "minColumnWidth" : 40,
            "mode" : "variable",
            "numberOfLines" : 1,
            "showActionMenu" : true,
            "showRowIndexColumn" : false,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "CLV_1" : {
        "broadcastFacet" : true,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "CLV",
        "selectMode" : "singlerequired",
        "type" : "staticflex",
        "values" : [
          {
            "display" : "CUSTOMER LIFETIME VALUE",
            "value" : "CLV",
            "RelationshipLengthCalc" : "round((daysBetween('MinDate', 'MaxDate')+1)/365, 2)",
            "RelationshipLengthLabel" : "Total length of Relationship (Years)",
            "label" : "Customer Litetime Value",
            "CLVText" : "CLV of an account = Actual Revenue + (Planned revenue x Revenue Realization)"
          },
          {
            "display" : "REVENUE              ",
            "value" : "Revenue",
            "RelationshipLengthCalc" : "case when q.'MinDate'<now() then round(daysBetween(q.'MinDate', case when q.'MaxDate'<now() then q.'MaxDate' else now() end)/365,2) else 0 end",
            "RelationshipLengthLabel" : "Length of Relationship (To Date)",
            "label" : "Revenue",
            "CLVText" : ""
          }
        ]
      },
      "SalesAgreementProduc_2" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "SalesAgreementProduc_1",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\";\nq = filter q by date('EndDate_Year', 'EndDate_Month', 'EndDate_Day') in {{cell(DateFilter_Static_1.selection, 0, \"value\").asObject()}};\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name';\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', \n    sum('PlannedAmountFinal') as 'Planned  Revenue', sum('DerivedActualAmount') as 'Actual Revenue', \n    sum('PlannedAmountFinal')-sum('DerivedActualAmount') as 'Outstanding  Revenue';\nq = order q by 'Outstanding  Revenue' desc;\nq = limit q 2000;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showPoints" : false,
            "legend" : {
              "descOrder" : false,
              "showHeader" : false,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "line",
            "dashLine" : {
              "measures" : "",
              "showDashLine" : false
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "fillArea" : true,
            "columnMap" : {
              "split" : [ ],
              "trellis" : [ ],
              "dimensionAxis" : [
                "SalesAgreementProduct.SalesAgreement.Account.Name"
              ],
              "plots" : [
                "Planned  Revenue",
                "Actual Revenue"
              ]
            },
            "showActionMenu" : true,
            "showZero" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : false,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "valueType" : "none",
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : false,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true,
            "drawArea" : {
              "measure" : "",
              "showDrawArea" : false,
              "bounding1" : "",
              "bounding2" : ""
            }
          },
          "type" : "chart"
        }
      },
      "Revenue_Trend" : {
        "broadcastFacet" : false,
        "groups" : [ ],
        "label" : "RevenueTrend",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Planned Amount') as 'Plan', (sum('Planned Amount')-sum('Actual Amount')) as 'Demand Shortfall'; result = group result by ('Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', sum('Plan') as 'PlannedAmount', sum('Actual') as 'ActualAmount';\nresult = order result by 'StartDate_Year~~~StartDate_Month' asc;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : false,
            "legend" : {
              "descOrder" : false,
              "showHeader" : false,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : false,
              "predictiveLine" : {
                "color" : "#8932ED",
                "label" : "TODAY"
              },
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "ActualAmount" : {
                "mark" : "bar"
              },
              "PlannedAmount" : {
                "mark" : "line"
              }
            },
            "columnMap" : {
              "timeAxis" : [
                "StartDate_Year~~~StartDate_Month"
              ],
              "trellis" : [ ],
              "plots" : [
                "ActualAmount",
                "PlannedAmount"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [
                {
                  "color" : "rgb(0, 161, 224)",
                  "value" : 0
                },
                {
                  "color" : "rgb(0, 161, 224)",
                  "value" : 0
                }
              ],
              "title" : "Revenue",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "SalesAgreementProduc_3" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "SalesAgreementProduc_3",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Time_Range_Selector_1.selection,0,\"min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Time_Range_Selector_1.selection,0,\"max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 ||('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by 'Id' left, valid_slaps by 'Id'; result = foreach result generate  first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum(FilledData.'Actual Amount') as 'Actual_Revenue', sum(FilledData.'Planned Amount') as 'PlannedAmount';\nresult = group result by 'SalesAgreementProduct.SalesAgreement.Account.Name';\nresult = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name', sum('Actual_Revenue') as 'Actual_Revenue', (sum('Actual_Revenue')/sum('PlannedAmount')) as 'Realization';\nresult = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name', {{row(REVENUE_1.selection,[0],[\"value\",\"value\"]).asProjection()}};\nresult = order result by ('{{row(REVENUE_1.selection,[0],[\"value\"]).asObject()}}' desc);\nresult = limit result 2000;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : false,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : false,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : false,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : false,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "static_2" : {
        "broadcastFacet" : true,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "selectMode" : "singlerequired",
        "start" : {
          "display" : [
            "ACTIVE AGREEMENTS"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "display" : "ACTIVE AGREEMENTS",
            "value" : "[\"Activated\", \"Approved\"]",
            "label" : "Active Agreements"
          },
          {
            "display" : "ALL AGREEMENTS",
            "value" : "[\"Activated\", \"Approved\", \"Cancelled\", \"Expired\"]",
            "label" : "All Agreements"
          }
        ]
      },
      "DerivedActualAmount__1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "DerivedActualAmount__1",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\";\nq = filter q by date('EndDate_Year', 'EndDate_Month', 'EndDate_Day') in {{cell(DateFilter_Static_1.selection, 0, \"value\").asObject()}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nresult = group q by all;\nresult = foreach result generate sum(q.'DerivedActualAmount') as 'DerivedActualAmount', sum(q.'PlannedAmountFinal') as 'PlannedAmount', sum(q.'PlannedAmountFinal') - sum(q.'DerivedActualAmount') as 'OutstandingAmount';\nresult = limit result 2000; ",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [ ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "maxColumnWidth" : 300,
            "minColumnWidth" : 40,
            "mode" : "variable",
            "numberOfLines" : 1,
            "showActionMenu" : true,
            "totals" : true,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "ActiveAccounts_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "ActiveAccounts",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.StatusCode' in {{cell(AccountsToggle_1.selection,0, \"value\").asString()}};\nq = group q by 'SalesAgreementProduct.SalesAgreement.AccountId';\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.AccountId' as 'AccountId'; ",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [ ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "maxColumnWidth" : 300,
            "minColumnWidth" : 40,
            "mode" : "variable",
            "numberOfLines" : 1,
            "showActionMenu" : true,
            "showRowIndexColumn" : true,
            "totals" : true,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "static_1" : {
        "broadcastFacet" : true,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "",
        "selectMode" : "singlerequired",
        "start" : {
          "display" : [
            "%"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "display" : "%",
            "value" : "NetRevenuePercent",
            "label" : "Actual Vs Planned Revenue(%)"
          },
          {
            "display" : "$",
            "value" : "NetRevenue",
            "label" : "Actual Vs Planned Revenue"
          }
        ]
      },
      "DerivedActualAmount__2" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "DerivedActualAmount__2",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' in {{row(static_2.selection,[0],[\"value\"]).asObject()}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nresult = group q by all;\nresult = foreach result generate sum(q.'DerivedActualAmount') as 'A', sum(q.'PlannedAmountFinal') as 'B';\nresult = foreach result generate 'A', 'B', A-B as 'NetRevenue', round(A*100/B,2) as 'NetRevenuePercent';\nresult = foreach result generate 'A', 'B','NetRevenue'; \nresult = limit result 2000; ",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [ ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "maxColumnWidth" : 300,
            "minColumnWidth" : 40,
            "mode" : "variable",
            "numberOfLines" : 1,
            "showActionMenu" : true,
            "totals" : true,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "DateFilter_Static_1" : {
        "broadcastFacet" : true,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "DateFilter_Static",
        "selectMode" : "singlerequired",
        "start" : {
          "display" : [
            "QUARTER"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "display" : "MONTH",
            "value" : "[\"current month\"..\"current month\"]"
          },
          {
            "display" : "QUARTER",
            "value" : "[\"current quarter\"..\"current quarter\"]"
          },
          {
            "display" : "YEAR",
            "value" : "[\"current year\"..\"current year\"]"
          }
        ]
      },
      "SalesAgreementProduc_4" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "SalesAgreementProduc_1",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\";\nq = filter q by date('EndDate_Year', 'EndDate_Month', 'EndDate_Day') in {{cell(DateFilter_Static_1.selection, 0, \"value\").asObject()}};\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name';\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum('PlannedAmountFinal') as 'Planned', sum('DerivedActualAmount') as 'Actual', sum('PlannedAmountFinal')-sum('DerivedActualAmount') as 'Outstanding Amount';\nq = order q by 'Outstanding Amount' desc;\nq = limit q 2000;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : false,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "vbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "binValues" : false,
            "columnMap" : {
              "trellis" : [ ],
              "dimensionAxis" : [
                "SalesAgreementProduct.SalesAgreement.Account.Name"
              ],
              "plots" : [
                "Outstanding Amount"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : false,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : false,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      }
    },
    "widgetStyle" : {
      "backgroundColor" : "#FFFFFF",
      "borderColor" : "#E6ECF2",
      "borderEdges" : [ ],
      "borderRadius" : 0,
      "borderWidth" : 1
    },
    "widgets" : {
      "number_12" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "NoOfAccounts",
          "numberColor" : "#091A3E",
          "numberSize" : 16,
          "showActionMenu" : true,
          "step" : "Relationship_Header_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_11" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "PlannedRevenue",
          "numberColor" : "#E6ECF2",
          "numberSize" : 16,
          "showActionMenu" : true,
          "step" : "Relationship_Header_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_10" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "NoOfAccounts",
          "numberColor" : "#E6ECF2",
          "numberSize" : 16,
          "showActionMenu" : true,
          "step" : "Relationship_Header_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "text_18" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "ACTUAL REVENUE",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_17" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "PLANNED REVENUE",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "link_14" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "affd9fef-3319-4206-840e-62d065d7b8c8"
          },
          "destinationType" : "page",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "RELATIONSHIP WITH MY ACCOUNTS",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "link"
      },
      "container_14" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_19" : {
        "parameters" : {
          "fontSize" : 10,
          "showActionMenu" : true,
          "text" : "TOTAL NO OF ACCOUNTS",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "link_12" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "affd9fef-3319-4206-840e-62d065d7b8c8"
          },
          "destinationType" : "page",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "RELATIONSHIP WITH MY ACCOUNTS",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "link"
      },
      "link_13" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "affd9fef-3319-4206-840e-62d065d7b8c8"
          },
          "destinationType" : "page",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "RELATIONSHIP WITH MY ACCOUNTS",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "link"
      },
      "text_13" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Revenue trend over time",
          "textAlignment" : "left",
          "textColor" : "rgb(255, 255, 255)"
        },
        "type" : "text"
      },
      "text_16" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "REVENUE SHORTFALL",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "link_10" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "32e04838-d3ff-4554-b350-dbf372b7b843"
          },
          "destinationType" : "page",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "OVERVIEW",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "link"
      },
      "text_15" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "Performance based on past schedules of ",
          "textAlignment" : "left",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "link_11" : {
        "parameters" : {
          "destinationType" : "lens",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "RELATIONSHIP WITH MY ACCOUNTS",
          "textAlignment" : "center",
          "textColor" : "rgb(0, 112, 210)"
        },
        "type" : "link"
      },
      "number_17" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "Avg_Customer_Lifetime_Value",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Relationship_Header_2",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "text_10" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Accounts Health",
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "number_15" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "RevenueTillToday",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Relationship_Header_2",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_14" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "PlannedAfterToday",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Relationship_Header_2",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "text_11" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "Accounts by",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "number_13" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "NoOfAccounts",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Relationship_Header_2",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "container_1" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "chart_9" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : false,
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : true,
            "customSize" : "auto",
            "position" : "bottom-center",
            "inside" : false
          },
          "axisMode" : "multi",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "vbar",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "binValues" : false,
          "columnMap" : {
            "trellis" : [ ],
            "dimensionAxis" : [
              "SalesAgreementProduct.SalesAgreement.Account.Name"
            ],
            "plots" : [
              "Outstanding Amount"
            ]
          },
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "SalesAgreementProduc_4",
          "dimensionAxis" : {
            "showTitle" : false,
            "customSize" : "auto",
            "showAxis" : true,
            "title" : "",
            "icons" : {
              "useIcons" : false,
              "iconProps" : {
                "fit" : "cover",
                "column" : "",
                "type" : "round",
                "parameters" : { }
              }
            }
          },
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "container_3" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_4" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "chart_6" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "stack" : false,
          "showPoints" : true,
          "legend" : {
            "descOrder" : false,
            "showHeader" : false,
            "show" : true,
            "customSize" : "auto",
            "position" : "bottom-center",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "time-combo",
          "missingValue" : "connect",
          "showValuesOnLine" : false,
          "exploreLink" : true,
          "timeAxis" : {
            "showTitle" : false,
            "predictiveLine" : {
              "color" : "#8932ED",
              "label" : "TODAY"
            },
            "showAxis" : true,
            "title" : ""
          },
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "plots" : {
            "ActualAmount" : {
              "mark" : "bar"
            },
            "PlannedAmount" : {
              "mark" : "line"
            }
          },
          "columnMap" : {
            "timeAxis" : [
              "StartDate_Year~~~StartDate_Month"
            ],
            "trellis" : [ ],
            "plots" : [
              "ActualAmount",
              "PlannedAmount"
            ]
          },
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "referenceLines" : [
              {
                "color" : "rgb(0, 161, 224)",
                "value" : 0
              },
              {
                "color" : "rgb(0, 161, 224)",
                "value" : 0
              }
            ],
            "title" : "Revenue",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "Revenue_Trend",
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_2" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "Based on currently active agreement schedules expiring this",
          "textAlignment" : "left",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "chart_5" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : false,
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : false,
            "customSize" : "auto",
            "position" : "right-top",
            "inside" : false
          },
          "axisMode" : "multi",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "hbar",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "binValues" : false,
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "SalesAgreementProduc_3",
          "dimensionAxis" : {
            "showTitle" : false,
            "customSize" : "auto",
            "showAxis" : true,
            "title" : "",
            "icons" : {
              "useIcons" : false,
              "iconProps" : {
                "fit" : "cover",
                "column" : "",
                "type" : "round",
                "parameters" : { }
              }
            }
          },
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_5" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "PLANNED REVENUE",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "chart_8" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "legend" : {
            "descOrder" : false,
            "showHeader" : false,
            "show" : true,
            "customSize" : "auto",
            "position" : "right-top",
            "inside" : false
          },
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "scatter",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 10,
            "subtitleFontSize" : 10,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "radiusRatio" : 5,
          "columnMap" : {
            "r" : [
              "CLV"
            ],
            "x" : [
              "RelationshipLength"
            ],
            "y" : [
              "Realization"
            ],
            "trellis" : [ ],
            "plots" : [
              "SalesAgreementProduct.SalesAgreement.Account.Name"
            ]
          },
          "showActionMenu" : true,
          "x" : {
            "sqrtScale" : false,
            "showZero" : true,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "{{row(CLV_1.selection,[0],[\"RelationshipLengthLabel\"]).asObject()}}",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "y" : {
            "sqrtScale" : false,
            "showZero" : true,
            "showTitle" : true,
            "showAxis" : true,
            "referenceLines" : [
              {
                "color" : "rgb(0, 161, 224)",
                "label" : "Avg Realization",
                "value" : "{{coalesce(cell(Account_Value_2.result,0,\"Avg_Realization\"),1).asObject()}}"
              }
            ],
            "title" : "Revenue Realization (To Date)",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "Account_Value_2",
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_4" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "OUTSTANDING REVENUE",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "chart_7" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : false,
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : false,
            "customSize" : "auto",
            "position" : "right-top",
            "inside" : false
          },
          "axisMode" : "multi",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "hbar",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "binValues" : false,
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "Clone_of_SalesAgreem_1",
          "dimensionAxis" : {
            "showTitle" : false,
            "customSize" : "auto",
            "showAxis" : true,
            "title" : "",
            "icons" : {
              "useIcons" : false,
              "iconProps" : {
                "fit" : "cover",
                "column" : "",
                "type" : "round",
                "parameters" : { }
              }
            }
          },
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "container_9" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_7" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "ACTUAL REVENUE",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "chart_2" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "legend" : {
            "descOrder" : false,
            "showHeader" : false,
            "show" : true,
            "customSize" : "auto",
            "position" : "bottom-center",
            "inside" : false
          },
          "axisMode" : "multi",
          "totalSumMode" : "none",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "stackhbar",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "columnMap" : {
            "split" : [
              "Current_Planned_Flag"
            ],
            "trellis" : [ ],
            "dimensionAxis" : [
              "SalesAgreementProduct.SalesAgreement.Account.Name"
            ],
            "plots" : [
              "Number of Years"
            ]
          },
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "Total Length of Relationship(Years)",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "normalize" : false,
          "theme" : "dark",
          "step" : "RelationshipLength_1",
          "dimensionAxis" : {
            "showTitle" : false,
            "customSize" : "auto",
            "showAxis" : true,
            "title" : "",
            "icons" : {
              "useIcons" : false,
              "iconProps" : {
                "fit" : "cover",
                "column" : "",
                "type" : "round",
                "parameters" : { }
              }
            }
          },
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_6" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "ACTUAL REVENUE",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_9" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "ACTUAL vs PLANNED DIFFERENCE",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "chart_4" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "legend" : {
            "descOrder" : false,
            "showHeader" : false,
            "show" : true,
            "customSize" : "auto",
            "position" : "bottom-center",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "vbar",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "binValues" : false,
          "columnMap" : {
            "trellis" : [ ],
            "dimensionAxis" : [
              "SalesAgreementProduct.SalesAgreement.Account.Name"
            ],
            "plots" : [
              "Planned  Revenue",
              "Actual Revenue"
            ]
          },
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "SalesAgreementProduc_2",
          "dimensionAxis" : {
            "showTitle" : false,
            "customSize" : "auto",
            "showAxis" : true,
            "title" : "",
            "icons" : {
              "useIcons" : false,
              "iconProps" : {
                "fit" : "cover",
                "column" : "",
                "type" : "round",
                "parameters" : { }
              }
            }
          },
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_8" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "PLANNED REVENUE",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "chart_3" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "max" : 1,
          "legend" : {
            "showHeader" : true,
            "show" : false,
            "position" : "right-top",
            "inside" : false
          },
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : [
              "Revenue"
            ],
            "showNullValues" : true,
            "showPercentage" : false,
            "customText" : "[Realization] of  [ValidPlannedAmount]",
            "showDimensions" : true,
            "showMeasures" : true,
            "dimensions" : "",
            "customizeTooltip" : true
          },
          "visualizationType" : "flatgauge",
          "medium" : 33,
          "exploreLink" : true,
          "title" : {
            "fontSize" : 10,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "colors" : {
            "mediumColor2" : "#F29946",
            "mediumColor1" : "#FED444",
            "lowColor1" : "#F71979",
            "lowColor2" : "#CC203D",
            "highColor1" : "#7BDE4E",
            "highColor2" : "#169913"
          },
          "high" : 66,
          "columnMap" : {
            "trellis" : [ ],
            "plots" : [
              "Realization"
            ]
          },
          "min" : 0,
          "showActionMenu" : true,
          "valueType" : "compactNumber",
          "theme" : "wave",
          "step" : "RevenueRealization_1",
          "referenceLines" : [ ],
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "dateselector_1" : {
        "parameters" : {
          "absoluteModeEnabled" : true,
          "calendarTypeSwitchingAllowed" : false,
          "defaultFiscalMode" : false,
          "displayMode" : "filter",
          "filterStyle" : {
            "titleColor" : "#FFFFFF",
            "valueColor" : "#FFFFFF"
          },
          "instant" : false,
          "presetsEnabled" : false,
          "relativeModeEnabled" : false,
          "showActionMenu" : false,
          "step" : "Time_Range_Selector_1",
          "title" : ""
        },
        "type" : "dateselector"
      },
      "text_1" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Which Accounts do I need to follow up with for order inflow?",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "filterpanel_1" : {
        "parameters" : {
          "filterItemOptions" : {
            "backgroundColor" : "#FFFFFF",
            "borderColor" : "#E6ECF2",
            "borderRadius" : 4,
            "borderWidth" : 1,
            "propertyColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "filters" : [ ],
          "itemsPerRow" : 6,
          "showAllFilters" : true,
          "title" : {
            "separatorColor" : "#E6ECF2",
            "text" : {
              "align" : "left",
              "color" : "#091A3E",
              "fontSize" : 16,
              "label" : "Filters"
            },
            "visible" : false
          }
        },
        "type" : "filterpanel"
      },
      "number_5" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "Revenue",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "all_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_4" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "DerivedActualAmount",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "DerivedActualAmount__1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_3" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "PlannedAmount",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "DerivedActualAmount__1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_2" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "NetRevenue",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "DerivedActualAmount__2",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_1" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "OutstandingAmount",
          "numberColor" : "rgb(230, 236, 242)",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "DerivedActualAmount__1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "rgb(9, 26, 62)",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "image_1" : {
        "parameters" : {
          "alignmentX" : "center",
          "alignmentY" : "center",
          "fit" : "fitwidth",
          "image" : {
            "name" : "${App.Images['manufacturing_app_icon2xpng'].Name}",
            "namespace" : "${Org.Namespace}"
          }
        },
        "type" : "image"
      },
      "container_12" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_11" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_10" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "image_2" : {
        "parameters" : {
          "alignmentX" : "center",
          "alignmentY" : "center",
          "fit" : "fitwidth",
          "image" : {
            "name" : "${App.Images['manufacturing_app_icon2xpng'].Name}",
            "namespace" : "${Org.Namespace}"
          }
        },
        "type" : "image"
      },
      "text_36" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "All metrics are appropriated for selected time frame",
          "textAlignment" : "left",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_35" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "How does my planned business look like?",
          "textAlignment" : "left",
          "textColor" : "rgb(255, 255, 255)"
        },
        "type" : "text"
      },
      "number_9" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "A",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "DerivedActualAmount__2",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_8" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "B",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "DerivedActualAmount__2",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "rgba(9, 26, 62, 0)",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "text_31" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "AVG CUSTOMER LIFETIME VALUE",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "number_7" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "C",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "all_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "text_34" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Details Table",
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "number_6" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "PlannedAmount",
          "numberColor" : "#E6ECF2",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "all_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "rgb(9, 26, 62)",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "text_33" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "{{row(CLV_1.selection,[0],[\"CLVText\"]).asObject()}}",
          "textAlignment" : "center",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "text_30" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "PLANNED REVENUE (STARTING TOMORROW)",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_29" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "ACTUAL REVENUE (TO DATE)",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_28" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "ACCOUNTS (#)",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "link_3" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "32e04838-d3ff-4554-b350-dbf372b7b843"
          },
          "destinationType" : "page",
          "fontSize" : 16,
          "includeState" : false,
          "text" : "OVERVIEW",
          "textAlignment" : "center",
          "textColor" : "#091A3E"
        },
        "type" : "link"
      },
      "text_25" : {
        "parameters" : {
          "fontSize" : 10,
          "showActionMenu" : true,
          "text" : "AVG CUSTOMER LIFETIME VALUE",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "link_4" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f"
          },
          "destinationType" : "page",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "ACCOUNTS IN FOCUS",
          "textAlignment" : "center",
          "textColor" : "rgb(84, 105, 141)"
        },
        "type" : "link"
      },
      "text_24" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "Which are my most and least valuable accounts?",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "link_1" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "125726a0-29bd-48b9-af08-393c33e20ede"
          },
          "destinationType" : "page",
          "fontSize" : 16,
          "includeState" : false,
          "text" : "Which are my best and worst performing accounts?",
          "textAlignment" : "left",
          "textColor" : "rgb(255, 255, 255)"
        },
        "type" : "link"
      },
      "text_27" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Which are my most and least valuable accounts?",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "link_2" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f"
          },
          "destinationType" : "page",
          "fontSize" : 16,
          "includeState" : false,
          "text" : "Which Accounts do I need to follow up with for order inflow?",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "link"
      },
      "text_26" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "How long are my accounts' relationships?",
          "textAlignment" : "left",
          "textColor" : "rgb(255, 255, 255)"
        },
        "type" : "text"
      },
      "text_21" : {
        "parameters" : {
          "fontSize" : 10,
          "showActionMenu" : true,
          "text" : "TOTAL REVENUE GENERATED",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "text_20" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "Actual Vs Planned Revenue as",
          "textAlignment" : "right",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "text_23" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "What is the relationship length of my accounts?",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "text_22" : {
        "parameters" : {
          "fontSize" : 10,
          "showActionMenu" : true,
          "text" : "TOTAL PLANNED REVENUE",
          "textAlignment" : "left",
          "textColor" : "#E6ECF2"
        },
        "type" : "text"
      },
      "table_1" : {
        "parameters" : {
          "borderColor" : "#e0e5ee",
          "borderWidth" : 1,
          "cell" : {
            "backgroundColor" : "#ffffff",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "columnProperties" : { },
          "columns" : [ ],
          "customBulkActions" : [ ],
          "exploreLink" : true,
          "header" : {
            "backgroundColor" : "#f4f6f9",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "innerMajorBorderColor" : "#a8b7c7",
          "innerMinorBorderColor" : "#e0e5ee",
          "mode" : "fittocontainer",
          "numberOfLines" : 1,
          "pivoted" : false,
          "showActionMenu" : true,
          "step" : "AccountInFocus_Detai_2",
          "totals" : true,
          "verticalPadding" : 8
        },
        "type" : "table"
      },
      "table_2" : {
        "parameters" : {
          "borderColor" : "#e0e5ee",
          "borderWidth" : 1,
          "cell" : {
            "backgroundColor" : "#ffffff",
            "fontColor" : "#16325c",
            "fontSize" : 10
          },
          "columnProperties" : { },
          "columns" : [ ],
          "customBulkActions" : [ ],
          "exploreLink" : true,
          "header" : {
            "backgroundColor" : "#f4f6f9",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "innerMajorBorderColor" : "#a8b7c7",
          "innerMinorBorderColor" : "#e0e5ee",
          "mode" : "fittocontainer",
          "numberOfLines" : 1,
          "pivoted" : false,
          "showActionMenu" : true,
          "showRowIndexColumn" : false,
          "step" : "RealtionshipDetailsT_1",
          "totals" : true,
          "verticalPadding" : 8
        },
        "type" : "table"
      },
      "link_9" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f"
          },
          "destinationType" : "page",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "ACCOUNTS IN FOCUS",
          "textAlignment" : "center",
          "textColor" : "rgb(84, 105, 141)"
        },
        "type" : "link"
      },
      "table_3" : {
        "parameters" : {
          "borderColor" : "#e0e5ee",
          "borderWidth" : 1,
          "cell" : {
            "backgroundColor" : "#ffffff",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "columnProperties" : { },
          "columns" : [ ],
          "customBulkActions" : [ ],
          "exploreLink" : true,
          "header" : {
            "backgroundColor" : "#f4f6f9",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "innerMajorBorderColor" : "#a8b7c7",
          "innerMinorBorderColor" : "#e0e5ee",
          "mode" : "fittocontainer",
          "numberOfLines" : 1,
          "pivoted" : false,
          "showActionMenu" : true,
          "step" : "AccountInFocus_Detai_1",
          "totals" : true,
          "verticalPadding" : 8
        },
        "type" : "table"
      },
      "table_4" : {
        "parameters" : {
          "borderColor" : "#e0e5ee",
          "borderWidth" : 1,
          "cell" : {
            "backgroundColor" : "#ffffff",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "columnProperties" : { },
          "columns" : [ ],
          "customBulkActions" : [ ],
          "exploreLink" : true,
          "header" : {
            "backgroundColor" : "#f4f6f9",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "innerMajorBorderColor" : "#a8b7c7",
          "innerMinorBorderColor" : "#e0e5ee",
          "mode" : "fittocontainer",
          "numberOfLines" : 1,
          "showActionMenu" : true,
          "showRowIndexColumn" : false,
          "step" : "Overview_Details_1",
          "verticalPadding" : 8
        },
        "type" : "table"
      },
      "pillbox_2" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 10,
          "selectedTab" : {
            "backgroundColor" : "rgb(51, 87, 121)",
            "borderColor" : "rgb(51, 87, 121)",
            "borderEdges" : [
              "all"
            ],
            "borderWidth" : 0,
            "textColor" : "#FFFFFF"
          },
          "showActionMenu" : false,
          "step" : "REVENUE_1",
          "textColor" : "rgb(198, 211, 225)"
        },
        "type" : "pillbox"
      },
      "link_7" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f"
          },
          "destinationType" : "page",
          "fontSize" : 16,
          "includeState" : false,
          "text" : "ACCOUNTS IN FOCUS",
          "textAlignment" : "center",
          "textColor" : "#0D34B6"
        },
        "type" : "link"
      },
      "pillbox_1" : {
        "parameters" : {
          "compact" : false,
          "displayTemplate" : "[]",
          "exploreLink" : false,
          "fontSize" : 10,
          "selectedTab" : {
            "backgroundColor" : "rgb(51, 87, 121)",
            "borderColor" : "rgb(51, 87, 121)",
            "borderEdges" : [
              "all"
            ],
            "borderWidth" : 0,
            "textColor" : "#C6D3E1"
          },
          "showActionMenu" : false,
          "step" : "DateFilter_Static_1",
          "textColor" : "rgb(198, 211, 225)"
        },
        "type" : "pillbox"
      },
      "link_8" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "32e04838-d3ff-4554-b350-dbf372b7b843"
          },
          "destinationType" : "page",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "OVERVIEW",
          "textAlignment" : "center",
          "textColor" : "rgb(0, 112, 210)"
        },
        "type" : "link"
      },
      "pillbox_4" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 10,
          "selectedTab" : {
            "backgroundColor" : "#335779",
            "borderColor" : "rgb(51, 87, 121)",
            "borderEdges" : [
              "all"
            ],
            "borderWidth" : 0,
            "textColor" : "#C6D3E1"
          },
          "showActionMenu" : false,
          "step" : "static_1",
          "textColor" : "#E6ECF2"
        },
        "type" : "pillbox"
      },
      "link_5" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "32e04838-d3ff-4554-b350-dbf372b7b843"
          },
          "destinationType" : "page",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "OVERVIEW",
          "textAlignment" : "center",
          "textColor" : "rgb(84, 105, 141)"
        },
        "type" : "link"
      },
      "link_6" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f"
          },
          "destinationType" : "page",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "ACCOUNTS IN FOCUS",
          "textAlignment" : "center",
          "textColor" : "rgb(0, 112, 210)"
        },
        "type" : "link"
      },
      "pillbox_3" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 12,
          "selectedTab" : {
            "backgroundColor" : "#335779",
            "borderColor" : "rgb(51, 87, 121)",
            "borderEdges" : [
              "all"
            ],
            "borderWidth" : 1,
            "textColor" : "#C6D3E1"
          },
          "showActionMenu" : false,
          "step" : "CLV_1",
          "textColor" : "#E6ECF2"
        },
        "type" : "pillbox"
      },
      "pillbox_6" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 10,
          "selectedTab" : {
            "backgroundColor" : "#0070D2",
            "borderColor" : "#C6D3E1",
            "borderEdges" : [
              "all"
            ],
            "borderWidth" : 1,
            "textColor" : "#FFFFFF"
          },
          "showActionMenu" : true,
          "step" : "AccountsToggle_1",
          "textColor" : "#0070D2"
        },
        "type" : "pillbox"
      },
      "pillbox_5" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 10,
          "selectedTab" : {
            "backgroundColor" : "#335779",
            "borderColor" : "rgb(51, 87, 121)",
            "borderEdges" : [
              "all"
            ],
            "borderWidth" : 1,
            "textColor" : "#C6D3E1"
          },
          "showActionMenu" : false,
          "step" : "static_2",
          "textColor" : "#E6ECF2"
        },
        "type" : "pillbox"
      },
      "pillbox_8" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 12,
          "selectedTab" : {
            "backgroundColor" : "#335779",
            "borderColor" : "rgb(51, 87, 121)",
            "borderEdges" : [
              "all"
            ],
            "borderWidth" : 1,
            "textColor" : "#C6D3E1"
          },
          "showActionMenu" : false,
          "step" : "AccountsToggle_1",
          "textColor" : "#C6D3E1"
        },
        "type" : "pillbox"
      }
    }
  }
}