{
  "name" : "Key_Account_Manager_Home_tp",
  "label" : "Key Account Manager Home",
  "folder" : {
    "id" : "${App.Folder.Id}"
  },
  "dateVersion" : 1,
  "mobileDisabled" : false,
  "xmd" : {
    "measures" : [
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "C",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "linear-gradient(to bottom, #0D34B6, #0D34B6)",
                  "bin" : "*"
                },
                {
                  "formatValue" : "linear-gradient(to bottom, #0D34B6, #0D34B6)",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "field" : "Average_realization__1.C",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Compliance",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "linear-gradient(to bottom, #E84340, #B50E03)",
                  "bin" : "*"
                },
                {
                  "formatValue" : "linear-gradient(to bottom, #FFCD95, #E8963B)",
                  "bin" : "0.8"
                },
                {
                  "formatValue" : "linear-gradient(to bottom, #5ECF06, #0A8B23)",
                  "bin" : "0.95"
                }
              ]
            }
          }
        },
        "field" : "Top_performing_sales_1.Compliance",
        "format" : { }
      },
      {
        "conditionalFormatting" : { },
        "field" : "Best_Performing_Prod_1.A",
        "format" : { }
      },
      {
        "conditionalFormatting" : { },
        "field" : "Best_Performing_Prod_1.B",
        "format" : { }
      },
      {
        "conditionalFormatting" : { },
        "field" : "Best_Performing_Prod_1.C",
        "format" : { }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Demand Shortfall",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#00B531",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#B50E03",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "field" : "Demand_shortfall_CM_1.Demand Shortfall",
        "format" : { }
      }
    ],
    "derivedDimensions" : [ ],
    "organizations" : [ ],
    "showDetailsDefaultFields" : [ ],
    "dates" : [ ],
    "derivedMeasures" : [ ],
    "dimensions" : [
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "C",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "linear-gradient(to bottom, #0D34B6, #0D34B6)",
                  "bin" : "*"
                },
                {
                  "formatValue" : "linear-gradient(to bottom, #0D34B6, #0D34B6)",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "salesforceActions" : [ ],
        "field" : "Average_realization__1.ALL",
        "members" : [ ],
        "customActions" : [ ]
      },
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Compliance",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "linear-gradient(to bottom, #E84340, #B50E03)",
                  "bin" : "*"
                },
                {
                  "formatValue" : "linear-gradient(to bottom, #FFCD95, #E8963B)",
                  "bin" : "0.8"
                },
                {
                  "formatValue" : "linear-gradient(to bottom, #5ECF06, #0A8B23)",
                  "bin" : "0.95"
                }
              ]
            }
          }
        },
        "salesforceActions" : [ ],
        "field" : "Top_performing_sales_1.ALL",
        "members" : [ ],
        "customActions" : [ ]
      },
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Demand Shortfall",
            "type" : "multiple",
            "parameters" : {
              "bins" : [
                {
                  "formatValue" : "#00B531",
                  "bin" : "*"
                },
                {
                  "formatValue" : "#B50E03",
                  "bin" : "0"
                }
              ]
            }
          }
        },
        "salesforceActions" : [ ],
        "field" : "Demand_shortfall_CM_1.ALL",
        "members" : [ ],
        "customActions" : [ ]
      }
    ]
  },
  "state" : {
    "dataSourceLinks" : [ ],
    "filters" : [ ],
    "gridLayouts" : [
      {
        "name" : "Default",
        "numColumns" : 50,
        "pages" : [
          {
            "label" : "Key Account Manager Home",
            "name" : "4ec1a3dd-8f8b-4e17-91dc-ba74c02825ad",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_1",
                "row" : 0,
                "rowspan" : 9,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(202, 165, 55)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 13,
                "column" : 12,
                "name" : "text_1",
                "row" : 2,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 16,
                "column" : 12,
                "name" : "text_2",
                "row" : 4,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 16,
                "column" : 10,
                "name" : "text_3",
                "row" : 11,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 10,
                "name" : "container_3",
                "row" : 15,
                "rowspan" : 39,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 10,
                "name" : "text_6",
                "row" : 17,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "text_7",
                "row" : 20,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "text_10",
                "row" : 26,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 5,
                "column" : 10,
                "name" : "number_2",
                "row" : 31,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 19,
                "name" : "number_4",
                "row" : 31,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "text_22",
                "row" : 34,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "chart_2",
                "row" : 37,
                "rowspan" : 12,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 14,
                "column" : 10,
                "name" : "link_2",
                "row" : 49,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 26,
                "name" : "container_2",
                "row" : 15,
                "rowspan" : 39,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 26,
                "name" : "text_4",
                "row" : 17,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "text_5",
                "row" : 20,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "text_8",
                "row" : 26,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 29,
                "name" : "number_1",
                "row" : 31,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "text_9",
                "row" : 34,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "chart_1",
                "row" : 37,
                "rowspan" : 11,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 14,
                "column" : 26,
                "name" : "link_1",
                "row" : 49,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 10,
                "name" : "text_11",
                "row" : 57,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 10,
                "name" : "container_5",
                "row" : 61,
                "rowspan" : 39,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 10,
                "name" : "text_14",
                "row" : 63,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "text_18",
                "row" : 66,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "text_23",
                "row" : 73,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "table_1",
                "row" : 78,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "text_24",
                "row" : 84,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "chart_3",
                "row" : 88,
                "rowspan" : 6,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 14,
                "column" : 10,
                "name" : "link_3",
                "row" : 95,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 26,
                "name" : "container_6",
                "row" : 61,
                "rowspan" : 39,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 26,
                "name" : "text_16",
                "row" : 63,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "text_20",
                "row" : 66,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "text_26",
                "row" : 73,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "number_3",
                "row" : 78,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "text_27",
                "row" : 81,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "chart_4",
                "row" : 84,
                "rowspan" : 10,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 14,
                "column" : 26,
                "name" : "link_4",
                "row" : 95,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 10,
                "name" : "text_12",
                "row" : 103,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 10,
                "name" : "container_8",
                "row" : 107,
                "rowspan" : 41,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 10,
                "name" : "text_13",
                "row" : 109,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "text_17",
                "row" : 112,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "text_25",
                "row" : 120,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "text_29",
                "row" : 125,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "text_28",
                "row" : 128,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "chart_5",
                "row" : 130,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 11,
                "name" : "chart_6",
                "row" : 135,
                "rowspan" : 8,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 14,
                "column" : 10,
                "name" : "link_6",
                "row" : 143,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 26,
                "name" : "container_9",
                "row" : 107,
                "rowspan" : 41,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 26,
                "name" : "text_15",
                "row" : 109,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "text_19",
                "row" : 112,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#C6D3E1",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "text_30",
                "row" : 120,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "text_31",
                "row" : 127,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 12,
                "column" : 27,
                "name" : "table_2",
                "row" : 132,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 14,
                "column" : 26,
                "name" : "link_5",
                "row" : 143,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 7,
                "column" : 4,
                "name" : "text_21",
                "row" : 151,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 3,
                "column" : 9,
                "name" : "image_2",
                "row" : 1,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgba(255, 255, 255, 0.1)",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 4,
                "column" : 15,
                "name" : "text_32",
                "row" : 31,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              }
            ]
          }
        ],
        "rowHeight" : "fine",
        "selectors" : [ ],
        "style" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "backgroundColor" : "rgb(230, 236, 242)",
          "cellSpacingX" : 0,
          "cellSpacingY" : 0,
          "fit" : "original",
          "gutterColor" : "#C5D3E0"
        },
        "version" : 1.0
      }
    ],
    "layouts" : [ ],
    "steps" : {
      "Best_Performing_Prod_1" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "label" : "Best Performing Product",
        "query" : {
          "query" : {
            "measures" : [
              [
                "sum",
                "DerivedPlannedAmount",
                "A"
              ],
              [
                "sum",
                "DerivedActualAmount",
                "B"
              ],
              [
                "count",
                "*",
                "C"
              ],
              [
                "sum",
                "ActualQuantity",
                "D"
              ],
              [
                "count",
                "*",
                "E"
              ]
            ],
            "columns" : [
              {
                "query" : {
                  "measures" : [
                    [
                      "sum",
                      "DerivedPlannedAmount"
                    ]
                  ],
                  "limit" : 1,
                  "groups" : [
                    "SalesAgreementProduct.Name"
                  ]
                },
                "header" : "Planned Revenue"
              },
              {
                "query" : {
                  "measures" : [
                    [
                      "sum",
                      "DerivedActualAmount"
                    ]
                  ],
                  "limit" : 1,
                  "groups" : [
                    "SalesAgreementProduct.Name"
                  ],
                  "order" : [
                    [
                      -1,
                      {
                        "ascending" : false,
                        "inner" : false
                      }
                    ]
                  ]
                },
                "header" : "Actual Revenue"
              },
              {
                "query" : {
                  "measures" : [
                    [
                      "count",
                      "*"
                    ]
                  ],
                  "limit" : 1,
                  "groups" : [
                    "SalesAgreementProduct.Name"
                  ],
                  "formula" : "B/A"
                },
                "header" : "Realization"
              },
              {
                "query" : {
                  "measures" : [
                    [
                      "sum",
                      "ActualQuantity"
                    ]
                  ],
                  "limit" : 1,
                  "groups" : [
                    "SalesAgreementProduct.Name"
                  ]
                }
              },
              {
                "query" : {
                  "measures" : [
                    [
                      "count",
                      "*"
                    ]
                  ],
                  "limit" : 1,
                  "groups" : [
                    "SalesAgreementProduct.Name"
                  ],
                  "formula" : "B/D"
                },
                "header" : "Avg Price"
              }
            ],
            "groups" : [
              "SalesAgreementProduct.Name"
            ],
            "filters" : [
              [
                "SalesAgreementProduct.SalesAgreement.StatusCode",
                [
                  "Activated"
                ],
                "in"
              ]
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "none",
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : {
          "options" : { },
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [
              "SalesAgreementProduct.Name",
              "A",
              "B",
              "C"
            ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "maxColumnWidth" : 300,
            "minColumnWidth" : 40,
            "mode" : "variable",
            "numberOfLines" : 1,
            "showActionMenu" : true,
            "showRowIndexColumn" : false,
            "totals" : true,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "Min___Max_dates_for__1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Min & Max dates for MTD",
        "numbers" : [
          "Min",
          "Max"
        ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = group q by all;\nq = foreach q generate (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400) as 'Min',\ndate_to_epoch(now()) as 'Max';",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Top_performing_sales_2" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Top performing sales agreement this year",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nall_slaps = filter all_slaps by 'SalesAgreementProduct.SalesAgreement.StatusCode' == \"Activated\";\nvalid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= 1566383457;\nvalid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= 1546300800;\nvalid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\";\nStart = foreach valid_slaps generate 1546300800 as 'Start', 1566383457 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= 1546300800) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate(1546300800),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 1546300800) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate(1546300800),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= 1546300800 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 1566383457 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= 1546300800 &&  'ActualEndDate_sec_epoch' >= 1566383457 && date_to_epoch(now()) >= 1566383457 && 1566383457 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate(1566383457))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= 1546300800 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 1566383457 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= 1546300800 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && 1566383457 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < 1546300800 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate(1546300800))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate(1546300800))) && 1566383457 >= date_to_epoch(month_last_day(toDate(1546300800))) && 1546300800 <= date_to_epoch(now()) then (daysBetween(toDate(1546300800),month_last_day(toDate(1546300800)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < 1546300800 &&  'ActualEndDate_sec_epoch' >= 1566383457 && date_to_epoch(now())>= 1566383457 && 1566383457 <= date_to_epoch(month_last_day(toDate(1546300800))) && 1546300800 <= date_to_epoch(now()) then (daysBetween(toDate(1546300800), toDate(1566383457))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < 1546300800 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate(1546300800))) && 1566383457 >= date_to_epoch(now()) && 1546300800 <= date_to_epoch(now()) then (daysBetween(toDate(1546300800), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < 1546300800 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate(1546300800))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && 1566383457 >= 'ActualEndDate_sec_epoch' && 1546300800 <= date_to_epoch(now()) then (daysBetween(toDate(1546300800), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= 1546300800) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 1566383457 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 1546300800) && ('ActualEndDate_sec_epoch' >= 1566383457) && 1566383457 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate(1566383457))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 1546300800) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate(1546300800)))) && 1566383457 >= date_to_epoch(month_last_day(toDate(1546300800))) then (daysBetween(toDate(1546300800),month_last_day(toDate(1546300800)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 1546300800) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate(1546300800)))) && 1566383457 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate(1546300800),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 1546300800) && (1566383457 <= date_to_epoch(month_last_day(toDate(1546300800)))) && 1566383457 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate(1546300800),toDate(1566383457))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_actual = foreach valid_slaps generate 1546300800 as 'Start', 1566383457 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < 1566383457) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < 1566383457) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate(1566383457),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 1566383457) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < 1566383457) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate(1566383457),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && (1546300800 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= 1566383457) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (1546300800 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= 1566383457) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))) + 86400)))  && (1546300800 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= 1566383457) && (date_to_epoch(now()) >= 1566383457 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))))),toDate(1566383457))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_planned = foreach valid_slaps generate 1546300800 as 'Start', 1566383457 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 1566383457) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate(1566383457),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 1566383457) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate(1566383457),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && (1546300800 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= 1566383457))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))) + 86400)) && (1546300800 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= 1566383457)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))))),toDate(1566383457))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nDataForFill_actual = union Start, End_Value_actual;\nDataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month');\nFilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount';\nDataForFill_planned = union Start, End_Value_planned;\nDataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount';\nFilledData = union FilledData_actual, FilledData_planned;\nresult = group FilledData by ('Id'), valid_slaps by ('Id');\nresult = foreach result generate first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name', sum(FilledData.'Actual Amount') as 'Actual', sum(FilledData.'Planned Amount') as 'Plan';\nresult = group result by ('SalesAgreementProduct.SalesAgreement.Name');\nresult = foreach result generate 'SalesAgreementProduct.SalesAgreement.Name', sum('Actual')/sum('Plan')  as 'Compliance', sum('Actual') as 'Actual', sum('Plan') as 'Plan';\nresult = order result by 'Compliance' desc;\nresult = limit result 1;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "max" : 1,
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "flatgauge",
            "medium" : 33,
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                150,
                80
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "colors" : {
              "mediumColor2" : "#F29946",
              "mediumColor1" : "#FED444",
              "lowColor1" : "#F71979",
              "lowColor2" : "#CC203D",
              "highColor1" : "#7BDE4E",
              "highColor2" : "#169913"
            },
            "columnMap" : {
              "trellis" : [ ],
              "plots" : [
                "Actual"
              ]
            },
            "high" : 66,
            "showActionMenu" : true,
            "min" : 0,
            "valueType" : "compactNumber",
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Demand_shortfall_CM_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Demand shortfall CM by account",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\"; valid_slaps = filter all_slaps by 'ActualEndDate_sec_epoch' <= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now()) >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now())>= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';  result = group Start by ('Id') left, valid_slaps by ('Id'); result = foreach result generate first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum(Start.'Actual Amount') as 'Actual', sum(Start.'Planned Amount') as 'Plan'; result = group result by 'SalesAgreementProduct.SalesAgreement.Account.Name'; result = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name', sum('Actual') as 'Actual', sum('Plan') as 'Plan', (sum('Plan')-sum('Actual')) as 'Demand Shortfall'; result = order result by 'Demand Shortfall' desc;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "vbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "trellis" : [ ],
              "dimensionAxis" : [
                "SalesAgreementProduct.SalesAgreement.Account.Name"
              ],
              "plots" : [
                "Demand Shortfall"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Top_performing_sales_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Top performing sales agreement this year",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nall_slaps = filter all_slaps by 'SalesAgreementProduct.SalesAgreement.StatusCode' == \"Activated\";\nvalid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= 1566383457;\nvalid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= 1546300800;\nvalid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\";\nStart = foreach valid_slaps generate 1546300800 as 'Start', 1566383457 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= 1546300800) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate(1546300800),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 1546300800) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate(1546300800),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= 1546300800 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 1566383457 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= 1546300800 &&  'ActualEndDate_sec_epoch' >= 1566383457 && date_to_epoch(now()) >= 1566383457 && 1566383457 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate(1566383457))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= 1546300800 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 1566383457 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= 1546300800 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && 1566383457 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < 1546300800 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate(1546300800))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate(1546300800))) && 1566383457 >= date_to_epoch(month_last_day(toDate(1546300800))) && 1546300800 <= date_to_epoch(now()) then (daysBetween(toDate(1546300800),month_last_day(toDate(1546300800)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < 1546300800 &&  'ActualEndDate_sec_epoch' >= 1566383457 && date_to_epoch(now())>= 1566383457 && 1566383457 <= date_to_epoch(month_last_day(toDate(1546300800))) && 1546300800 <= date_to_epoch(now()) then (daysBetween(toDate(1546300800), toDate(1566383457))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < 1546300800 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate(1546300800))) && 1566383457 >= date_to_epoch(now()) && 1546300800 <= date_to_epoch(now()) then (daysBetween(toDate(1546300800), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < 1546300800 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate(1546300800))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && 1566383457 >= 'ActualEndDate_sec_epoch' && 1546300800 <= date_to_epoch(now()) then (daysBetween(toDate(1546300800), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= 1546300800) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 1566383457 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 1546300800) && ('ActualEndDate_sec_epoch' >= 1566383457) && 1566383457 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate(1566383457))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 1546300800) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate(1546300800)))) && 1566383457 >= date_to_epoch(month_last_day(toDate(1546300800))) then (daysBetween(toDate(1546300800),month_last_day(toDate(1546300800)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 1546300800) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate(1546300800)))) && 1566383457 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate(1546300800),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 1546300800) && (1566383457 <= date_to_epoch(month_last_day(toDate(1546300800)))) && 1566383457 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate(1546300800),toDate(1566383457))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_actual = foreach valid_slaps generate 1546300800 as 'Start', 1566383457 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < 1566383457) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < 1566383457) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate(1566383457),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 1566383457) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < 1566383457) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate(1566383457),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && (1546300800 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= 1566383457) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (1546300800 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= 1566383457) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))) + 86400)))  && (1546300800 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= 1566383457) && (date_to_epoch(now()) >= 1566383457 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))))),toDate(1566383457))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_planned = foreach valid_slaps generate 1546300800 as 'Start', 1566383457 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 1566383457) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate(1566383457),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 1566383457) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate(1566383457),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && (1546300800 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= 1566383457))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))) + 86400)) && (1546300800 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= 1566383457)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate(1566383457))) - 2764800)))))),toDate(1566383457))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nDataForFill_actual = union Start, End_Value_actual;\nDataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month');\nFilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount';\nDataForFill_planned = union Start, End_Value_planned;\nDataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount';\nFilledData = union FilledData_actual, FilledData_planned;\nresult = group FilledData by ('Id'), valid_slaps by ('Id');\nresult = foreach result generate first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name', sum(FilledData.'Actual Amount') as 'Actual', sum(FilledData.'Planned Amount') as 'Plan';\nresult = group result by ('SalesAgreementProduct.SalesAgreement.Name');\nresult = foreach result generate 'SalesAgreementProduct.SalesAgreement.Name', sum('Actual')/sum('Plan')  as 'Compliance';\nresult = order result by 'Compliance' desc;\nresult = limit result 1;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "max" : 1,
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "flatgauge",
            "medium" : 33,
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                150,
                80
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "colors" : {
              "mediumColor2" : "#F29946",
              "mediumColor1" : "#FED444",
              "lowColor1" : "#F71979",
              "lowColor2" : "#CC203D",
              "highColor1" : "#7BDE4E",
              "highColor2" : "#169913"
            },
            "columnMap" : {
              "trellis" : [ ],
              "plots" : [
                "Compliance"
              ]
            },
            "high" : 66,
            "showActionMenu" : true,
            "min" : 0,
            "valueType" : "compactNumber",
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Average_realization__1" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "label" : "Average realization across products",
        "query" : {
          "query" : {
            "measures" : [
              [
                "sum",
                "DerivedPlannedAmount",
                "A"
              ],
              [
                "sum",
                "DerivedActualAmount",
                "B"
              ],
              [
                "count",
                "*",
                "C"
              ]
            ],
            "columns" : [
              {
                "query" : {
                  "measures" : [
                    [
                      "sum",
                      "DerivedPlannedAmount"
                    ]
                  ],
                  "limit" : 1
                },
                "header" : "Planned Amount"
              },
              {
                "query" : {
                  "measures" : [
                    [
                      "sum",
                      "DerivedActualAmount"
                    ]
                  ],
                  "limit" : 1,
                  "order" : [
                    [
                      -1,
                      {
                        "ascending" : false,
                        "inner" : false
                      }
                    ]
                  ]
                },
                "header" : "Revenue"
              },
              {
                "query" : {
                  "measures" : [
                    [
                      "count",
                      "*"
                    ]
                  ],
                  "limit" : 1,
                  "formula" : "B/A"
                },
                "header" : "Realization"
              }
            ],
            "filters" : [
              [
                "SalesAgreementProduct.SalesAgreement.StatusCode",
                [
                  "Activated"
                ],
                "in"
              ]
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "single",
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "max" : 1,
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "flatgauge",
            "medium" : 33,
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "colors" : {
              "mediumColor2" : "#F29946",
              "mediumColor1" : "#FED444",
              "lowColor1" : "#F71979",
              "lowColor2" : "#CC203D",
              "highColor1" : "#7BDE4E",
              "highColor2" : "#169913"
            },
            "high" : 66,
            "columnMap" : {
              "trellis" : [ ],
              "plots" : [
                "C"
              ]
            },
            "showActionMenu" : true,
            "min" : 0,
            "valueType" : "compactNumber",
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Min___Max_Date_for_C_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Min & Max Dates for Current Month",
        "numbers" : [
          "Min",
          "Max"
        ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = group q by all;\nq = foreach q generate (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400) as 'Min', date_to_epoch(month_last_day(now())) as 'Max';",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Total_Demand_shortfa_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Total Demand shortfall Current Month",
        "numbers" : [
          "Compliance",
          "Demand Shortfall",
          "sum_Total Outstanding Revenue"
        ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\"; valid_slaps = filter all_slaps by 'ActualEndDate_sec_epoch' <= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now()) >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now())>= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; result = group Start by 'Id' left, valid_slaps by 'Id'; result = foreach result generate sum(Start.'Planned Amount') as 'Planned Amount', sum(Start.'Actual Amount') as 'Actual Amount', sum(valid_slaps.'DerivedPlannedAmount') as 'DerivedPlannedAmount', sum(valid_slaps.'DerivedActualAmount') as 'DerivedActualAmount'; result = group result by all; result = foreach result generate sum('DerivedPlannedAmount')-sum('DerivedActualAmount') as 'sum_Total Outstanding Revenue',(sum('Planned Amount')-sum('Actual Amount')) as 'Demand Shortfall', sum('Actual Amount')/sum('Planned Amount') as 'Compliance';",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [
          "SalesAgreementProduct.SalesAgreement.Account.Name"
        ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "vbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Compliance_over_time_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Compliance over time for Account with lowest compliance",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nall_slaps = filter all_slaps by 'SalesAgreementProduct.SalesAgreement.Account.Name' == \"{{coalesce(cell(Lowest_compliance_YT_1.result,0,\"SalesAgreementProduct.SalesAgreement.Account.Name\"),\" \").asObject()}}\";\nvalid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}};\nvalid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}};\nvalid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\";\nStart = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now())>= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_actual = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))))),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_planned = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}})) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))))),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nDataForFill_actual = union Start, End_Value_actual;\nDataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month');\nFilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount';\nDataForFill_planned = union Start, End_Value_planned;\nDataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount';\nFilledData = union FilledData_actual, FilledData_planned;\nresult = group FilledData by ('Id','Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Planned Amount') as 'Plan', (sum('Planned Amount')-sum('Actual Amount')) as 'Demand Shortfall';\nresult = group result by ('Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actual')/sum('Plan') as 'Compliance';",
        "receiveFacet" : true,
        "selectMode" : "none",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "showPoints" : false,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time",
            "missingValue" : "connect",
            "dashLine" : {
              "measures" : "",
              "showDashLine" : false
            },
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "split" : [ ],
              "timeAxis" : [
                "StartDate_Year~~~StartDate_Month"
              ],
              "trellis" : [ ],
              "plots" : [
                "Compliance"
              ]
            },
            "fillArea" : true,
            "showActionMenu" : true,
            "showZero" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "valueType" : "none",
            "theme" : "wave",
            "applyConditionalFormatting" : true,
            "drawArea" : {
              "measure" : "",
              "showDrawArea" : false,
              "bounding1" : "",
              "bounding2" : ""
            }
          },
          "type" : "chart"
        }
      },
      "Top_inactive_account_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Top inactive account",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\"; expired_thisyear = filter q by date('SalesAgreementProduct.SalesAgreement.EndDate_Year', 'SalesAgreementProduct.SalesAgreement.EndDate_Month', 'SalesAgreementProduct.SalesAgreement.EndDate_Day') in [\"current day - 12 months\"..\"current day\"]; expired_thisyear = filter expired_thisyear by 'SalesAgreementProduct.SalesAgreement.StatusCode' == \"Expired\"; good_accounts_1 = filter q by date('SalesAgreementProduct.SalesAgreement.EndDate_Year', 'SalesAgreementProduct.SalesAgreement.EndDate_Month', 'SalesAgreementProduct.SalesAgreement.EndDate_Day') in [\"current year\"..]; good_accounts = filter good_accounts_1 by 'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Activated\", \"Approved\"]; accounts_with_drafts =  filter good_accounts_1 by 'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\"]; result = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name' left, expired_thisyear by 'SalesAgreementProduct.SalesAgreement.Account.Name' left, good_accounts by 'SalesAgreementProduct.SalesAgreement.Account.Name' left, accounts_with_drafts by 'SalesAgreementProduct.SalesAgreement.Account.Name'; result = foreach result generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum(q.'DerivedActualAmount') as 'Past Revenue', unique(q.'SalesAgreementProduct.SalesAgreement.Name') as '# Past Agreements', coalesce(count(expired_thisyear),0) as 'Expired_Flag', coalesce(count(good_accounts),0) as 'ValidAgreements_Flag', toDate(max(expired_thisyear.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch')) as 'SalesAgreementProduct.SalesAgreement.EndDate', unique(accounts_with_drafts.'SalesAgreementProduct.SalesAgreement.Name') as '# Draft Agreements'; result = filter result by 'Expired_Flag' > 0 && 'ValidAgreements_Flag' == 0; result = order result by ('Past Revenue' desc); result = limit result 1;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "borderColor" : "#e0e5ee",
            "borderWidth" : 1,
            "cell" : {
              "backgroundColor" : "#ffffff",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "columnProperties" : { },
            "columns" : [
              "Past Revenue",
              "# Past Agreements",
              "SalesAgreementProduct.SalesAgreement.EndDate",
              "# Draft Agreements"
            ],
            "customBulkActions" : [ ],
            "header" : {
              "backgroundColor" : "#f4f6f9",
              "fontColor" : "#16325c",
              "fontSize" : 12
            },
            "innerMajorBorderColor" : "#a8b7c7",
            "innerMinorBorderColor" : "#e0e5ee",
            "maxColumnWidth" : 300,
            "minColumnWidth" : 40,
            "mode" : "variable",
            "numberOfLines" : 1,
            "showActionMenu" : true,
            "showRowIndexColumn" : false,
            "verticalPadding" : 8
          },
          "type" : "table"
        }
      },
      "Avg_Price_for_best_p_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Avg Price for best performing product across time",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\"; all_slaps = filter all_slaps by 'SalesAgreementProduct.SalesAgreement.StatusCode' == \"Activated\"; valid_slaps = filter all_slaps by 'SalesAgreementProduct.Name' == \"{{cell(Best_Performing_Prod_1.result,0,\"SalesAgreementProduct.Name\").asObject()}}\"; valid_slaps = filter valid_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now())>= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))))),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', (case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end)/'SalesPrice' as 'Quantity'; result = group FilledData_actual by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Quantity') as 'Quantity'; result = group result by ('Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', sum('Quantity') as 'Quantity', sum('Actual') as 'Actual', (sum('Actual')/sum('Quantity')) as 'Avg Price';",
        "receiveFacet" : true,
        "selectMode" : "none",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "showPoints" : false,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time",
            "missingValue" : "connect",
            "dashLine" : {
              "measures" : "",
              "showDashLine" : false
            },
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "split" : [ ],
              "timeAxis" : [
                "StartDate_Year~~~StartDate_Month"
              ],
              "trellis" : [ ],
              "plots" : [
                "Avg Price"
              ]
            },
            "fillArea" : true,
            "showActionMenu" : true,
            "showZero" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "valueType" : "none",
            "theme" : "wave",
            "applyConditionalFormatting" : true,
            "drawArea" : {
              "measure" : "",
              "showDrawArea" : false,
              "bounding1" : "",
              "bounding2" : ""
            }
          },
          "type" : "chart"
        }
      },
      "Lowest_compliance_YT_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Lowest compliance YTD",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now())>= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';  result = group Start by ('Id') left, valid_slaps by ('Id'); result = foreach result generate first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum(Start.'Actual Amount') as 'Actual', sum(Start.'Planned Amount') as 'Plan'; result = group result by 'SalesAgreementProduct.SalesAgreement.Account.Name'; result = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name', sum('Actual') as 'Actual', sum('Plan') as 'Plan', (sum('Actual') / sum('Plan')) as 'Compliance'; result = order result by 'Compliance' asc; result = limit result 1;",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Min___Max_Dates_for__1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Min & Max Dates for Current Quarter",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = group q by all;\nq = foreach q generate (date_to_epoch(month_last_day(toDate(date_to_epoch(now()) - ( day_in_quarter(now()) * 86400 ) - 96400))) + 86400) as 'Min', date_to_epoch(quarter_last_day(now())) as 'Max';",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Min_and_Max_Dates_fo_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Min and Max Dates for CYTD",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\nq = group q by all;\nq = foreach q generate date_to_epoch(toDate(date_to_string(now(),\"yyyy\")+\"-01-01\",\"yyyy-MM-dd\")) as 'Min', date_to_epoch(now()) as 'Max';",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      }
    },
    "widgetStyle" : {
      "backgroundColor" : "#FFFFFF",
      "borderColor" : "#E6ECF2",
      "borderEdges" : [ ],
      "borderRadius" : 0,
      "borderWidth" : 1
    },
    "widgets" : {
      "text_18" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "Which products are doing well with my accounts? Which products are contributing to revenue leak?",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_17" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "What is the compliance rate for my active agreements?\nWhat are my upcoming renewals and\nwhat is my revenue loss due to cancellations?",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_19" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "Which accounts do not have active or approved agreements? Help me recommend products to my accounts.",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_14" : {
        "parameters" : {
          "fontSize" : 20,
          "showActionMenu" : true,
          "text" : "Product Performance",
          "textAlignment" : "center",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "text_13" : {
        "parameters" : {
          "fontSize" : 20,
          "showActionMenu" : true,
          "text" : "Sales Agreements Insights",
          "textAlignment" : "center",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "text_16" : {
        "parameters" : {
          "fontSize" : 20,
          "showActionMenu" : true,
          "text" : "Pricing Insights",
          "textAlignment" : "center",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "text_15" : {
        "parameters" : {
          "fontSize" : 20,
          "showActionMenu" : true,
          "text" : "Whitespace Analysis",
          "textAlignment" : "center",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "text_10" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Outstanding Revenue",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_12" : {
        "parameters" : {
          "fontSize" : 18,
          "showActionMenu" : true,
          "text" : "Protect and Grow My Business",
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "text_11" : {
        "parameters" : {
          "fontSize" : 18,
          "showActionMenu" : true,
          "text" : "Track My Product Portfolio",
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "container_1" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_2" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_3" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_5" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_3" : {
        "parameters" : {
          "fontSize" : 18,
          "showActionMenu" : true,
          "text" : "Understand My Accounts",
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "container_6" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "chart_6" : {
        "parameters" : {
          "max" : "{{coalesce(cell(Top_performing_sales_2.result,0,\"Plan\"),0).asObject()}}",
          "legend" : {
            "showHeader" : true,
            "show" : false,
            "position" : "right-top",
            "inside" : false
          },
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "flatgauge",
          "exploreLink" : true,
          "medium" : 33,
          "title" : {
            "fontSize" : 12,
            "subtitleFontSize" : 11,
            "label" : "Revenue YTD",
            "align" : "left",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              150,
              80
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "colors" : {
            "mediumColor2" : "#F29946",
            "mediumColor1" : "#FED444",
            "lowColor1" : "#F71979",
            "lowColor2" : "#CC203D",
            "highColor1" : "#7BDE4E",
            "highColor2" : "#169913"
          },
          "high" : 66,
          "columnMap" : {
            "trellis" : [ ],
            "plots" : [
              "Actual"
            ]
          },
          "showActionMenu" : true,
          "min" : 0,
          "valueType" : "compactNumber",
          "theme" : "wave",
          "step" : "Top_performing_sales_2",
          "referenceLines" : [
            {
              "color" : "rgb(0, 161, 224)",
              "label" : "Planned Revenue YTD",
              "value" : "{{coalesce(cell(Top_performing_sales_2.result,0,\"Plan\"),0).asObject()}}"
            }
          ],
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_2" : {
        "parameters" : {
          "fontSize" : 24,
          "showActionMenu" : true,
          "text" : "Key Account Manager Home",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "chart_5" : {
        "parameters" : {
          "max" : 1,
          "legend" : {
            "showHeader" : true,
            "show" : false,
            "position" : "right-top",
            "inside" : false
          },
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "flatgauge",
          "exploreLink" : true,
          "medium" : 33,
          "title" : {
            "fontSize" : 12,
            "subtitleFontSize" : 11,
            "label" : "Compliance YTD",
            "align" : "left",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              150,
              80
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "colors" : {
            "mediumColor2" : "#F29946",
            "mediumColor1" : "#FED444",
            "lowColor1" : "#F71979",
            "lowColor2" : "#CC203D",
            "highColor1" : "#7BDE4E",
            "highColor2" : "#169913"
          },
          "high" : 66,
          "columnMap" : {
            "trellis" : [ ],
            "plots" : [
              "Compliance"
            ]
          },
          "showActionMenu" : true,
          "min" : 0,
          "valueType" : "compactNumber",
          "theme" : "wave",
          "step" : "Top_performing_sales_1",
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_5" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "Help me zoom into the business and\nrelationship with an account",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "container_8" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_4" : {
        "parameters" : {
          "fontSize" : 20,
          "showActionMenu" : true,
          "text" : "Account Insights",
          "textAlignment" : "center",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "container_9" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_7" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "What does my business look like?\nWhich accounts should I call today?",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "chart_2" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : false,
            "customSize" : "auto",
            "position" : "right-top",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "vbar",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "binValues" : false,
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "columnMap" : {
            "trellis" : [ ],
            "dimensionAxis" : [
              "SalesAgreementProduct.SalesAgreement.Account.Name"
            ],
            "plots" : [
              "Demand Shortfall"
            ]
          },
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : false,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "light",
          "step" : "Demand_shortfall_CM_1",
          "dimensionAxis" : {
            "showTitle" : false,
            "customSize" : "auto",
            "showAxis" : false,
            "title" : "",
            "icons" : {
              "useIcons" : false,
              "iconProps" : {
                "fit" : "cover",
                "column" : "",
                "type" : "round",
                "parameters" : { }
              }
            }
          },
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_6" : {
        "parameters" : {
          "fontSize" : 20,
          "showActionMenu" : true,
          "text" : "Accounts Health",
          "textAlignment" : "center",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "chart_1" : {
        "parameters" : {
          "showPoints" : false,
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : true,
            "customSize" : "auto",
            "position" : "right-top",
            "inside" : false
          },
          "axisMode" : "multi",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : [
              "Compliance"
            ],
            "showNullValues" : true,
            "showPercentage" : true,
            "customText" : "Date (Year-Month) :  [StartDate_Year~~~StartDate_Month]",
            "showDimensions" : false,
            "showMeasures" : true,
            "customizeTooltip" : true,
            "dimensions" : [
              "StartDate_Year~~~StartDate_Month"
            ]
          },
          "visualizationType" : "time",
          "missingValue" : "connect",
          "dashLine" : {
            "measures" : "",
            "showDashLine" : false
          },
          "exploreLink" : true,
          "timeAxis" : {
            "showTitle" : false,
            "showAxis" : false,
            "title" : "Date (Year-Month)"
          },
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "fillArea" : true,
          "columnMap" : {
            "split" : [ ],
            "timeAxis" : [
              "StartDate_Year~~~StartDate_Month"
            ],
            "trellis" : [ ],
            "plots" : [
              "Compliance"
            ]
          },
          "showActionMenu" : false,
          "showZero" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : false,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "valueType" : "none",
          "theme" : "light",
          "step" : "Compliance_over_time_1",
          "applyConditionalFormatting" : true,
          "drawArea" : {
            "measure" : "",
            "showDrawArea" : false,
            "bounding1" : "",
            "bounding2" : ""
          }
        },
        "type" : "chart"
      },
      "text_9" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "Year Till Date",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "chart_4" : {
        "parameters" : {
          "showPoints" : false,
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : false,
            "customSize" : "auto",
            "position" : "right-top",
            "inside" : false
          },
          "axisMode" : "multi",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : [
              "Quantity",
              "Actual",
              "Avg Price"
            ],
            "showNullValues" : true,
            "showPercentage" : true,
            "customText" : "Date (Year - Month) :  [StartDate_Year~~~StartDate_Month]",
            "showDimensions" : false,
            "showMeasures" : true,
            "customizeTooltip" : true,
            "dimensions" : [
              "StartDate_Year~~~StartDate_Month"
            ]
          },
          "visualizationType" : "time",
          "missingValue" : "connect",
          "dashLine" : {
            "measures" : "",
            "showDashLine" : false
          },
          "exploreLink" : true,
          "timeAxis" : {
            "showTitle" : false,
            "showAxis" : false,
            "title" : ""
          },
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "fillArea" : true,
          "columnMap" : {
            "split" : [ ],
            "timeAxis" : [
              "StartDate_Year~~~StartDate_Month"
            ],
            "trellis" : [ ],
            "plots" : [
              "Avg Price"
            ]
          },
          "showActionMenu" : false,
          "showZero" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : false,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "valueType" : "none",
          "theme" : "light",
          "step" : "Avg_Price_for_best_p_1",
          "applyConditionalFormatting" : true,
          "drawArea" : {
            "measure" : "",
            "showDrawArea" : false,
            "bounding1" : "",
            "bounding2" : ""
          }
        },
        "type" : "chart"
      },
      "text_8" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Lowest Compliance Across my Accounts",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "chart_3" : {
        "parameters" : {
          "max" : 1,
          "legend" : {
            "showHeader" : true,
            "show" : false,
            "position" : "right-top",
            "inside" : false
          },
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "flatgauge",
          "exploreLink" : true,
          "medium" : 33,
          "title" : {
            "fontSize" : 12,
            "subtitleFontSize" : 11,
            "label" : "Average demand realization across products",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "colors" : {
            "mediumColor2" : "#F29946",
            "mediumColor1" : "#FED444",
            "lowColor1" : "#F71979",
            "lowColor2" : "#CC203D",
            "highColor1" : "#7BDE4E",
            "highColor2" : "#169913"
          },
          "high" : 66,
          "columnMap" : {
            "trellis" : [ ],
            "plots" : [
              "C"
            ]
          },
          "showActionMenu" : true,
          "min" : 0,
          "valueType" : "compactNumber",
          "theme" : "light",
          "step" : "Average_realization__1",
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_1" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "ANALYTICS FOR MANUFACTURING",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "number_4" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "Compliance",
          "numberColor" : "#091A3E",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Total_Demand_shortfa_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 14
        },
        "type" : "number"
      },
      "number_3" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "E",
          "numberColor" : "#091A3E",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Best_Performing_Prod_1",
          "textAlignment" : "center",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_2" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "sum_Total Outstanding Revenue",
          "numberColor" : "#091A3E",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Total_Demand_shortfa_1",
          "textAlignment" : "right",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_1" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "Compliance",
          "numberColor" : "#091A3E",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Lowest_compliance_YT_1",
          "textAlignment" : "center",
          "title" : "{{cell(Lowest_compliance_YT_1.result,0,\"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}}",
          "titleColor" : "#091A3E",
          "titleSize" : 24
        },
        "type" : "number"
      },
      "image_2" : {
        "parameters" : {
          "alignmentX" : "right",
          "alignmentY" : "center",
          "fit" : "fitheight",
          "image" : {
            "name" : "${App.Images['manufacturing_app_icon2xpng'].Name}",
            "namespace" : "${Org.Namespace}"
          }
        },
        "type" : "image"
      },
      "text_32" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "Compliance @",
          "textAlignment" : "right",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "text_31" : {
        "parameters" : {
          "fontSize" : 20,
          "showActionMenu" : true,
          "text" : "{{coalesce(cell(Top_inactive_account_1.result,0,\"SalesAgreementProduct.SalesAgreement.Account.Name\"),\"--\").asObject()}}",
          "textAlignment" : "center",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "text_30" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Top Account without Active\nor Approved Sales Agreements",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_29" : {
        "parameters" : {
          "fontSize" : 20,
          "showActionMenu" : true,
          "text" : "{{cell(Top_performing_sales_1.result,0,\"SalesAgreementProduct.SalesAgreement.Name\").asObject()}}",
          "textAlignment" : "center",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "text_28" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "Year Till Date",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "link_3" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Product Performance'].Name}",
            "namespace" : "${Org.Namespace}"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "OPEN DASHBOARD",
          "textAlignment" : "center",
          "textColor" : "#0070D2"
        },
        "type" : "link"
      },
      "text_25" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Best Performing Sales Agreement",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_24" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "across agreements active today",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "link_4" : {
        "parameters" : {
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "OPEN DASHBOARD",
          "textAlignment" : "center",
          "textColor" : "#0070D2"
        },
        "type" : "link"
      },
      "link_1" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Account Insights - Agreements Performance'].Name}",
            "namespace" : "${Org.Namespace}"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "OPEN DASHBOARD",
          "textAlignment" : "center",
          "textColor" : "#0070D2"
        },
        "type" : "link"
      },
      "text_27" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "across agreements active today",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "link_2" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Accounts Health'].Name}",
            "namespace" : "${Org.Namespace}"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "OPEN DASHBOARD",
          "textAlignment" : "center",
          "textColor" : "#0070D2"
        },
        "type" : "link"
      },
      "text_26" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Avg Price for {{cell(Best_Performing_Prod_1.result,0,\"SalesAgreementProduct.Name\").asObject()}}",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_21" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "",
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "text_20" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "At what prices do I offer products to my accounts?\nWhat is the price elasticity for the products?",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_23" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Best Performing Product",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_22" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "For agreement-schedules ending this month",
          "textAlignment" : "center",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "table_1" : {
        "parameters" : {
          "borderColor" : "#e0e5ee",
          "borderWidth" : 1,
          "cell" : {
            "backgroundColor" : "#ffffff",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "columnProperties" : { },
          "columns" : [
            "SalesAgreementProduct.Name",
            "A",
            "B",
            "C"
          ],
          "customBulkActions" : [ ],
          "exploreLink" : true,
          "header" : {
            "backgroundColor" : "#f4f6f9",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "innerMajorBorderColor" : "#a8b7c7",
          "innerMinorBorderColor" : "#e0e5ee",
          "mode" : "fittocontainer",
          "numberOfLines" : 1,
          "pivoted" : false,
          "showActionMenu" : true,
          "showRowIndexColumn" : false,
          "step" : "Best_Performing_Prod_1",
          "totals" : true,
          "verticalPadding" : 8
        },
        "type" : "table"
      },
      "table_2" : {
        "parameters" : {
          "borderColor" : "#e0e5ee",
          "borderWidth" : 1,
          "cell" : {
            "backgroundColor" : "#ffffff",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "columnProperties" : { },
          "columns" : [
            "Past Revenue",
            "# Past Agreements",
            "SalesAgreementProduct.SalesAgreement.EndDate",
            "# Draft Agreements"
          ],
          "customBulkActions" : [ ],
          "exploreLink" : true,
          "header" : {
            "backgroundColor" : "#f4f6f9",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "innerMajorBorderColor" : "#a8b7c7",
          "innerMinorBorderColor" : "#e0e5ee",
          "mode" : "fittocontainer",
          "numberOfLines" : 1,
          "pivoted" : false,
          "showActionMenu" : true,
          "showRowIndexColumn" : false,
          "step" : "Top_inactive_account_1",
          "verticalPadding" : 8
        },
        "type" : "table"
      },
      "link_5" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Whitespace Analysis'].Name}",
            "namespace" : "${Org.Namespace}"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "OPEN DASHBOARD",
          "textAlignment" : "center",
          "textColor" : "#0070D2"
        },
        "type" : "link"
      },
      "link_6" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Sales Agreements Insights'].Name}",
            "namespace" : "${Org.Namespace}"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "OPEN DASHBOARD",
          "textAlignment" : "center",
          "textColor" : "#0070D2"
        },
        "type" : "link"
      }
    }
  }
}