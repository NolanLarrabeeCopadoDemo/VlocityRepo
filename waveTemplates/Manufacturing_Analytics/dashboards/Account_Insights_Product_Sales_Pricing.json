{
  "name" : "Account_Insights_Product_Sales_Pricing_tp",
  "label" : "Account Insights - Product Sales & Pricing",
  "folder" : {
    "id" : "${App.Folder.Id}"
  },
  "dateVersion" : 1,
  "mobileDisabled" : false,
  "xmd" : {
    "measures" : [ ],
    "derivedDimensions" : [ ],
    "organizations" : [ ],
    "showDetailsDefaultFields" : [ ],
    "dates" : [ ],
    "derivedMeasures" : [ ],
    "dimensions" : [ ]
  },
  "state" : {
    "dataSourceLinks" : [ ],
    "filters" : [
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.SalesAgreement.Account.Type"
        ],
        "locked" : false,
        "operator" : "in"
      },
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.SalesAgreement.Account.Name"
        ],
        "locked" : false,
        "operator" : "in"
      },
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.Product.Name"
        ],
        "locked" : false,
        "operator" : "in"
      },
      {
        "dataset" : {
          "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
        },
        "dependent" : true,
        "fields" : [
          "SalesAgreementProduct.Product.Family"
        ],
        "locked" : false,
        "operator" : "in"
      }
    ],
    "gridLayouts" : [
      {
        "maxWidth" : 1500,
        "name" : "Default",
        "numColumns" : 50,
        "pages" : [
          {
            "label" : "Products Sales & Pricing",
            "name" : "dcc70e5d-3908-4426-8ac5-f99fe142f5c1",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 10,
                "column" : 0,
                "name" : "container_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 3,
                "name" : "text_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#FFFFFF",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 10,
                "column" : 10,
                "name" : "link_5",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 9,
                "column" : 20,
                "name" : "link_4",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "rgb(0, 112, 210)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 4
                }
              },
              {
                "colspan" : 7,
                "column" : 29,
                "name" : "link_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 14,
                "column" : 36,
                "name" : "container_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "#E6ECF2",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "listselector_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 8,
                "name" : "listselector_2",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 14,
                "name" : "listselector_3",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 20,
                "name" : "listselector_6",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 26,
                "name" : "listselector_4",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 32,
                "name" : "listselector_5",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 38,
                "name" : "listselector_7",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 44,
                "name" : "listselector_8",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_11",
                "row" : 13,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "text_10",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 7,
                "name" : "text_13",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 15,
                "name" : "text_15",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "number_9",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 7,
                "name" : "number_10",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 15,
                "name" : "number_1",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 1,
                "name" : "pillbox_1",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 13,
                "column" : 36,
                "name" : "container_4",
                "row" : 22,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 7,
                "column" : 37,
                "name" : "link_1",
                "row" : 23,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#335779",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 4,
                "column" : 44,
                "name" : "link_8",
                "row" : 23,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#335779",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 1,
                "name" : "container_2",
                "row" : 25,
                "rowspan" : 47,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "top",
                    "right"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 18,
                "column" : 2,
                "name" : "text_2",
                "row" : 26,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 5,
                "column" : 30,
                "name" : "pillbox_2",
                "row" : 27,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 23,
                "column" : 2,
                "name" : "text_3",
                "row" : 30,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 33,
                "column" : 2,
                "name" : "chart_1",
                "row" : 33,
                "rowspan" : 37,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 13,
                "column" : 36,
                "name" : "container_5",
                "row" : 28,
                "rowspan" : 22,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 7,
                "column" : 37,
                "name" : "text_4",
                "row" : 29,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(17, 125, 73)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 4,
                "column" : 44,
                "name" : "text_8",
                "row" : 29,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(17, 125, 73)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 8,
                "column" : 37,
                "name" : "text_16",
                "row" : 36,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 45,
                "name" : "text_23",
                "row" : 36,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 37,
                "name" : "text_17",
                "row" : 40,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 45,
                "name" : "number_2",
                "row" : 40,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 37,
                "name" : "text_20",
                "row" : 44,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 45,
                "name" : "text_26",
                "row" : 44,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 13,
                "column" : 36,
                "name" : "container_6",
                "row" : 50,
                "rowspan" : 22,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 7,
                "column" : 37,
                "name" : "text_5",
                "row" : 51,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(129, 60, 80)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 4,
                "column" : 44,
                "name" : "text_11",
                "row" : 51,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(129, 60, 80)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 8,
                "column" : 37,
                "name" : "text_9",
                "row" : 58,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 45,
                "name" : "text_30",
                "row" : 58,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 37,
                "name" : "text_12",
                "row" : 62,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 45,
                "name" : "number_3",
                "row" : 62,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 37,
                "name" : "text_14",
                "row" : 66,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 45,
                "name" : "text_27",
                "row" : 66,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_13",
                "row" : 74,
                "rowspan" : 44,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(255, 255, 255)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 1,
                "name" : "text_40",
                "row" : 75,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 17,
                "column" : 1,
                "name" : "text_6",
                "row" : 78,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_1",
                "row" : 81,
                "rowspan" : 35,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              }
            ]
          },
          {
            "label" : "Pricing Scorecard",
            "name" : "42e6bdbc-093d-41cf-a995-93510dc24b61",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 10,
                "column" : 0,
                "name" : "container_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 3,
                "name" : "text_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#FFFFFF",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 10,
                "column" : 10,
                "name" : "link_5",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 9,
                "column" : 20,
                "name" : "link_4",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "rgb(0, 112, 210)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 4
                }
              },
              {
                "colspan" : 7,
                "column" : 29,
                "name" : "link_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 14,
                "column" : 36,
                "name" : "container_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "#E6ECF2",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "listselector_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 8,
                "name" : "listselector_2",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 14,
                "name" : "listselector_3",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 20,
                "name" : "listselector_6",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 26,
                "name" : "listselector_4",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 32,
                "name" : "listselector_5",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 38,
                "name" : "listselector_7",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 5,
                "column" : 44,
                "name" : "listselector_8",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_11",
                "row" : 13,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "text_10",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 7,
                "name" : "text_13",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 15,
                "name" : "text_15",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "number_9",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 7,
                "name" : "number_10",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 15,
                "name" : "number_1",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 1,
                "name" : "pillbox_1",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 13,
                "column" : 36,
                "name" : "container_4",
                "row" : 22,
                "rowspan" : 38,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 37,
                "name" : "link_1",
                "row" : 23,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#335779",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 3,
                "column" : 45,
                "name" : "link_7",
                "row" : 23,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#335779",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 37,
                "name" : "text_22",
                "row" : 27,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 37,
                "name" : "text_39",
                "row" : 31,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 37,
                "name" : "text_38",
                "row" : 35,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 37,
                "name" : "text_25",
                "row" : 38,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#335779",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 3,
                "column" : 37,
                "name" : "text_28",
                "row" : 41,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 41,
                "name" : "text_31",
                "row" : 41,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 3,
                "column" : 45,
                "name" : "text_32",
                "row" : 41,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 3,
                "column" : 37,
                "name" : "text_33",
                "row" : 45,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 5,
                "column" : 40,
                "name" : "text_34",
                "row" : 45,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 45,
                "name" : "text_35",
                "row" : 45,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 11,
                "column" : 37,
                "name" : "text_36",
                "row" : 49,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#335779",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 37,
                "name" : "text_37",
                "row" : 57,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 35,
                "column" : 1,
                "name" : "container_2",
                "row" : 25,
                "rowspan" : 47,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "top",
                    "right"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 18,
                "column" : 2,
                "name" : "text_2",
                "row" : 26,
                "rowspan" : 4,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 5,
                "column" : 30,
                "name" : "pillbox_2",
                "row" : 27,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 21,
                "column" : 2,
                "name" : "text_3",
                "row" : 30,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 33,
                "column" : 2,
                "name" : "chart_1",
                "row" : 33,
                "rowspan" : 37,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 13,
                "column" : 36,
                "name" : "container_5",
                "row" : 60,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 7,
                "column" : 37,
                "name" : "text_4",
                "row" : 61,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(17, 125, 73)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 4,
                "column" : 44,
                "name" : "text_8",
                "row" : 61,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(17, 125, 73)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 13,
                "column" : 36,
                "name" : "container_6",
                "row" : 66,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [
                    "top"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 7,
                "column" : 37,
                "name" : "text_5",
                "row" : 67,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(129, 60, 80)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 4,
                "column" : 44,
                "name" : "text_11",
                "row" : 67,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(129, 60, 80)",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_13",
                "row" : 74,
                "rowspan" : 44,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(255, 255, 255)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 11,
                "column" : 1,
                "name" : "text_40",
                "row" : 75,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 18,
                "column" : 1,
                "name" : "text_6",
                "row" : 78,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_1",
                "row" : 81,
                "rowspan" : 35,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              }
            ]
          }
        ],
        "rowHeight" : "fine",
        "selectors" : [ ],
        "style" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "backgroundColor" : "rgb(4, 29, 64)",
          "cellSpacingX" : 0,
          "cellSpacingY" : 0,
          "fit" : "original",
          "gutterColor" : "#C5D3E0"
        },
        "version" : 1.0
      }
    ],
    "layouts" : [ ],
    "steps" : {
      "Pricing_for_selected_Acc_1" : {
        "broadcastFacet" : false,
        "groups" : [ ],
        "label" : "Pricing Across Accounts by grouping",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n q = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id',  'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualQuantity'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'ActualQuantity'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyQuantity', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', ('SalesPrice'*(100-'DiscountPercentage')/100) as 'Final_Price', 'SalesAgreementProduct.ListPrice' as 'SalesAgreementProduct.ListPrice';\n result = foreach q generate 'Id' as 'Id', 'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{column(Time_Toggle_1.selection, [\"actuals_quantity_cal\"]).asObject()}} as 'Actuals', \n{{column(Time_Toggle_1.selection, [\"planned_quantity_cal\"]).asObject()}} as 'Planned', 'Final_Price' as 'Final_Price', 'SalesAgreementProduct.ListPrice' as 'SalesAgreementProduct.ListPrice', 'SalesAgreementProduct.ListPrice'-'Final_Price' as 'Discount_Amount';\n result = foreach result generate 'Id' as 'Id',  'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId',  'SalesAgreementProduct.SalesAgreement.Account.Name', 'Actuals', 'Planned', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'Final_Price'*'Actuals' as 'Final_Total_Amount', 'Final_Price' as 'Final_Price', 'SalesAgreementProduct.ListPrice' as 'SalesAgreementProduct.ListPrice', 'Discount_Amount'*'ActualQuantity' as 'Total_Discount_Amount';\n result = group result by {{cell(Prod_vs_Prod_Family_1.selection, 0, \"grouping\").asGrouping()}};\n result = foreach result generate {{row(Prod_vs_Prod_Family_1.selection, [0], [\"column\",\"projection\"]).asProjection()}}, {{row(Prod_vs_Prod_Family_1.selection, [0], [\"column\"]).asObject()}} as 'Grouping', coalesce(sum('Actuals'),0) as 'Actuals', coalesce(sum('Actuals'),0)/sum('Planned') as 'Realization', min('Final_Price') as 'min_Final_Price', max('Final_Price') as 'max_Final_Price', sum('Final_Total_Amount')/sum('Actuals')  as 'avg_Final_Price', sum('Final_Total_Amount') as 'Final_Total_Amount', sum('Total_Discount_Amount') as 'Total_Discount_Amount', first('SalesAgreementProduct.ListPrice') as 'SalesAgreementProduct.ListPrice', sum('ActualQuantity') as 'ActualQuantity';\n result = filter result by {{cell(Sales_by_grouping_1.selection, 0, cell(Prod_vs_Prod_Family_1.selection, 0, \"grouping\")).asEquality('Grouping')}};\n result = group result by all;\n result = foreach result generate (case when count() > 1 then \"Select One Product\" else first('Grouping') end) as 'Grouping', (case when \"{{row(Prod_vs_Prod_Family_1.selection, [0], [\"grouping\"]).asObject()}}\" == \"SalesAgreementProduct.Product.Family\" then \" - \" when count()>1 then \" - \" else \"$\"+number_to_string(round(min('min_Final_Price')), \"#,00\") end) as 'min_Final_Price', (case when \"{{row(Prod_vs_Prod_Family_1.selection, [0], [\"grouping\"]).asObject()}}\" == \"SalesAgreementProduct.Product.Family\" then \" - \" when count()>1 then \" - \" else \"$\"+number_to_string(round(max('max_Final_Price')), \"#,00\") end) as 'max_Final_Price', (case when count()>1 then \" - \" else \"$\"+number_to_string(round(sum('Final_Total_Amount')/sum('Actuals')), \"#,00\") end) as 'avg_Final_Price', sum('Final_Total_Amount') as 'Final_Total_Amount', round( sum('Total_Discount_Amount')/sum('ActualQuantity') ) as 'avg_Discount_Amount', (case when count()>1 then \" - \" else number_to_string(round((sum('Total_Discount_Amount')/sum('ActualQuantity'))*100/sum('SalesAgreementProduct.ListPrice')), \"#,00\")+\"%\" end) as 'avg_Discount_Percent', sum('SalesAgreementProduct.ListPrice') as 'SalesAgreementProduct.ListPrice';\n",
        "receiveFacet" : true,
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Time_Toggle_1" : {
        "broadcastFacet" : false,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "Time_Toggle",
        "selectMode" : "singlerequired",
        "start" : {
          "display" : [
            "YTD"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "display" : "MTD",
            "value" : "Month",
            "startdate_filter" : "[..\"current day\"]",
            "enddate_filter" : "[\"current year\"..]",
            "start_end_epoch" : "date_to_epoch(toDate(toString(now(),\"yyyy-MM\")    +    \"-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "filter" : "[\"current month\"..\"current day\"]",
            "duration" : "daysBetween( (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"))>date_to_epoch(toDate((toString(now(), \"yyyy-MM\")+\"-01\"),\"yyyy-MM-dd\")) then toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\") else toDate((toString(now(), \"yyyy-MM\")+\"-01\"),\"yyyy-MM-dd\") end),  (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\"))>date_to_epoch(now()) then toDate(toString(now(),\"yyyy-MM-dd\"),\"yyyy-MM-dd\") else  toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\") end) )",
            "date_min_timeseries" : "current month",
            "date_max_timeseries" : "current year",
            "date_min" : "current month",
            "date_max" : "current day",
            "change_percentage_curr_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_prev_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Actual_Amount'",
            "change_percentage_curr_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'PlannedAmountFinal'  -  ('PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")))  -  ('PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Planned_Amount'",
            "change_percentage_prev_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Planned_Amount'",
            "change_percentage_curr_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current month\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current month\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current month\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current month\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current month\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current month\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'ForecastedAmountFinal'  -  ('ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")))  -  ('ForecastedDailyAmount'*daysBetween(month_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Forecasted_Amount'",
            "change_percentage_prev_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(string_to_number(toString(now(),\"MM\"))-1, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 month ago\"..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 month ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 month ago\"..] && string_to_number(toString(now(),\"MM\")) in [1] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-01\", \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Forecasted_Amount'",
            "actuals_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'DerivedActualAmount'-'ActualDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'PlannedAmountFinal'-'PlannedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "forecasted_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'ForecastedAmountFinal'-'ForecastedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "actuals_quantity_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'ActualQuantity' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'ActualQuantity'-( 'ActualDailyQuantity'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'ActualQuantity'-( 'ActualDailyQuantity'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'ActualQuantity'-'ActualDailyQuantity'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_quantity_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'PlannedQuantityFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"]) then 'PlannedQuantityFinal'-( 'PlannedDailyQuantity'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current month\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'PlannedQuantityFinal'-( 'PlannedDailyQuantity'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current month\"..]) then 'PlannedQuantityFinal'-'PlannedDailyQuantity'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-MM\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)"
          },
          {
            "display" : "QTD",
            "value" : "Quarter",
            "startdate_filter" : "[..\"current day\"]",
            "enddate_filter" : "[\"current quarter\"..]",
            "start_end_epoch" : "date_to_epoch(toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01 00:00:00\"), \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "filter" : "[\"current quarter\"..\"current day\"]",
            "duration" : "daysBetween( (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"))>date_to_epoch(toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) then toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\") else toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\") end),  (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\"))>date_to_epoch(now()) then toDate(toString(now(),\"yyyy-MM-dd\"),\"yyyy-MM-dd\") else  toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\") end) )",
            "date_min_timeseries" : "current quarter",
            "date_max_timeseries" : "current year",
            "date_min" : "current quarter",
            "date_max" : "current day",
            "change_percentage_curr_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_prev_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('LastValidDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Actual_Amount'",
            "change_percentage_curr_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'PlannedAmountFinal'  -  ('PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")))  -  ('PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")))   else 0 end) as 'Planned_Amount'",
            "change_percentage_prev_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Planned_Amount'",
            "change_percentage_curr_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current quarter\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current quarter\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day( toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3, \"#,00\")+\"-01\"), \"yyyy-MM-dd\") ), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current quarter\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'ForecastedAmountFinal'  -  ('ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")))  -  ('ForecastedDailyAmount'*daysBetween(month_last_day( toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3, \"#,00\")+\"-01\"), \"yyyy-MM-dd\") ), toDate('ActualEndDate', \"yyyy-MM-dd\")))   else 0 end) as 'Forecasted_Amount'",
            "change_percentage_prev_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) not in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-5, \"#,00\")+\"-01\", \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-3, \"#,00\")+\"-01\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 quarter ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 quarter ago\"..] && string_to_number(toString(now(),\"MM\")) in [1,2,3] ) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-10-01\", \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(month_last_day(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1,\"#\")+\"-12-31\", \"yyyy-MM-dd\")), toDate('ActualEndDate', \"yyyy-MM-dd\")) )  else 0 end) as 'Forecasted_Amount'",
            "actuals_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'DerivedActualAmount'-'ActualDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'PlannedAmountFinal'-'PlannedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "forecasted_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'ForecastedAmountFinal'-'ForecastedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "actuals_quantity_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'ActualQuantity' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'ActualQuantity'-( 'ActualDailyQuantity'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'ActualQuantity'-( 'ActualDailyQuantity'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'ActualQuantity'-'ActualDailyQuantity'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_quantity_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'PlannedQuantityFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"]) then 'PlannedQuantityFinal'-( 'PlannedDailyQuantity'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current quarter\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'PlannedQuantityFinal'-( 'PlannedDailyQuantity'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current quarter\"..]) then 'PlannedQuantityFinal'-'PlannedDailyQuantity'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy-\")+number_to_string(ceil(string_to_number(toString(now(),\"MM\"))/3)*3-2, \"#,00\")+\"-01\"), \"yyyy-MM-dd\")) )  else 0 end)"
          },
          {
            "display" : "YTD",
            "value" : "Year",
            "startdate_filter" : "[..\"current day\"]",
            "enddate_filter" : "[\"current year\"..]",
            "start_end_epoch" : "date_to_epoch(toDate(toString(now(),\"yyyy\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "duration" : "daysBetween( (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"))>date_to_epoch(toDate((toString(now(), \"yyyy\")+\"-01-01\"),\"yyyy-MM-dd\")) then toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\") else toDate((toString(now(), \"yyyy\")+\"-01-01\"),\"yyyy-MM-dd\") end),  (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\"))>date_to_epoch(now()) then toDate(toString(now(),\"yyyy-MM-dd\"),\"yyyy-MM-dd\") else  toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\") end) )",
            "filter" : "[\"current year\"..\"current day\"]",
            "date_min_timeseries" : "current year",
            "date_max_timeseries" : "current year",
            "date_min" : "current year",
            "date_max" : "current day",
            "change_percentage_curr_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_prev_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('LastValidDate', \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_curr_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'  -  ('PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")))  -  ('PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Planned_Amount'",
            "change_percentage_prev_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Planned_Amount'",
            "change_percentage_curr_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(year_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'  -  ('ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")))  -  ('ForecastedDailyAmount'*daysBetween(year_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Forecasted_Amount'",
            "change_percentage_prev_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Forecasted_Amount'",
            "actuals_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-'ActualDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-'PlannedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "forecasted_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-'ForecastedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "actuals_quantity_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ActualQuantity' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ActualQuantity'-( 'ActualDailyQuantity'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ActualQuantity'-( 'ActualDailyQuantity'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ActualQuantity'-'ActualDailyQuantity'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_quantity_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'PlannedQuantityFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'PlannedQuantityFinal'-( 'PlannedDailyQuantity'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedQuantityFinal'-( 'PlannedDailyQuantity'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedQuantityFinal'-'PlannedDailyQuantity'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)"
          },
          {
            "display" : "CY",
            "value" : "Current Year",
            "startdate_filter" : "[..\"current year\"]",
            "enddate_filter" : "[\"current year\"..]",
            "start_end_epoch" : "date_to_epoch(toDate(toString(now(),\"yyyy\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(year_last_day(now()),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "duration" : "daysBetween( (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"))>date_to_epoch(toDate((toString(now(), \"yyyy\")+\"-01-01\"),\"yyyy-MM-dd\")) then toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\") else toDate((toString(now(), \"yyyy\")+\"-01-01\"),\"yyyy-MM-dd\") end),  (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\"))>date_to_epoch(toDate(toString(year_last_day(now()),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) then toDate(toString(year_last_day(now()),\"yyyy-MM-dd\") ,\"yyyy-MM-dd\") else  toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\") end) )",
            "filter" : "[\"current year\"..\"current year\"]",
            "date_min_timeseries" : "current year",
            "date_max_timeseries" : "current year",
            "date_min" : "current year",
            "date_max" : "current year",
            "change_percentage_curr_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_prev_actuals" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('LastValidDate', \"yyyy-MM-dd\")) ) - ( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Actual_Amount'",
            "change_percentage_curr_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(year_last_day(now()), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'  -  ('PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")))  -  ('PlannedDailyAmount'*daysBetween(toDate(toString(year_last_day(now()), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Planned_Amount'",
            "change_percentage_prev_planned" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) - ( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Planned_Amount'",
            "change_percentage_curr_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(year_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\") ) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'  -  ('ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")))  -  ('ForecastedDailyAmount'*daysBetween(year_last_day( now() ), toDate('ActualEndDate', \"yyyy-MM-dd\")))  else 0 end) as 'Forecasted_Amount'",
            "change_percentage_prev_forecasted" : "(case when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"1 year ago\"..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"1 year ago\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 year ago\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-12-31\", \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\")) ) - ( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(number_to_string(string_to_number(toString(now(), \"yyyy\"))-1, \"#\")+\"-01-01\", \"yyyy-MM-dd\")) ) else 0 end) as 'Forecasted_Amount'",
            "actuals_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'DerivedActualAmount' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-( 'ActualDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'DerivedActualAmount'-'ActualDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(year_last_day(now()), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedAmountFinal'-'PlannedDailyAmount'*( daysBetween(toDate(toString(year_last_day(now()), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "forecasted_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ForecastedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-( 'ForecastedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ForecastedAmountFinal'-'ForecastedDailyAmount'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "actuals_quantity_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ActualQuantity' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"]) then 'ActualQuantity'-( 'ActualDailyQuantity'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ActualQuantity'-( 'ActualDailyQuantity'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('LastValidDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'ActualQuantity'-'ActualDailyQuantity'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('LastValidDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)",
            "planned_quantity_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'PlannedQuantityFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"]) then 'PlannedQuantityFinal'-( 'PlannedDailyQuantity'*daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [\"current year\"..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedQuantityFinal'-( 'PlannedDailyQuantity'*daysBetween(toDate(toString(year_last_day(now()), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current year\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"current year\"..]) then 'PlannedQuantityFinal'-'PlannedDailyQuantity'*( daysBetween(toDate(toString(year_last_day(now()), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\")) )  else 0 end)"
          },
          {
            "display" : "ALL TIME",
            "value" : "All Time",
            "startdate_filter" : "[..\"current day\"]",
            "enddate_filter" : "[\"100 years ago\"..]",
            "start_end_epoch" : "date_to_epoch(toDate(number_to_string(string_to_number(toString(now(),\"yyyy\"))-1, \"#\")    +    \"-01-01 00:00:00\", \"yyyy-MM-dd HH:mm:ss\")) as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End'",
            "duration" : "daysBetween( toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"),  (case when date_to_epoch(toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\"))>date_to_epoch(now()) then toDate(toString(now(),\"yyyy-MM-dd\"),\"yyyy-MM-dd\") else  toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\") end) )",
            "filter" : "[..\"current day\"]",
            "date_min_timeseries" : "current year - 100 years",
            "date_max_timeseries" : "current year",
            "date_min" : "current year - 100 years",
            "date_max" : "current day",
            "change_percentage_curr_actuals" : "'DerivedActualAmount' as 'Actual_Amount'",
            "change_percentage_prev_actuals" : "0 as 'Actual_Amount'",
            "change_percentage_curr_planned" : "'PlannedAmountFinal' as 'Planned_Amount'",
            "change_percentage_prev_planned" : "0 as 'Planned_Amount'",
            "change_percentage_curr_forecasted" : "'ForecastedAmountFinal' as 'Forecasted_Amount'",
            "change_percentage_prev_forecasted" : "0 as 'Forecasted_Amount'",
            "actuals_cal" : "'DerivedActualAmount'",
            "planned_cal" : "(case  when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [..\"current day\"]) then 'PlannedAmountFinal' when (toDate('StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('ActualEndDate', \"yyyy-MM-dd\") in [\"1 day ahead\"..]) then 'PlannedAmountFinal'-( 'PlannedDailyAmount'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('ActualEndDate', \"yyyy-MM-dd\")) ) else 0 end)",
            "forecasted_cal" : "'ForecastedAmountFinal'",
            "actuals_quantity_cal" : "'ActualQuantity'",
            "planned_quantity_cal" : "'PlannedQuantityFinal'"
          }
        ]
      },
      "del_1" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "label" : "del",
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "single",
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "trellis" : [ ],
              "dimensionAxis" : [ ],
              "plots" : [
                "count"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "SalesAgreementProduc_2" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.SalesAgreement.Account.Owner.Name"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "single",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "Revenue_Realisation_Trend" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Revenue_Realisation_Trend",
        "numbers" : [ ],
        "query" : "all_slaps = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n all_slaps = filter all_slaps by 'isValidProductSchedule' == \"true\";\n valid_slaps = filter all_slaps by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"startdate_filter\").asObject()}};\n valid_slaps = filter valid_slaps by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in {{cell(Time_Toggle_1.selection, 0, \"enddate_filter\").asObject()}};\n valid_slaps = foreach valid_slaps generate 'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', {{cell(Time_Toggle_1.selection, 0, \"start_end_epoch\").asObject()}}, 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualQuantity'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'ActualQuantity'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyQuantity', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'SalesPrice' as 'SalesPrice', 'SalesAgreementProduct.ListPrice' as 'SalesAgreementProduct.ListPrice', 'DiscountPercentage' as 'DiscountPercentage', 'SalesAgreementProduct.ListPrice'-('SalesPrice'*(100-'DiscountPercentage')/100) as 'Discount_Amount';\n Start = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month', \n(case when ('StartDate_sec_epoch' >= 'Start') && ('LastValidDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('LastValidDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'LastValidDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('LastValidDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'LastValidDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end) as 'PlannedAmount', \n(case  when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ActualDailyQuantity' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now()) >= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('End'))+1) * 'ActualDailyQuantity' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * 'ActualDailyQuantity' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyQuantity' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ActualDailyQuantity' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now())>= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('End'))+1) * 'ActualDailyQuantity' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(now()) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), now())+1) * 'ActualDailyQuantity' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch' && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyQuantity'  else 0 end) as 'ActualQuantity', \n(case when ('StartDate_sec_epoch' >= 'Start') && ('LastValidDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('LastValidDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'LastValidDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('LastValidDate_sec_epoch'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'LastValidDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyQuantity' else 'PlannedAmountFinal' end) as 'PlannedQuantity', \n(case  when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now()) >= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('End'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && 'End' >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' >= 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= 'End' && date_to_epoch(now())>= 'End' && 'End' <= date_to_epoch(month_last_day(toDate('Start'))) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('End'))+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('Start'))) && 'End' >= date_to_epoch(now()) && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), now())+1) * 'ActualDailyAmount' when 'StartDate_sec_epoch' < 'Start' &&  'LastValidDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start'))) && date_to_epoch(now()) >= 'LastValidDate_sec_epoch' && 'End' >= 'LastValidDate_sec_epoch' && 'Start' <= date_to_epoch(now()) then (daysBetween(toDate('Start'), toDate('LastValidDate_sec_epoch'))+1) * 'ActualDailyAmount'  else 0 end) as 'ActualAmount', \n'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount', 'ActualDailyQuantity' as 'ActualDailyQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'SalesPrice' as 'SalesPrice', 'SalesAgreementProduct.ListPrice' as 'SalesAgreementProduct.ListPrice', 'DiscountPercentage' as 'DiscountPercentage', 'SalesAgreementProduct.ListPrice'-('SalesPrice'*(100-'DiscountPercentage')/100) as 'Discount_Amount';\n End_Value = foreach valid_slaps generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'LastValidDate_sec_epoch' as 'End Date', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('LastValidDate_sec_epoch' < 'End') then date_to_string(toDate('LastValidDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', \n(case  when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400))  && ('LastValidDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'PlannedDailyAmount' \n when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyAmount' \n else 0 end) as 'PlannedAmount', \n(case  when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' <= 'End') && (date_to_epoch(now()) >= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'ActualDailyAmount'  when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= 'End') && (date_to_epoch(now()) <= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * 'ActualDailyAmount'  when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)))  && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' >= 'End') && (date_to_epoch(now()) >= 'End' ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ActualDailyAmount'  else 0 end) as 'ActualAmount', \n(case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'PlannedDailyQuantity' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyQuantity'  else 0 end) as 'PlannedQuantity', \n(case  when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' <= 'End') && (date_to_epoch(now()) >= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('LastValidDate_sec_epoch'))) - 2764800)))))),toDate('LastValidDate_sec_epoch'))) * 'ActualDailyQuantity'  when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= 'End') && (date_to_epoch(now()) <= 'LastValidDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * 'ActualDailyQuantity'  when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)))  && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('LastValidDate_sec_epoch' >= 'End') && (date_to_epoch(now()) >= 'End' ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ActualDailyQuantity'  else 0 end) as 'ActualQuantity', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount', 'ActualDailyQuantity' as 'ActualDailyQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'SalesPrice' as 'SalesPrice', 'SalesAgreementProduct.ListPrice' as 'SalesAgreementProduct.ListPrice', 'DiscountPercentage' as 'DiscountPercentage', 'SalesAgreementProduct.ListPrice'-('SalesPrice'*(100-'DiscountPercentage')/100) as 'Discount_Amount';\n DataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','ActualAmount' as 'ActualAmount', 'PlannedAmount' as 'PlannedAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'ActualDailyAmount' as 'ActualDailyAmount', 'ActualQuantity' as 'ActualQuantity', 'PlannedQuantity' as 'PlannedQuantity', 'ActualDailyQuantity' as 'ActualDailyQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'Discount_Amount' as 'Discount_Amount';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount') as 'PlannedAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', sum('ActualQuantity') as 'ActualQuantity', sum('PlannedQuantity') as 'PlannedQuantity', min(first('PlannedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyQuantity', min(first('ActualDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyQuantity', max(first('Discount_Amount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Discount_Amount';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', (case when 'PlannedAmount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'PlannedAmount' end) as 'PlannedAmount', (case when 'ActualAmount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'ActualAmount' end) as 'ActualAmount', (case when 'PlannedQuantity' is null then month_days(toDate('Date'))*'PlannedDailyQuantity' else 'PlannedQuantity' end) as 'PlannedQuantity', (case when 'ActualQuantity' is null then month_days(toDate('Date'))*'ActualDailyQuantity' else 'ActualQuantity' end) as 'ActualQuantity', 'Discount_Amount' as 'Discount_Amount';\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', 'PlannedAmount' as 'PlannedAmount', 'ActualAmount' as 'ActualAmount', 'PlannedQuantity' as 'PlannedQuantity', 'ActualQuantity' as 'ActualQuantity', 'Discount_Amount' as 'Discount_Amount', 'Discount_Amount'*'ActualQuantity' as 'Total_Discount_Amount';\n result = group FilledData by ('Date_Year', 'Date_Month');\n result = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', 'Date_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', sum('PlannedAmount') as 'PlannedAmount', sum('ActualAmount') as 'ActualAmount', sum('PlannedQuantity') as 'PlannedQuantity', sum('ActualQuantity') as 'ActualQuantity', sum('Total_Discount_Amount') as 'Total_Discount_Amount';\n result_cy = filter result by {{row(Time_Toggle_1.selection, [0], [\"date_min\",\"date_max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n result_cy = group result_cy by 'StartDate_Year~~~StartDate_Month';\n result_cy = foreach result_cy generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount') as 'PlannedAmount' , round(coalesce(sum('ActualAmount'),0)*100/sum('PlannedAmount')) as 'Revenue_Demand_Realisation', sum('ActualQuantity') as 'ActualQuantity', sum('PlannedQuantity') as 'PlannedQuantity' , round(coalesce(sum('ActualQuantity'),0)*100/sum('PlannedQuantity')) as 'Quantity_Demand_Realisation', sum('Total_Discount_Amount') as 'Total_Discount_Amount', sum('Total_Discount_Amount')*100/sum('ActualAmount') as 'Discount_percent';\n  result_min = order result_cy by ({{cell(Qty_vs_Amount_1.selection, 0, \"realization_col\").asObject()}} asc, PlannedAmount asc);\n result_min = limit result_min 1;\n result_max = order result_cy by ({{cell(Qty_vs_Amount_1.selection, 0, \"realization_col\").asObject()}} desc, PlannedAmount desc);\n result_max = limit result_max 1;\n result_all = group result_cy by all;\n result_all = foreach result_all generate \"ALL\" as 'StartDate_Month', \"ALL\" as 'StartDate_Year' , sum(ActualAmount) as 'ActualAmount', sum(PlannedAmount) as  'PlannedAmount', round(coalesce(sum('ActualAmount'),0)*100/sum('PlannedAmount')) as 'Revenue_Demand_Realisation', round(coalesce(sum('ActualQuantity'),0)*100/sum('PlannedQuantity')) as 'Quantity_Demand_Realisation', sum('Total_Discount_Amount') as 'Total_Discount_Amount', sum('Total_Discount_Amount')*100/sum('ActualAmount') as 'Discount_percent';\n result = union result_min, result_max, result_all;\n result = foreach result generate (case when 'StartDate_Month' ==\"01\" then \"JAN\" when 'StartDate_Month' ==\"02\" then \"FEB\" when 'StartDate_Month' ==\"03\" then \"MAR\" when 'StartDate_Month' ==\"04\" then \"APR\" when 'StartDate_Month' ==\"05\" then \"MAY\" when 'StartDate_Month' ==\"06\" then \"JUN\" when 'StartDate_Month' ==\"07\" then \"JUL\" when 'StartDate_Month' ==\"08\" then \"AUG\" when 'StartDate_Month' ==\"09\" then \"SEP\" when 'StartDate_Month' ==\"10\" then \"OCT\" when 'StartDate_Month' ==\"11\" then \"NOV\" when 'StartDate_Month' ==\"12\" then \"DEC\" end)+\" \"+'StartDate_Year' as 'Month_Year', number_to_string({{cell(Qty_vs_Amount_1.selection, 0, \"actuals_col\").asObject()}},\"#,00\") as 'ActualAmount', {{cell(Qty_vs_Amount_1.selection, 0, \"actuals_col\").asObject()}} as 'sum_Actuals', number_to_string({{cell(Qty_vs_Amount_1.selection, 0, \"planned_col\").asObject()}},\"#,00\") as  'PlannedAmount', number_to_string({{cell(Qty_vs_Amount_1.selection, 0, \"realization_col\").asObject()}},\"#,00\")+\"%\" as 'Demand_Realisation', number_to_string(round('Total_Discount_Amount'), \"#,00\") as 'Total_Discount_Amount', 'Total_Discount_Amount' as 'sum_DiscountAmount', round('Discount_percent') as 'Discount_percent';\n",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-bar",
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "binValues" : false,
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Prod_vs_Prod_Family_1" : {
        "broadcastFacet" : true,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "Prod vs Prod Family",
        "selectMode" : "single",
        "start" : {
          "display" : [
            "PRODUCT"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "display" : "PRODUCT",
            "grouping" : "SalesAgreementProduct.Name",
            "column" : "'SalesAgreementProduct.Name'",
            "projection" : "SalesAgreementProduct.Name"
          },
          {
            "display" : "PRODUCT FAMILY",
            "grouping" : "SalesAgreementProduct.Product.Family",
            "column" : "'SalesAgreementProduct.Product.Family'",
            "projection" : "SalesAgreementProduct.Product.Family"
          }
        ]
      },
      "SalesAgreementProduc_3" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.SalesAgreement.Account.Type"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "single",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "pricing_across_accounts_by_grouping" : {
        "broadcastFacet" : false,
        "groups" : [ ],
        "label" : "Pricing Across Accounts by grouping",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n q = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id',  'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualQuantity'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'ActualQuantity'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyQuantity', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', ('SalesPrice'*(100-'DiscountPercentage')/100) as 'Final_Price', 'SalesAgreementProduct.ListPrice' as 'SalesAgreementProduct.ListPrice';\n result = foreach q generate 'Id' as 'Id', 'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{column(Time_Toggle_1.selection, [\"actuals_quantity_cal\"]).asObject()}} as 'Actuals', \n{{column(Time_Toggle_1.selection, [\"planned_quantity_cal\"]).asObject()}} as 'Planned', 'Final_Price' as 'Final_Price', 'SalesAgreementProduct.ListPrice' as 'SalesAgreementProduct.ListPrice', 'Final_Price'-'SalesAgreementProduct.ListPrice' as 'Discount_Amount';\n result = foreach result generate 'Id' as 'Id',  'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId',  'SalesAgreementProduct.SalesAgreement.Account.Name', 'Actuals', 'Planned', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'Final_Price'*'Actuals' as 'Final_Total_Amount', 'Final_Price' as 'Final_Price', 'SalesAgreementProduct.ListPrice' as 'SalesAgreementProduct.ListPrice', 'Discount_Amount'*'ActualQuantity' as 'Total_Discount_Amount';\n result = group result by {{cell(Prod_vs_Prod_Family_1.selection, 0, \"grouping\").asGrouping()}};\n result = foreach result generate {{row(Prod_vs_Prod_Family_1.selection, [0], [\"column\",\"projection\"]).asProjection()}}, {{row(Prod_vs_Prod_Family_1.selection, [0], [\"column\"]).asObject()}} as 'Grouping', coalesce(sum('Actuals'),0) as 'Actuals', coalesce(sum('Actuals'),0)/sum('Planned') as 'Realization', min('Final_Price') as 'min_Final_Price', max('Final_Price') as 'max_Final_Price', sum('Final_Total_Amount')/sum('Actuals')  as 'avg_Final_Price', sum('Final_Total_Amount') as 'Final_Total_Amount', sum('Total_Discount_Amount') as 'Total_Discount_Amount', first('SalesAgreementProduct.ListPrice') as 'SalesAgreementProduct.ListPrice';\n result = filter result by {{cell(Sales_by_grouping_1.selection, 0, cell(Prod_vs_Prod_Family_1.selection, 0, \"grouping\")).asEquality('Grouping')}};\n result = group result by all;\n result = foreach result generate (case when count() > 1 then \"Select One Product\" else first('Grouping') end) as 'Grouping', (case when \"{{row(Prod_vs_Prod_Family_1.selection, [0], [\"grouping\"]).asObject()}}\" == \"SalesAgreementProduct.Product.Family\" then \" - \" when count()>1 then \" - \" else \"$\"+number_to_string(round(min('min_Final_Price')), \"#,00\") end) as 'min_Final_Price', (case when \"{{row(Prod_vs_Prod_Family_1.selection, [0], [\"grouping\"]).asObject()}}\" == \"SalesAgreementProduct.Product.Family\" then \" - \" when count()>1 then \" - \" else \"$\"+number_to_string(round(max('max_Final_Price')), \"#,00\") end) as 'max_Final_Price', (case when count()>1 then \" - \" else \"$\"+number_to_string(round(sum('Final_Total_Amount')/sum('Actuals')), \"#,00\") end) as 'avg_Final_Price', sum('Final_Total_Amount') as 'Final_Total_Amount', round( sum('Total_Discount_Amount')/sum('Actuals') ) as 'avg_Discount_Amount', (case when count()>1 then \" - \" else number_to_string(round((sum('Total_Discount_Amount')/sum('Actuals'))*100/sum('SalesAgreementProduct.ListPrice')), \"#,00\")+\"%\" end) as 'avg_Discount_Percent', sum('SalesAgreementProduct.ListPrice') as 'SalesAgreementProduct.ListPrice';\n",
        "receiveFacet" : false,
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "details_table" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Details Table",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n q = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id',  'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId',  'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.StatusCode' as 'SalesAgreementProduct.SalesAgreement.StatusCode', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualQuantity'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'ActualQuantity'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyQuantity', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'SalesPrice', 'DiscountPercentage', 'SalesAgreementProduct.ListPrice';\n result = foreach q generate 'Id' as 'Id', 'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.StatusCode' as 'SalesAgreementProduct.SalesAgreement.StatusCode', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', \n{{column(Time_Toggle_1.selection, [\"actuals_quantity_cal\"]).asObject()}} as 'Actual_Quantity', \n{{column(Time_Toggle_1.selection, [\"actuals_cal\"]).asObject()}} as 'Actual_Revenue', \n{{column(Time_Toggle_1.selection, [\"planned_quantity_cal\"]).asObject()}} as 'Planned_Quantity', \n{{column(Time_Toggle_1.selection, [\"planned_cal\"]).asObject()}} as 'Planned_Revenue', 'SalesAgreementProduct.ListPrice'-('SalesPrice'*(100-'DiscountPercentage')/100) as 'Discount_Amount';\n result = foreach result generate 'Id' as 'Id', 'DerivedActualAmount' as 'DerivedActualAmount',  'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.StatusCode' as 'SalesAgreementProduct.SalesAgreement.StatusCode', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId',  'SalesAgreementProduct.SalesAgreement.Account.Name', 'Actual_Revenue', 'Planned_Revenue', 'Actual_Quantity', 'Planned_Quantity', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'Discount_Amount'*'ActualQuantity' as 'Total_Discount_Amount';\n result = group result by ('SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.Name', 'SalesAgreementProduct.SalesAgreementId');\n result = foreach result generate 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', first('SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name', coalesce(sum('Planned_Revenue'),0) as 'Planned_Revenue', coalesce(sum('Actual_Revenue'),0) as 'Actual_Revenue', sum('Planned_Revenue')-coalesce(sum('Actual_Revenue'),0) as 'Revenue_Shortfall_absolute', coalesce(sum('Planned_Quantity'),0) as 'Planned_Quantity', coalesce(sum('Actual_Quantity'),0) as 'Actual_Quantity', sum('Planned_Quantity')-coalesce(sum('Actual_Quantity'),0) as 'Quantity_Shortfall_absolute', sum('DerivedActualAmount')/sum('ActualQuantity') as 'Avg. Unit Price', sum('Total_Discount_Amount')/sum('ActualQuantity') as 'Avg. Discount';\n",
        "receiveFacet" : true,
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "SalesAgreementProduc_1" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "unique",
                "SalesAgreementProduct.Name"
              ]
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "single",
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "trellis" : [ ],
              "dimensionAxis" : [ ],
              "plots" : [
                "unique_SalesAgreementProduct.Name"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Qty_vs_Amount_1" : {
        "broadcastFacet" : true,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "Qty vs Amount",
        "selectMode" : "single",
        "start" : {
          "display" : [
            "$"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "display" : "Qty",
            "time_toggle_actuals" : "actuals_quantity_cal",
            "time_toggle_planned" : "planned_quantity_cal",
            "realization_col" : "Quantity_Demand_Realisation",
            "actuals_col" : "ActualQuantity",
            "planned_col" : "PlannedQuantity"
          },
          {
            "display" : "$",
            "time_toggle_actuals" : "actuals_cal",
            "time_toggle_planned" : "planned_cal",
            "realization_col" : "Revenue_Demand_Realisation",
            "actuals_col" : "ActualAmount",
            "planned_col" : "PlannedAmount"
          }
        ]
      },
      "Hidden_Step_for_Avg_Discount" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Hidden Step for Average Discount",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n q = group q by all;\n q = foreach q generate {{coalesce(cell(Revenue_Realisation_Trend.result,2,\"sum_DiscountAmount\"),0).asObject()}} as 'average_Discount', {{coalesce(cell(Revenue_Realisation_Trend.result,1,\"sum_Actuals\"),0).asObject()}} as 'sum_BestMonthActuals', {{coalesce(cell(Revenue_Realisation_Trend.result,0,\"sum_Actuals\"),0).asObject()}} as 'sum_WorstMonthActuals';\n",
        "receiveFacet" : true,
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-bar",
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "binValues" : false,
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Sales_by_grouping_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Sales by grouping",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_SalesAgreementProductSchedule_tp.FullyQualifiedName}\";\n q = filter q by 'isValidProductSchedule' == \"true\";\n q = foreach q generate 'Id' as 'Id',  'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId','SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', 'DerivedActualAmount' as 'DerivedActualAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'DerivedActualAmount'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyAmount', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualQuantity'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate('ActualEndDate', \"yyyy-MM-dd\"))+1) else 'ActualQuantity'/(daysBetween(toDate('StartDate', \"yyyy-MM-dd\"), toDate(toString(now(),\"yyyy-MM-dd\"), \"yyyy-MM-dd\"))+1) end) as 'ActualDailyQuantity', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end) as 'LastValidDate_sec_epoch', (case when 'ActualEndDate_sec_epoch'<date_to_epoch(now()) or 'StartDate_sec_epoch'>date_to_epoch(now()) then 'ActualEndDate' else toString(now(),\"yyyy-MM-dd\") end) as 'LastValidDate', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\n result = foreach q generate 'Id' as 'Id', 'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate', \n{{column(Time_Toggle_1.selection, column(Qty_vs_Amount_1.selection, [\"time_toggle_actuals\"])).asObject()}} as 'Actuals', \n{{column(Time_Toggle_1.selection, column(Qty_vs_Amount_1.selection, [\"time_toggle_planned\"])).asObject()}} as 'Planned';\n result = foreach result generate 'Id' as 'Id',  'ActualQuantity' as 'ActualQuantity', 'PlannedDailyQuantity' as 'PlannedDailyQuantity', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.ProductId' as 'SalesAgreementProduct.ProductId',  'SalesAgreementProduct.SalesAgreement.Account.Name', 'Actuals', 'Planned', 'StartDate' as 'StartDate', 'ActualEndDate' as 'ActualEndDate';\n result = group result by {{cell(Prod_vs_Prod_Family_1.selection, 0, \"grouping\").asGrouping()}};\n result = foreach result generate {{row(Prod_vs_Prod_Family_1.selection, [0], [\"column\",\"projection\"]).asProjection()}}, coalesce(sum('Actuals'),0) as 'Actuals', coalesce(sum('Actuals'),0)/sum('Planned') as 'Realization';\n result = order result by ('Actuals' desc);",
        "receiveFacet" : true,
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "unique_prod_families_1" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "label" : "unique_prod_families",
        "query" : {
          "query" : {
            "measures" : [
              [
                "unique",
                "SalesAgreementProduct.Product.Family"
              ]
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "single",
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "columnMap" : {
              "trellis" : [ ],
              "dimensionAxis" : [ ],
              "plots" : [
                "unique_SalesAgreementProduct.Product.Family"
              ]
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "SalesAgreementProduc_8" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.SalesAgreement.Name"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "multi",
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "SalesAgreementProduc_6" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.Product.Family"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "single",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "SalesAgreementProduc_7" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.SalesAgreement.Account.Parent.Name"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "multi",
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "SalesAgreementProduc_4" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.SalesAgreement.Account.Name"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "singlerequired",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "SalesAgreementProduc_5" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_SalesAgreementProductSchedule_tp.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "SalesAgreementProduct.Name"
            ]
          },
          "version" : -1.0
        },
        "receiveFacet" : true,
        "selectMode" : "multi",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      }
    },
    "widgetStyle" : {
      "backgroundColor" : "rgba(255, 255, 255, 0)",
      "borderColor" : "#E6ECF2",
      "borderEdges" : [ ],
      "borderRadius" : 0,
      "borderWidth" : 1
    },
    "widgets" : {
      "number_10" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "unique_SalesAgreementProduct.Product.Family",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "unique_prod_families_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "text_18" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "Choose KPI:",
          "textAlignment" : "center",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_17" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Sales {{cell(Qty_vs_Amount_1.selection, 0, \"display\").asObject()}}",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_19" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : true,
          "text" : "Group by:",
          "textAlignment" : "center",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "container_13" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_14" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Discount Offered",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_13" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : false,
          "text" : "PRODUCT FAMILIES (#)",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_16" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Demand Realization",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_15" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : false,
          "text" : "TOTAL DISCOUNT",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_10" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : false,
          "text" : "PRODUCTS (#)",
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_12" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Sales {{cell(Qty_vs_Amount_1.selection, 0, \"display\").asObject()}}",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_11" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : false,
          "text" : "{{cell(Revenue_Realisation_Trend.result, 0, \"Month_Year\").asObject()}}",
          "textAlignment" : "right",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "container_1" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_2" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_3" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_4" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_5" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_3" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : false,
          "text" : "Which are the best and worst performing products for this account?",
          "textAlignment" : "left",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "container_6" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_2" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Product Sales and Realization",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_5" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Worst Month",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_4" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Best Month",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "chart_1" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : false,
            "customSize" : "auto",
            "position" : "right-top",
            "inside" : false
          },
          "showMeasureTitle" : true,
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "pyramid",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "showMeasure" : true,
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "Sales_by_grouping_1",
          "rightColor" : "#e16032",
          "leftColor" : "#52b7d8",
          "dimensionAxis" : {
            "customSize" : "auto",
            "showAxis" : true
          },
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_6" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : false,
          "text" : "NOTE - All metrics are appropriated for selected time frame",
          "textAlignment" : "left",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "text_9" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Demand Realization",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_8" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "{{cell(Revenue_Realisation_Trend.result, 1, \"Month_Year\").asObject()}}",
          "textAlignment" : "right",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "text_1" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "Account Insights",
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "number_3" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "sum_WorstMonthActuals",
          "numberColor" : "#FFFFFF",
          "numberSize" : 14,
          "showActionMenu" : true,
          "step" : "Hidden_Step_for_Avg_Discount",
          "textAlignment" : "right",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "text_40" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Details Table",
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "number_2" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "sum_BestMonthActuals",
          "numberColor" : "#FFFFFF",
          "numberSize" : 14,
          "showActionMenu" : true,
          "step" : "Hidden_Step_for_Avg_Discount",
          "textAlignment" : "right",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_1" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "average_Discount",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Hidden_Step_for_Avg_Discount",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "image_1" : {
        "parameters" : {
          "alignmentX" : "center",
          "alignmentY" : "center",
          "fit" : "original",
          "image" : {
            "name" : "${App.Images['manufacturing_app_iconpng8'].Name}",
            "namespace" : "${Org.Namespace}"
          }
        },
        "type" : "image"
      },
      "container_12" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_11" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_39" : {
        "parameters" : {
          "fontSize" : 24,
          "showActionMenu" : true,
          "text" : "{{column(Pricing_for_selected_Acc_1.result, [\"avg_Final_Price\"]).asObject()}}",
          "textAlignment" : "center",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_36" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : false,
          "text" : "For this account,  average discount offered on list price for the selected product is {{column(Pricing_for_selected_Acc_1.result, [\"avg_Discount_Percent\"]).asObject()}}",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_35" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : false,
          "text" : "MAX\nPRICE*",
          "textAlignment" : "center",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "text_38" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : false,
          "text" : "AVERAGE PRICE*",
          "textAlignment" : "center",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "text_37" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : false,
          "text" : "*NOTE - The price shown is per unit",
          "textAlignment" : "left",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "number_9" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "unique_SalesAgreementProduct.Name",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "SalesAgreementProduc_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "text_32" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "{{column(pricing_across_accounts_by_grouping.result, [\"max_Final_Price\"]).asObject()}}",
          "textAlignment" : "center",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_31" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "{{column(pricing_across_accounts_by_grouping.result, [\"avg_Final_Price\"]).asObject()}}",
          "textAlignment" : "center",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_34" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : false,
          "text" : "AVG\nPRICE*",
          "textAlignment" : "center",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "text_33" : {
        "parameters" : {
          "fontSize" : 12,
          "showActionMenu" : false,
          "text" : "MIN\nPRICE*",
          "textAlignment" : "center",
          "textColor" : "#7D98B3"
        },
        "type" : "text"
      },
      "text_30" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "{{cell(Revenue_Realisation_Trend.result, 0, \"Demand_Realisation\").asObject()}}",
          "textAlignment" : "right",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "listselector_7" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_8",
          "title" : "Sales Agreement"
        },
        "type" : "listselector"
      },
      "listselector_6" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_7",
          "title" : "Parent Account"
        },
        "type" : "listselector"
      },
      "listselector_8" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "showActionMenu" : false,
          "step" : "Time_Toggle_1",
          "title" : "Time Period"
        },
        "type" : "listselector"
      },
      "listselector_3" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_4",
          "title" : "Account Name"
        },
        "type" : "listselector"
      },
      "listselector_2" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_3",
          "title" : "Account Type"
        },
        "type" : "listselector"
      },
      "text_28" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : true,
          "text" : "{{column(pricing_across_accounts_by_grouping.result, [\"min_Final_Price\"]).asObject()}}",
          "textAlignment" : "center",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "listselector_5" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_6",
          "title" : "Product Family"
        },
        "type" : "listselector"
      },
      "listselector_4" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_5",
          "title" : "Product Name"
        },
        "type" : "listselector"
      },
      "link_3" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Account Insights - Order Status'].Name}",
            "namespace" : "${Org.Namespace}"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "ORDER STATUS",
          "textAlignment" : "center",
          "textColor" : "rgb(84, 105, 141)"
        },
        "type" : "link"
      },
      "text_25" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Across Accounts",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "link_4" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "dcc70e5d-3908-4426-8ac5-f99fe142f5c1"
          },
          "destinationType" : "page",
          "fontSize" : 12,
          "includeState" : false,
          "text" : "PRODUCT SALES & PRICING",
          "textAlignment" : "center",
          "textColor" : "#0070D2"
        },
        "type" : "link"
      },
      "link_1" : {
        "parameters" : {
          "destinationType" : "lens",
          "fontSize" : 18,
          "includeState" : false,
          "text" : "Pricing Scorecard",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "link"
      },
      "text_27" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "{{cell(Revenue_Realisation_Trend.result, 0, \"Discount_percent\").asObject()}}%",
          "textAlignment" : "right",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_26" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "{{cell(Revenue_Realisation_Trend.result, 1, \"Discount_percent\").asObject()}}%",
          "textAlignment" : "right",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_20" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "Discount Offered",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_23" : {
        "parameters" : {
          "fontSize" : 14,
          "showActionMenu" : true,
          "text" : "{{cell(Revenue_Realisation_Trend.result, 1, \"Demand_Realisation\").asObject()}}",
          "textAlignment" : "right",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_22" : {
        "parameters" : {
          "fontSize" : 16,
          "showActionMenu" : false,
          "text" : "{{column(pricing_across_accounts_by_grouping.result, [\"Grouping\"]).asObject()}}",
          "textAlignment" : "left",
          "textColor" : "#FFFFFF",
          "tooltip" : ""
        },
        "type" : "text"
      },
      "table_1" : {
        "parameters" : {
          "borderColor" : "#e0e5ee",
          "borderWidth" : 1,
          "cell" : {
            "backgroundColor" : "#ffffff",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "columnProperties" : { },
          "columns" : [ ],
          "customBulkActions" : [ ],
          "exploreLink" : true,
          "header" : {
            "backgroundColor" : "#f4f6f9",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "innerMajorBorderColor" : "#a8b7c7",
          "innerMinorBorderColor" : "#e0e5ee",
          "mode" : "fittocontainer",
          "numberOfLines" : 1,
          "pivoted" : false,
          "showActionMenu" : true,
          "step" : "details_table",
          "verticalPadding" : 8
        },
        "type" : "table"
      },
      "pillbox_2" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 12,
          "selectedTab" : {
            "backgroundColor" : "rgb(51, 87, 121)",
            "borderColor" : "#C6D3E1",
            "borderEdges" : [ ],
            "borderWidth" : 0,
            "textColor" : "#FFFFFF"
          },
          "showActionMenu" : false,
          "step" : "Qty_vs_Amount_1",
          "textColor" : "rgb(125, 152, 179)"
        },
        "type" : "pillbox"
      },
      "link_7" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "dcc70e5d-3908-4426-8ac5-f99fe142f5c1"
          },
          "destinationType" : "page",
          "fontSize" : 14,
          "includeState" : false,
          "text" : "CLOSE",
          "textAlignment" : "right",
          "textColor" : "#0070D2"
        },
        "type" : "link"
      },
      "pillbox_1" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 12,
          "selectedTab" : {
            "backgroundColor" : "rgb(17, 48, 91)",
            "borderColor" : "#C6D3E1",
            "borderEdges" : [
              "all"
            ],
            "borderWidth" : 0,
            "textColor" : "#FFFFFF"
          },
          "showActionMenu" : false,
          "step" : "Prod_vs_Prod_Family_1",
          "textColor" : "rgb(125, 152, 178)"
        },
        "type" : "pillbox"
      },
      "link_8" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "42e6bdbc-093d-41cf-a995-93510dc24b61"
          },
          "destinationType" : "page",
          "fontSize" : 14,
          "includeState" : false,
          "text" : "VIEW",
          "textAlignment" : "right",
          "textColor" : "#0070D2"
        },
        "type" : "link"
      },
      "link_5" : {
        "parameters" : {
          "destinationLink" : {
            "name" : "${App.Dashboards['Account Insights - Agreements Performance'].Name}",
            "namespace" : "${Org.Namespace}"
          },
          "destinationType" : "dashboard",
          "fontSize" : 12,
          "includeState" : true,
          "text" : "AGREEMENTS PERFORMANCE",
          "textAlignment" : "center",
          "textColor" : "rgb(84, 105, 141)"
        },
        "type" : "link"
      },
      "listselector_1" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "SalesAgreementProduc_2",
          "title" : "Owner Name"
        },
        "type" : "listselector"
      }
    }
  }
}