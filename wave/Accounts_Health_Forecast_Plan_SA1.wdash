{"dataSourceLinksInfo":{"enableAutomaticLinking":false,"excludeRelationships":[],"links":[{"fields":[{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Type"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Type"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Type"},{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Type"}],"label":"Account_Type","name":"Link_4642"},{"fields":[{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Name"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Name"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Name"},{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Name"}],"label":"Account_Name","name":"Link_4671"},{"fields":[{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Industry"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Industry"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Industry"},{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Industry"}],"label":"Industry","name":"Link_4716"},{"fields":[{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.BillingCountry"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.BillingCountry"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.BillingCountry"},{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"BillingCountry"}],"label":"Account_Country","name":"Link_4743"},{"fields":[{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Parent"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Parent"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Parent"},{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Parent"}],"label":"Parent_Account_Name","name":"Link_4692"},{"fields":[{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Owner.Name"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Owner.Name"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Owner.Name"},{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Owner.Name"}],"label":"Account_Owner","name":"Link_4623"}]},"filters":[{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["Owner.Name"],"label":"Account Owner","locked":false,"operator":"in"},{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["Name"],"label":"Account","locked":false,"operator":"in"},{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["Type"],"locked":false,"operator":"in"},{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["Parent"],"label":"Parent Account","locked":false,"operator":"in"},{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["Industry"],"locked":false,"operator":"in"},{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["BillingCountry"],"label":"Account Country","locked":false,"operator":"in"}],"gridLayouts":[{"maxWidth":1500,"name":"Default","numColumns":50,"pages":[{"label":"OVERVIEW - Planned","name":"d0cde39f-73b4-4ed9-a7b8-36f2231236ea","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_1","row":7,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(228, 234, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_10","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":9,"column":3,"name":"text_10","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":9,"column":21,"name":"link_4","row":0,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":12,"name":"link_8","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_1","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":30,"name":"link_12","row":0,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":48,"column":1,"name":"table_4","row":78,"rowspan":32,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_12","row":71,"rowspan":41,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":1,"name":"text_34","row":72,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":1,"name":"text_36","row":75,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_2","row":34,"rowspan":35,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":2,"name":"text_3","row":39,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":7,"name":"pillbox_7","row":39,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":2,"name":"chart_1","row":42,"rowspan":26,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":30,"column":18,"name":"chart_10","row":46,"rowspan":22,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":17,"column":2,"name":"text_12","row":35,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":18,"name":"text_32","row":42,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":23,"column":1,"name":"container_5","row":15,"rowspan":15,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":2,"name":"text_37","row":24,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":2,"name":"text_38","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":2,"name":"text_39","row":27,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":11,"name":"number_16","row":24,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":11,"name":"number_18","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":11,"name":"number_19","row":27,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":15,"name":"chart_11","row":23,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":35,"name":"text_40","row":39,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":22,"column":26,"name":"container_6","row":16,"rowspan":13,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":29,"name":"chart_12","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":22,"column":26,"name":"link_28","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":23,"column":1,"name":"text_53","row":15,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":23,"column":1,"name":"text_7","row":18,"rowspan":2,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":22,"column":26,"name":"link_21","row":19,"rowspan":2,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":22,"column":26,"name":"link_15","row":21,"rowspan":2,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":22,"column":26,"name":"link_16","row":27,"rowspan":2,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":26,"name":"link_17","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":45,"name":"link_18","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"text_8","row":32,"rowspan":2,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_9","row":32,"rowspan":39,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":49,"column":1,"name":"text_11","row":69,"rowspan":2,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"text_13","row":32,"rowspan":37,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":11,"name":"image_4","row":30,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":49,"column":1,"name":"filterpanel_3","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["right"],"borderRadius":0,"borderWidth":8}},{"colspan":9,"column":39,"name":"dateselector_1","row":39,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}}]},{"label":"OVERVIEW - Forecast","name":"eb5e70d9-9af9-42fc-a934-c6a9069bb355","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_1","row":7,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(228, 234, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_10","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":9,"column":3,"name":"text_10","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":9,"column":21,"name":"link_4","row":0,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":12,"name":"link_8","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_1","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":30,"name":"link_12","row":0,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_12","row":71,"rowspan":41,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":1,"name":"text_34","row":72,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":1,"name":"text_36","row":75,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":2,"name":"container_5","row":16,"rowspan":13,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":5,"name":"chart_11","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":39,"name":"dateselector_1","row":37,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":35,"name":"text_40","row":37,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":24,"column":25,"name":"container_6","row":15,"rowspan":15,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":36,"name":"number_20","row":24,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":36,"name":"number_21","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":36,"name":"number_22","row":27,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"chart_12","row":23,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_7","row":34,"rowspan":35,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":2,"name":"text_44","row":39,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":2,"name":"chart_13","row":42,"rowspan":26,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":30,"column":18,"name":"chart_14","row":46,"rowspan":22,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":18,"column":2,"name":"text_45","row":35,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":18,"name":"text_46","row":42,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":8,"name":"listselector_1","row":39,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":9,"column":27,"name":"pillbox_10","row":42,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":7,"column":26,"name":"text_50","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":26,"name":"text_51","row":24,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":26,"name":"text_52","row":27,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":2,"name":"link_31","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":24,"column":25,"name":"text_54","row":15,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"table_5","row":78,"rowspan":32,"widgetStyle":{"borderEdges":[]}},{"colspan":41,"column":1,"name":"filterpanel_2","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["right"],"borderRadius":0,"borderWidth":8}},{"colspan":21,"column":2,"name":"link_19","row":21,"rowspan":2,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":2,"name":"link_20","row":27,"rowspan":2,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":2,"name":"link_23","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":20,"name":"link_24","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_14","row":32,"rowspan":39,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"text_35","row":32,"rowspan":39,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"text_41","row":32,"rowspan":2,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"text_42","row":69,"rowspan":2,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":36,"name":"image_6","row":30,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":24,"column":25,"name":"text_43","row":18,"rowspan":2,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":2,"name":"link_25","row":19,"rowspan":2,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":42,"name":"listselector_2","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":2}}]},{"label":"ACCOUNTS IN FOCUS1","name":"63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_1","row":7,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(228, 234, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":49,"column":1,"name":"filterpanel_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["right"],"borderRadius":0,"borderWidth":8}},{"colspan":21,"column":2,"name":"text_1","row":16,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":17,"column":2,"name":"text_2","row":20,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":19,"name":"pillbox_1","row":20,"rowspan":2,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_4","row":28,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"number_1","row":30,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_5","row":38,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"number_3","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_6","row":48,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"number_4","row":50,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":18,"column":2,"name":"link_1","row":61,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"rgb(4, 29, 64)","borderEdges":[],"borderRadius":0,"borderWidth":2}},{"colspan":50,"column":0,"name":"container_10","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":9,"column":12,"name":"link_5","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":21,"name":"link_6","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_1","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":30,"name":"link_13","row":0,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":48,"column":1,"name":"table_3","row":75,"rowspan":32,"widgetStyle":{"borderEdges":[]}},{"colspan":38,"column":10,"name":"chart_4","row":38,"rowspan":21,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":2}},{"colspan":38,"column":10,"name":"chart_9","row":25,"rowspan":13,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":3,"name":"text_10","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":48,"column":1,"name":"container_11","row":15,"rowspan":45,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_12","row":68,"rowspan":41,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":1,"name":"text_34","row":69,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":1,"name":"text_36","row":72,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_14","row":60,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"rgb(4, 29, 64)","borderEdges":["top"],"borderRadius":0,"borderWidth":2}}]},{"label":"ACCOUNTS IN FOCUS2","name":"125726a0-29bd-48b9-af08-393c33e20ede","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_1","row":7,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(228, 234, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":49,"column":1,"name":"filterpanel_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["right"],"borderRadius":0,"borderWidth":8}},{"colspan":12,"column":2,"name":"text_15","row":26,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"rgba(255, 255, 255, 0)","borderEdges":[],"borderRadius":0,"borderWidth":8}},{"colspan":8,"column":2,"name":"text_16","row":53,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"number_2","row":55,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_17","row":35,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"number_8","row":37,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_18","row":44,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"number_9","row":46,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":32,"name":"text_20","row":26,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(17, 48, 91, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["right"],"borderRadius":0,"borderWidth":8}},{"colspan":6,"column":42,"name":"pillbox_4","row":26,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":14,"name":"pillbox_5","row":26,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":24,"column":2,"name":"link_2","row":16,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"rgb(4, 29, 64)","borderEdges":[],"borderRadius":0,"borderWidth":2}},{"colspan":38,"column":10,"name":"chart_7","row":31,"rowspan":33,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_10","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":9,"column":12,"name":"link_5","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":21,"name":"link_6","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_1","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":30,"name":"link_14","row":0,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":48,"column":1,"name":"table_1","row":75,"rowspan":32,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":3,"name":"text_10","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":50,"column":0,"name":"container_12","row":68,"rowspan":41,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":1,"name":"text_34","row":69,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":1,"name":"text_36","row":72,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_14","row":21,"rowspan":45,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"rgb(4, 29, 64)","borderEdges":["top"],"borderRadius":0,"borderWidth":2}},{"colspan":24,"column":2,"name":"link_1","row":22,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"rgb(4, 29, 64)","borderEdges":[],"borderRadius":0,"borderWidth":2}},{"colspan":48,"column":1,"name":"container_11","row":15,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}}]},{"label":"RELATIONSHIP WITH MY ACCOUNTS","name":"affd9fef-3319-4206-840e-62d065d7b8c8","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_1","row":7,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(228, 234, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":49,"column":1,"name":"filterpanel_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["right"],"borderRadius":0,"borderWidth":8}},{"colspan":50,"column":0,"name":"container_4","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":9,"column":21,"name":"link_9","row":0,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":12,"name":"link_10","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":1,"name":"image_2","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":30,"name":"link_11","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":17,"column":2,"name":"chart_2","row":28,"rowspan":36,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":2,"name":"text_26","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":17,"column":19,"name":"text_27","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":12,"column":36,"name":"pillbox_3","row":24,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_9","row":13,"rowspan":7,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":15,"name":"number_13","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":29,"name":"number_14","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":21,"name":"number_15","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":15,"name":"text_28","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":21,"name":"text_29","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":12,"column":29,"name":"text_30","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":1,"name":"pillbox_8","row":15,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":41,"name":"text_31","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":20,"column":23,"name":"text_33","row":63,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":29,"column":19,"name":"chart_8","row":28,"rowspan":35,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":41,"name":"number_17","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"table_2","row":75,"rowspan":32,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":3,"name":"text_10","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":50,"column":0,"name":"container_12","row":68,"rowspan":41,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":1,"name":"text_34","row":69,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":1,"name":"text_36","row":72,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(18, 37, 76, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_11","row":22,"rowspan":44,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}}]}],"rowHeight":"fine","selectors":[],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"rgb(4, 29, 64)","cellSpacingX":0,"cellSpacingY":0,"fit":"original","gutterColor":"#C5D3E0"},"version":1.0}],"layouts":[],"steps":{"RelationshipLength_1":{"broadcastFacet":true,"groups":[],"label":"RelationshipLength","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = filter q by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nq = filter q by {{column(ActiveAccounts_1.result, [\"AccountId\"]).asEquality('SalesAgreementProduct.SalesAgreement.AccountId')}};\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name',\n'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch' as 'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch',q.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch' as 'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch', case when  q.'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Activated\", \"Approved\"] then 'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch' end as 'PlannedEndDate';\n\nq = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name';\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name',\ntoDate(min(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch')) as 'MinDate', \ntoDate(max(q.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch')) as 'MaxDate', \ntoDate(max(PlannedEndDate)) as 'PlannedMaxDate';\n\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name',q.'MinDate'  as 'MinDate', q.'MaxDate' as 'MaxDate',daysBetween(q.'MinDate', now()) as '1.Length of relationship (To Date)',\ncase when q.'MinDate'<now() then round(daysBetween(q.'MinDate', case when q.'MaxDate'<now() then q.'MaxDate' else now() end)/365,2) else 0 end as 'Current_Years', \ndaysBetween(now(),q.'PlannedMaxDate') as '2.Future length of relationship (Agreed Upon)',\ncase when q.'PlannedMaxDate'>now() then round(daysBetween(now(),q.'PlannedMaxDate')/365,2) else 0 end as 'Planned_Years', \n\n(case when q.'MinDate'<now() then round(daysBetween(q.'MinDate', case when q.'MaxDate'<now() then q.'MaxDate' else now() end)/365,2) else 0 end)+(case when q.'PlannedMaxDate'>now() then round(daysBetween(now(),q.'PlannedMaxDate')/365,2) else 0 end) as 'Total_Years';\nStream1 = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', \"1.Length of relationship (To Date)\" as 'Current_Planned_Flag', q.'Current_Years' as 'Number of Years', q.'Total_Years' as 'Total_Years';\nStream2 = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', \"2.Future length of relationship (Agreed Upon)\" as 'Current_Planned_Flag', q.'Planned_Years' as 'Number of Years', q.'Total_Years' as 'Total_Years';\nStream3 = union Stream1, Stream2;\nresult = order Stream3 by ('Total_Years' desc);\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"multi","totalSumMode":"none","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"stackhbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"split":["Current_Planned_Flag"],"trellis":[],"dimensionAxis":["SalesAgreementProduct.SalesAgreement.Account.Name"],"plots":["Number of Years"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Total Length of Relationship(Years)","customDomain":{"showDomain":false}},"normalize":false,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Account_Value_2":{"broadcastFacet":true,"groups":["SalesAgreementProduct.SalesAgreement.Account.Name"],"label":"Account_Value","numbers":["PlannedAfterToday","RelationshipLength","Realization","CLV","Avg_Realization"],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = filter q by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nq = filter q by {{column(ActiveAccounts_1.result, [\"AccountId\"]).asEquality('SalesAgreementProduct.SalesAgreement.AccountId')}};\nq = foreach q generate 'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId',q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.AccountId' as 'AccountId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', q.'StartDate_sec_epoch' as 'StartDate_sec_epoch', q.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch' as 'EndDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount',\n    q.'DerivedActualAmount'/(daysBetween(toDate(q.'StartDate_sec_epoch'),case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1) as 'ActualDailyAmount',\n\n(case when toDate(q.'StartDate_sec_epoch') > now() then 0 else (daysBetween(toDate(q.'StartDate_sec_epoch'),\n   case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1)\n   end) as 'ActualDays_YTD', \nq.'PlannedDailyAmount' as 'PlannedDailyAmount',\n    case when toDate(q.'ActualEndDate_sec_epoch') >= now() then  daysBetween( case when toDate(q.'StartDate_sec_epoch') <= now() then now() else toDate(q.'StartDate_sec_epoch') end, \n    toDate(q.'ActualEndDate_sec_epoch'))+1 end as 'FutureDays';\n\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name','AccountId' as 'AccountId', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'EndDate_sec_epoch' as 'EndDate_sec_epoch', \n'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (q.'ActualDailyAmount'*q.'ActualDays_YTD') as  'RevenueTillToday', (q.'PlannedDailyAmount'*q.'ActualDays_YTD') as 'PlannedTillToday', (q.'PlannedDailyAmount'*q.'FutureDays') as 'PlannedAfterToday'; \n\nq = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name';\n\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', toDate(min('StartDate_sec_epoch')) as 'MinDate', toDate(max('EndDate_sec_epoch')) as 'MaxDate', sum(DerivedActualAmount) as 'Revenue', sum(PlannedAmountFinal) as 'PlannedAmount', sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday')) as 'PlannedAfterToday', sum('RevenueTillToday')+(sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday'))) as 'CLV', (sum('RevenueTillToday')+(sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday'))))/sum(PlannedAmountFinal) as 'Realization', \n    avg(((sum('RevenueTillToday')+(sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday'))))/sum(PlannedAmountFinal))) over ([..] partition by all) as 'Avg_Realization'; \n\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name','MinDate', 'MaxDate','PlannedAfterToday', {{row(CLV_1.selection,[0],[\"RelationshipLengthCalc\"]).asObject()}} as 'RelationshipLength', 'Realization', {{row(CLV_1.selection,[0],[\"value\"]).asObject()}} as 'CLV', 'Avg_Realization'*100 as 'Avg_Realization'; \n\nq = order q by 'SalesAgreementProduct.SalesAgreement.Account.Name' asc;\nq = limit q 2000;  ","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":["SalesAgreementProduct.SalesAgreement.Account.Name","MinDate","MaxDate"],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"scatter","title":{"fontSize":10,"subtitleFontSize":10,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"radiusRatio":5,"columnMap":{"r":["CLV"],"x":["RelationshipLength"],"y":["Realization"],"trellis":[],"plots":["AccountName"]},"showActionMenu":true,"x":{"sqrtScale":false,"showZero":true,"showTitle":true,"showAxis":true,"title":"{{row(CLV_1.selection,[0],[\"RelationshipLengthLabel\"]).asObject()}}","customDomain":{"showDomain":false}},"y":{"sqrtScale":false,"showZero":true,"showTitle":true,"showAxis":true,"referenceLines":[{"color":"#00a1e0","label":{"data":"Avg Realization","type":"static"},"value":{"data":"{{coalesce(cell(Account_Value_2.result,0,\"Avg_Realization\"),1).asObject()}}","type":"static"}}],"title":"Revenue Realization (To Date)","customDomain":{"showDomain":false}},"theme":"wave","applyConditionalFormatting":true},"type":"chart"}},"REVENUE_1":{"broadcastFacet":true,"columns":{"Display":{"type":"string"}},"label":"REVENUE","selectMode":"singlerequired","type":"staticflex","values":["{\"display\":\"Revenue Realization\",\"value\":\"Realization\",\"label\":\"REV REALIZATION\"}","{\"display\":\"Actual Revenue\",\"value\":\"Actual_Revenue\",\"label\":\"ACTUAL REVENUE\"}"]},"Forecast_Details_Table_1":{"broadcastFacet":true,"groups":[],"label":"Forecast Details Table","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.Account.Name' as 'Order.Account.Name','Order.Account.Owner.Name' as 'Order.Account.Owner.Name', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Account.Name' as 'Order.Account.Name', 'Account.Owner.Name' as 'Order.Account.Owner.Name', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_forecast;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nresult = group FilledData by 'Id' left, valid_slaps by 'Id';\nresult = foreach result generate  first(valid_slaps.'Order.Account.Name') as 'Order.Account.Name', first(valid_slaps.'Order.Account.Owner.Name') as 'Order.Account.Owner.Name', sum(FilledData.'Actual Amount') as 'Actual_Revenue', sum(FilledData.'Forecasted Amount') as 'ForecastedAmount';\nresult = group result by ('Order.Account.Name', 'Order.Account.Owner.Name');\nresult = foreach result generate 'Order.Account.Name' as  'Order.Account.Name', 'Order.Account.Owner.Name' as 'Order.Account.Owner.Name', sum('Actual_Revenue') as 'Actual_Revenue', sum('ForecastedAmount') as 'ForecastedAmount', (sum('Actual_Revenue')/sum('ForecastedAmount')) as 'Attainment';\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Date_Selector_1":{"broadcastFacet":false,"datasets":[{"name":"MFG_SalesAgreementProductSchedule"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"StartDate\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","start":"[[[\"fiscal_year\",0],[\"fiscal_year\",0]]]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Forecast_Realisation_1":{"broadcastFacet":true,"groups":[],"label":"Forecast Realisation by Account","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.Account.Name' as 'Order.Account.Name', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Account.Name' as 'Order.Account.Name', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_forecast;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nresult = group FilledData by 'Id' left, valid_slaps by 'Id';\nresult = foreach result generate  first(valid_slaps.'Order.Account.Name') as 'Order.Account.Name', sum(FilledData.'Actual Amount') as 'Actual_Revenue', sum(FilledData.'Forecasted Amount') as 'ForecastedAmount';\nresult = group result by 'Order.Account.Name';\nresult = foreach result generate 'Order.Account.Name', sum('Actual_Revenue') as 'Actual_Revenue', sum('ForecastedAmount') as 'Forecast_Revenue', (sum('Actual_Revenue')/sum('ForecastedAmount')) as 'Attainment';\nresult = foreach result generate 'Order.Account.Name', {{row(Forecast_Revenue_1.selection,[0],[\"value\",\"value\"]).asProjection()}};\nresult = order result by ('{{row(Forecast_Revenue_1.selection,[0],[\"value\"]).asObject()}}' desc nulls last);\nresult = limit result 2000;","receiveFacetSource":{"mode":"exclude","steps":["Forecast_Realisation_1"]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Forecast_Measures_1":{"broadcastFacet":true,"groups":[],"label":"Forecast Measures","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.Account.Name' as 'Order.Account.Name', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Account.Name' as 'Order.Account.Name', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_forecast;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nresult = group FilledData by ('Id','Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Forecasted Amount') as 'Forecast', (sum('Forecasted Amount')-sum('Actual Amount')) as 'Demand Shortfall';\nresult = group result by all;\nresult = foreach result generate sum('Forecast') as 'DerivedForecastedAmount', sum('Actual') as 'ActualRevenue', sum('Actual') - sum('Forecast') as 'Actual Forecast Difference', sum('Actual')/sum('Forecast') as 'Attainment';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Clone_of_SalesAgreem_1":{"broadcastFacet":true,"groups":[],"label":"Actual Vs Planned Revenue","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' in {{cell(static_2.selection,0,\"value\").asString()}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nresult = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name';\nresult = foreach result generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum(q.'DerivedActualAmount') as 'ActualRevenue', sum(q.'PlannedAmountFinal') as 'PlannedRevenue', sum(q.'DerivedActualAmount')-sum(q.'PlannedAmountFinal') as 'NetRevenue', ((sum(q.'DerivedActualAmount')-sum(q.'PlannedAmountFinal'))/sum(q.'PlannedAmountFinal')) as 'NetRevenuePercent';\nresult = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name', {{row(static_1.selection,[0],[\"value\",\"label\"]).asProjection()}};\nresult = order result by ('{{row(static_1.selection,[0],[\"label\"]).asObject()}}' desc);\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Forecast_Status_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_AccountProductPeriodForecast1"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Forecast.Status\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"RevenueRealization_1":{"broadcastFacet":true,"groups":[],"label":"RevenueRealization","numbers":["Revenue","ValidPlannedAmount","PlannedAmountTilldate","Realization"],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; valid_slaps = filter valid_slaps by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]); Start = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Planned Amount') as 'Plan', (sum('Planned Amount')-sum('Actual Amount')) as 'Demand Shortfall'; result = group result by all; result = foreach result generate sum('Plan') as 'ValidPlannedAmount', sum('Actual') as 'Revenue', sum('Actual')/sum('Plan') as 'Realization';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":"{{coalesce(cell(RevenueRealization_1.result,0,\"ValidPlannedAmount\"),0).asObject()}}","legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Revenue"],"showNullValues":true,"customizeLegend":true,"showPercentage":false,"showDimensions":true,"showMeasures":true,"dimensions":[]},"description":"[Realization] of  [ValidPlannedAmount]"}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":10,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":[],"plots":["Realization"]},"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","referenceLines":[{"color":"#00a1e0","label":{"data":"PLANNED","type":"static"},"value":{"data":"{{coalesce(cell(RevenueRealization_1.result,0,\"PlannedAmountTilldate\"),0).asObject()}}","type":"static"}}],"compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"AccountInFocus_Detai_2":{"broadcastFacet":true,"groups":[],"label":"AccountInFocus_Details","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' in {{cell(static_2.selection,0,\"value\").asString()}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = foreach q generate q.'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status', q.'StartDate' as 'StartDate', q.'EndDate' as 'EndDate', q.'SalesAgreementProduct.SalesAgreement.Account.Phone' as 'Phone', q.'SalesAgreementProduct.SalesAgreement.Contact.Email' as 'Email', case when q.'ActualEndDate_sec_epoch' < date_to_epoch(now()) then q.'DerivedActualAmount' end as 'PastActualAmount', case when q.'ActualEndDate_sec_epoch' < date_to_epoch(now()) then q.'PlannedAmountFinal' end as 'PastPlannedAmount', case when q.'StartDate_sec_epoch' < date_to_epoch(now()) and q.'ActualEndDate_sec_epoch' > date_to_epoch(now()) then q.'DerivedActualAmount' end as 'CurrentActualAmount', case when q.'StartDate_sec_epoch' < date_to_epoch(now()) and q.'ActualEndDate_sec_epoch' > date_to_epoch(now()) then q.'PlannedAmountFinal' end as 'CurrentPlannedAmount',q.'Schedule_Derived_Status' as 'Schedule_Derived_Status';\n\nresult = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status', q.'StartDate' as 'StartDate', q.'EndDate' as 'Schedule End Date',q.'Schedule_Derived_Status' as 'Schedule_Derived_Status', sum(q.'PastActualAmount') as 'Actual_Revenue', sum( q.'PastPlannedAmount') as 'Planned Revenue', sum(q.'PastActualAmount')-sum( q.'PastPlannedAmount') as 'Actual Vs Planned Revenue';\n\nresult = order result by ('SalesAgreementProduct.SalesAgreement.Account.Name' asc, 'SalesAgreementProduct.SalesAgreement.Name' asc, 'SalesAgreementProduct.SalesAgreement.Status' asc, 'StartDate' asc, 'Schedule End Date' asc);\n\n\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"AccountInFocus_Detai_1":{"broadcastFacet":true,"groups":[],"label":"AccountInFocus_Details","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' in [\"Activated\",\"Expired\"];\nq = filter q by date('EndDate_Year', 'EndDate_Month', 'EndDate_Day') in {{cell(DateFilter_Static_1.selection, 0, \"value\").asObject()}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = foreach q generate q.'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status', q.'ActivatedDate' as 'ActivatedDate', q.'SalesAgreementEndDate' as 'ExpiryDate', q.'SalesAgreementProduct.SalesAgreement.Account.Phone' as 'Phone', q.'SalesAgreementProduct.SalesAgreement.Contact.Email' as 'Email', case when q.'ActualEndDate_sec_epoch' < date_to_epoch(now()) then q.'DerivedActualAmount' end as 'PastActualAmount', case when q.'ActualEndDate_sec_epoch' < date_to_epoch(now()) then q.'PlannedAmountFinal' end as 'PastPlannedAmount', case when q.'StartDate_sec_epoch' < date_to_epoch(now()) and q.'ActualEndDate_sec_epoch' > date_to_epoch(now()) then q.'DerivedActualAmount' end as 'CurrentActualAmount', case when q.'StartDate_sec_epoch' < date_to_epoch(now()) and q.'ActualEndDate_sec_epoch' > date_to_epoch(now()) then q.'PlannedAmountFinal' end as 'CurrentPlannedAmount',q.'StartDate' as 'StartDate',q.'EndDate' as 'EndDate',q.'Schedule_Derived_Status' as 'Schedule_Derived_Status';\n\nresult = foreach q generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status',q.'StartDate' as 'StartDate',q.'EndDate' as 'Schedule End Date',q.'Schedule_Derived_Status' as 'Schedule_Derived_Status', sum(q.'PastActualAmount') as 'Actual_Revenue',sum( q.'PastPlannedAmount') as 'Planned Revenue',sum(q.'PastActualAmount')-sum( q.'PastPlannedAmount') as 'Actual Vs Planned Revenue';\n\nresult = order result by ('SalesAgreementProduct.SalesAgreement.Account.Name' asc, 'SalesAgreementProduct.SalesAgreement.Name' asc, 'SalesAgreementProduct.SalesAgreement.Status' asc, 'StartDate' asc, 'Schedule End Date' asc);\n\n\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"all_1":{"broadcastFacet":true,"groups":[],"label":"all_1","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; valid_slaps = filter valid_slaps by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]); Start = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Planned Amount') as 'Plan', (sum('Planned Amount')-sum('Actual Amount')) as 'Demand Shortfall'; result = group result by all; result = foreach result generate sum('Plan') as 'PlannedAmount', sum('Actual') as 'Revenue', sum('Actual')-sum('Plan') as 'C';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Relationship_Header_1":{"broadcastFacet":true,"groups":[],"label":"Relationship_Header","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by {{column(ActiveAccounts_1.result, [\"AccountId\"]).asEquality('SalesAgreementProduct.SalesAgreement.AccountId')}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId',q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.AccountId' as 'AccountId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'AccountName', q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch' as 'StartDate_sec_epoch', q.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch' as 'EndDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount',\nq.'DerivedActualAmount'/(daysBetween(toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch'),case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1) as 'ActualDailyAmount', \n(case when toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch') > now() then 0 else (daysBetween((case when toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch') < toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\") && toDate(q.'EndDate_sec_epoch') > toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\") then toDate((toString(now(), \"yyyy\")+\"-01-01\"), \"yyyy-MM-dd\") else toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch') end),case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1) end) as 'ActualDays_YTD', \nq.'PlannedDailyAmount' as 'PlannedDailyAmount',\n    case when toDate(q.'ActualEndDate_sec_epoch') > now() then  daysBetween( case when toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch') > now() then toDate(q.'SalesAgreementProduct.SalesAgreement.StartDate_sec_epoch') else now() end, toDate(q.'ActualEndDate_sec_epoch'))+1 end as 'FutureDays';\n\n\nq = foreach q generate q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'AccountName' as 'AccountName','AccountId' as 'AccountId', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'EndDate_sec_epoch' as 'EndDate_sec_epoch', \n'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (q.'ActualDailyAmount'*q.'ActualDays_YTD') as  'RevenueTillToday', (q.'PlannedDailyAmount'*q.'ActualDays_YTD') as 'PlannedTillToday', (q.'PlannedDailyAmount'*q.'FutureDays') as 'PlannedAfterToday'; \n\nresult = group q by all;\nresult = foreach result generate unique('AccountId') as 'NoOfAccounts', sum(q.'RevenueTillToday')+(sum(q.'PlannedAfterToday')* (sum(q.'RevenueTillToday')/sum(q.PlannedTillToday))) as 'RevenueGenerated', sum(q.'DerivedPlannedAmount') as 'PlannedRevenue', (sum(q.'RevenueTillToday')+(sum(q.'PlannedAfterToday')* (sum(q.'RevenueTillToday')/sum(q.PlannedTillToday))))/unique('AccountId') as 'Avg_Customer_Lifetime_Value';\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Relationship_Header_2":{"broadcastFacet":true,"groups":[],"label":"Relationship_Header","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by 'isValidProductSchedule' == \"true\";\n q = filter q by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nq = filter q by {{column(ActiveAccounts_1.result, [\"AccountId\"]).asEquality('SalesAgreementProduct.SalesAgreement.AccountId')}};\n--q = filter q by 'SalesAgreementProduct.SalesAgreementId'==\"0YAB00000004C93OAE\";\nq = foreach q generate 'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId',q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.AccountId' as 'AccountId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'AccountName', \n   q.'StartDate_sec_epoch' as 'StartDate_sec_epoch', q.'EndDate_sec_epoch' as 'EndDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount',\nq.'DerivedActualAmount'/(daysBetween(toDate(q.'StartDate_sec_epoch'),case when toDate(q.'EndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1) as 'ActualDailyAmount', \n\n(case when toDate(q.'StartDate_sec_epoch') > now() then 0 else (\n\ndaysBetween(toDate(q.'StartDate_sec_epoch'),\n   case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1)\n   end) as 'ActualDays_YTD', \n\nq.'PlannedDailyAmount' as 'PlannedDailyAmount',\n\n    case when toDate(q.'ActualEndDate_sec_epoch') >= now() then  daysBetween( case when toDate(q.'StartDate_sec_epoch') <= now() then now() else toDate(q.'StartDate_sec_epoch') end, \n    toDate(q.'ActualEndDate_sec_epoch'))+1 end as 'FutureDays';\n\n\nq = foreach q generate 'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId', q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'AccountName' as 'AccountName','AccountId' as 'AccountId', toDate('StartDate_sec_epoch') as 'StartDate_sec_epoch', toDate('EndDate_sec_epoch') as 'EndDate_sec_epoch', \n'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (q.'ActualDailyAmount'*q.'ActualDays_YTD') as  'RevenueTillToday', (q.'PlannedDailyAmount'*q.'ActualDays_YTD') as 'PlannedTillToday', (q.'PlannedDailyAmount'*q.'FutureDays') as 'PlannedAfterToday'; \n\nresult = group q by all;\nresult = foreach result generate unique('AccountId') as 'NoOfAccounts', sum(q.'RevenueTillToday') as 'RevenueTillToday',sum(q.PlannedTillToday) as 'PlannedTillToday', sum(q.'PlannedAfterToday') as 'PlannedAfterToday', sum(q.'RevenueTillToday')+(sum(q.'PlannedAfterToday')* (sum(q.'RevenueTillToday')/sum(q.PlannedTillToday))) as 'RevenueGenerated', sum(q.'DerivedPlannedAmount') as 'PlannedRevenue', (sum(q.'RevenueTillToday')+(sum(q.'PlannedAfterToday')* (sum(q.'RevenueTillToday')/sum(q.PlannedTillToday))))/unique('AccountId') as 'Avg_Customer_Lifetime_Value';\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"Date_Filter_1":{"broadcastFacet":true,"groups":[],"label":"Date_Filter","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = foreach q generate \"1970\" as 'Date_Year', \"01\" as 'Date_Month', \"01\" as 'Date_Day';\nq = group q by ('Date_Year', 'Date_Month', 'Date_Day');\nq = foreach q generate 'Date_Year', 'Date_Month', 'Date_Day', count() as 'sum';\n-- use fill() to generate null rows for any missing dates. Then you can use timeseries().\nq = fill q by (dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = timeseries q generate 'sum' as 'cnt' with (length=60000,  dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = foreach q generate 'Date_Year' + \"-\" + 'Date_Month' + \"-\" + 'Date_Day'+ \" 00:00:00\" as 'Date','Date_Year', 'Date_Month', 'Date_Day';\nq = filter q by {{row(Date_Selector_1.selection, [0], [\"min\", \"max\"]).asDateRange(\"date('Date_Year', 'Date_Month', 'Date_Day')\")}};\nq = foreach q generate toDate('Date') as 'Date', date_to_epoch(toDate('Date')) as 'Date_sec_epoch';\nq = group q by all;\nq = foreach q generate min('Date') as 'Min Date', toDate(max('Date_sec_epoch')+86399) as 'Max Date', min('Date_sec_epoch')*1000 as 'Min', (max('Date_sec_epoch')+86399)*1000 as 'Max',           date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))*1000 as 'Prev_Min', (date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))+86399)*1000 as 'Prev_Max';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Forecast_Revenue_1":{"broadcastFacet":true,"columns":{"value":{"type":"string"},"Display":{"type":"string"}},"label":"Forecast Revenue","selectMode":"singlerequired","type":"staticflex","values":["{\"Display\":\"Attainment\",\"value\":\"Attainment\"}","{\"Display\":\"Actual Revenue\",\"value\":\"Actual_Revenue\"}","{\"Display\":\"Forecast Revenue\",\"value\":\"Forecast_Revenue\"}"]},"RealtionshipDetailsT_1":{"broadcastFacet":true,"groups":[],"label":"RealtionshipDetailsTable","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = filter q by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nq = foreach q generate 'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId',q.'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', q.'SalesAgreementProduct.SalesAgreement.AccountId' as 'AccountId', \n'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name',\n'SalesAgreementProduct.SalesAgreement.Account.Type' as 'AccountType', 'SalesAgreementProduct.SalesAgreement.Account.BillingCountry' as 'AccountCountry', 'SalesAgreementProduct.SalesAgreement.Account.Industry' as 'Industry', q.'StartDate_sec_epoch' as 'StartDate_sec_epoch', q.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch' as 'EndDate_sec_epoch', 'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount',\nq.'DerivedActualAmount'/(daysBetween(toDate(q.'StartDate_sec_epoch'),case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1) as 'ActualDailyAmount', \n(case when toDate(q.'StartDate_sec_epoch') > now() then 0 else (daysBetween(toDate(q.'StartDate_sec_epoch'),\n   case when toDate(q.'ActualEndDate_sec_epoch') < now() then toDate(q.'ActualEndDate_sec_epoch') else now() end)+1)\n   end) as 'ActualDays_YTD', \nq.'PlannedDailyAmount' as 'PlannedDailyAmount',\n    case when toDate(q.'ActualEndDate_sec_epoch') >= now() then  daysBetween( case when toDate(q.'StartDate_sec_epoch') <= now() then now() else toDate(q.'StartDate_sec_epoch') end, \n    toDate(q.'ActualEndDate_sec_epoch'))+1 end as 'FutureDays',q.'SalesAgreementProduct.SalesAgreement.StartDate' as 'SalesAgreementProduct.SalesAgreement.StartDate',\n    q.'SalesAgreementProduct.SalesAgreement.EndDate' as 'SalesAgreementProduct.SalesAgreement.EndDate',\n    q.'SalesAgreementProduct.SalesAgreement.StatusCode' as 'SalesAgreementProduct.SalesAgreement.StatusCode';\nq = foreach q generate 'Id' as 'Id', q.'SalesAgreementProduct.SalesAgreementId' as 'SalesAgreementProduct.SalesAgreementId',  'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name','AccountId' as 'AccountId', 'AccountType' as 'AccountType','AccountCountry' as 'AccountCountry','Industry' as 'Industry', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'EndDate_sec_epoch' as 'EndDate_sec_epoch', \n'DerivedActualAmount' as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'DerivedPlannedAmount' as 'DerivedPlannedAmount', (q.'ActualDailyAmount'*q.'ActualDays_YTD') as  'RevenueTillToday', (q.'PlannedDailyAmount'*q.'ActualDays_YTD') as 'PlannedTillToday', (q.'PlannedDailyAmount'*q.'FutureDays') as 'PlannedAfterToday',\ncase when q.'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Activated\",\"Approved\"] then \nq.'SalesAgreementProduct.SalesAgreement.Name' end as 'SalesAgreementProduct.SalesAgreement.Name',\ncase when q.'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Activated\",\"Approved\"] then \nq.'SalesAgreementProduct.SalesAgreement.StartDate' end as 'SalesAgreementProduct.SalesAgreement.StartDate',\ncase when q.'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Activated\",\"Approved\"] then \n    q.'SalesAgreementProduct.SalesAgreement.EndDate' end as 'SalesAgreementProduct.SalesAgreement.EndDate'; \n\nq = order q by ('SalesAgreementProduct.SalesAgreement.Account.Name' asc, 'SalesAgreementProduct.SalesAgreement.EndDate' desc) ;\n\nq = group q by ('AccountId','SalesAgreementProduct.SalesAgreement.Account.Name','AccountType','AccountCountry','Industry');\n\nq = foreach q generate 'AccountId' as 'AccountId', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'AccountType' as 'AccountType','AccountCountry' as 'AccountCountry','Industry' as 'Industry', toDate(min('StartDate_sec_epoch')) as 'MinDate', toDate(max('EndDate_sec_epoch')) as 'MaxDate', sum('RevenueTillToday') as 'RevenueTillToday', sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday')) as 'PlannedAfterToday', sum('RevenueTillToday')+(sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday'))) as 'CLV', (sum('RevenueTillToday')+(sum('PlannedAfterToday')*(sum('RevenueTillToday')/sum('PlannedTillToday'))))/sum(PlannedAmountFinal) as 'Realization', case when toDate(min('StartDate_sec_epoch'))<now() then round(daysBetween(toDate(min('StartDate_sec_epoch')), case when toDate(max('EndDate_sec_epoch'))<now() then toDate(max('EndDate_sec_epoch')) else now() end)/365,2) else 0 end as 'Current_Years', case when toDate(max('EndDate_sec_epoch'))>now() then round(daysBetween(now(),toDate(max('EndDate_sec_epoch')))/365,2) else 0 end as 'Planned_Years',\nfirst(q.'SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name',\nfirst(q.'SalesAgreementProduct.SalesAgreement.StartDate') \n    as 'AgreementStartDate',\n    first(q.'SalesAgreementProduct.SalesAgreement.EndDate') as 'AgreementEndDate'\n;\n\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name','AccountType' as 'Account Type','Industry','AccountCountry' as 'Account Country',\n    'RevenueTillToday' as 'Actual Revenue (To Date)','Realization' as 'Revenue Realization (To Date)', 'Current_Years' \n     as 'Length of relationship(To Date)', 'Planned_Years' as 'Future Length of relationship (Agreed Upon)','PlannedAfterToday' as 'Planned Revenue(from Tomorrow)', 'CLV' as 'Customer Lifetime Value', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'AgreementStartDate' as 'Agreement Start Date', 'AgreementEndDate' as 'Agreement End Date' ; \n\nq = order q by 'SalesAgreementProduct.SalesAgreement.Account.Name' asc;\nq = limit q 2000; ","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":10},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"showRowIndexColumn":false,"totals":true,"verticalPadding":8},"type":"table"}},"AccountsToggle_1":{"broadcastFacet":true,"columns":{"Display":{"type":"string"}},"label":"AccountsToggle","selectMode":"singlerequired","type":"staticflex","values":["{\"display\":\"Active Accounts\",\"value\":\"[\\\"Activated\\\", \\\"Approved\\\"]\",\"label\":\"Active Accounts\",\"filtercondition\":\"\"}","{\"display\":\"All Accounts\",\"value\":\"[\\\"Activated\\\", \\\"Approved\\\", \\\"Cancelled\\\", \\\"Expired\\\"]\",\"label\":\"All Accounts\",\"filtercondition\":\"--\"}"]},"Overview_Details_1":{"broadcastFacet":true,"groups":[],"label":"Overview_Details","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; valid_slaps = filter valid_slaps by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]); Start = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by 'Id' left, valid_slaps by 'Id'; result = foreach result generate first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Status') as 'SalesAgreementProduct.SalesAgreement.Status', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Owner.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Owner.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.StartDate') as 'SalesAgreementProduct.SalesAgreement.StartDate', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.EndDate') as 'SalesAgreementProduct.SalesAgreement.EndDate', sum(FilledData.'Actual Amount') as 'Actual', sum(FilledData.'Planned Amount') as 'Plan', (sum(FilledData.'Planned Amount')-sum(FilledData.'Actual Amount')) as 'Demand Shortfall'; result = group result by ('SalesAgreementProduct.SalesAgreement.Account.Name','SalesAgreementProduct.SalesAgreement.Name','SalesAgreementProduct.SalesAgreement.Status','SalesAgreementProduct.SalesAgreement.Account.Owner.Name', 'SalesAgreementProduct.SalesAgreement.StartDate','SalesAgreementProduct.SalesAgreement.EndDate'); result = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'SalesAgreementProduct.SalesAgreement.Account.Owner.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Owner.Name','SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name','SalesAgreementProduct.SalesAgreement.Status' as 'SalesAgreementProduct.SalesAgreement.Status', case when now() >= toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\") then daysBetween(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"),toDate('SalesAgreementProduct.SalesAgreement.EndDate',\"yyyy-MM-dd\")) when now() >= toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\") then daysBetween(toDate('SalesAgreementProduct.SalesAgreement.StartDate',\"yyyy-MM-dd\"),toDate(date_to_string(now(),\"yyyy-MM-dd\"),\"yyyy-MM-dd\")) else 0 end as 'Active Days',  sum('Plan') as 'Planned Revenue', sum('Actual') as 'Actual Revenue', sum('Actual')/sum('Plan') as 'Revenue Realization';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"showRowIndexColumn":false,"verticalPadding":8},"type":"table"}},"Cumulative_Toggle_1":{"broadcastFacet":true,"columns":{"Forecast":{"type":"string"},"Actual":{"type":"string"},"Planned":{"type":"string"},"Display":{"type":"string"}},"label":"Cumulative Toggle","selectMode":"singlerequired","type":"staticflex","values":["{\"Display\":\"Cumulative\",\"Actual\":\"Cum_Actual\",\"Forecast\":\"Cum_Forecast\",\"Planned\":\"Cum_Planned\"}","{\"Display\":\"MoM\",\"Actual\":\"Actual\",\"Forecast\":\"Forecast\",\"Planned\":\"Planned\"}"]},"CLV_1":{"broadcastFacet":true,"columns":{"Display":{"type":"string"}},"label":"CLV","selectMode":"singlerequired","type":"staticflex","values":["{\"display\":\"Account Lifetime Value\",\"value\":\"CLV\",\"RelationshipLengthCalc\":\"round((daysBetween('MinDate', 'MaxDate')+1)/365, 2)\",\"RelationshipLengthLabel\":\"Total length of Relationship (Years)\",\"label\":\"Customer Litetime Value\",\"CLVText\":\"CLV of an account = Actual Revenue + (Planned revenue x Revenue Realization)\"}","{\"display\":\"Revenue              \",\"value\":\"Revenue\",\"RelationshipLengthCalc\":\"case when q.'MinDate'<now() then round(daysBetween(q.'MinDate', case when q.'MaxDate'<now() then q.'MaxDate' else now() end)/365,2) else 0 end\",\"RelationshipLengthLabel\":\"Length of Relationship (To Date)\",\"label\":\"Revenue\",\"CLVText\":\"\"}"]},"SalesAgreementProduc_2":{"broadcastFacet":true,"groups":[],"label":"SalesAgreementProduc_1","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by date('EndDate_Year', 'EndDate_Month', 'EndDate_Day') in {{cell(DateFilter_Static_1.selection, 0, \"value\").asObject()}};\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name';\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', \n    sum('PlannedAmountFinal') as 'Planned  Revenue', sum('DerivedActualAmount') as 'Actual Revenue', \n    sum('PlannedAmountFinal')-sum('DerivedActualAmount') as 'Outstanding  Revenue';\nq = order q by 'Outstanding  Revenue' desc;\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showPoints":false,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"line","dashLine":{"measures":"","showDashLine":false},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":true,"columnMap":{"split":[],"trellis":[],"dimensionAxis":["SalesAgreementProduct.SalesAgreement.Account.Name"],"plots":["Planned  Revenue","Actual Revenue"]},"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"}},"Revenue_Trend":{"broadcastFacet":false,"groups":[],"label":"RevenueTrend","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; valid_slaps = filter valid_slaps by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]); Start = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Planned Amount') as 'Plan', (sum('Planned Amount')-sum('Actual Amount')) as 'Demand Shortfall'; result = group result by ('Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', sum('Plan') as 'Planned_Revenue', sum('Actual') as 'Actual_Revenue';\nresult = order result by 'StartDate_Year~~~StartDate_Month' asc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":false,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":false,"predictiveLine":{"color":"#8932ED","label":"TODAY"},"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"plots":{"ActualAmount":{"mark":"bar"},"PlannedAmount":{"mark":"line"}},"columnMap":{"timeAxis":["StartDate_Year~~~StartDate_Month"],"trellis":[],"plots":["Actual_Revenue","Planned_Revenue"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"color":"#00a1e0","value":{"data":"0","type":"static"}},{"color":"#00a1e0","value":{"data":"0","type":"static"}}],"title":"Revenue","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"SalesAgreementProduc_3":{"broadcastFacet":true,"groups":[],"label":"SalesAgreementProduc_3","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; valid_slaps = filter valid_slaps by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]); Start = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 ||('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by 'Id' left, valid_slaps by 'Id'; result = foreach result generate  first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum(FilledData.'Actual Amount') as 'Actual_Revenue', sum(FilledData.'Planned Amount') as 'PlannedAmount';\nresult = group result by 'SalesAgreementProduct.SalesAgreement.Account.Name';\nresult = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name', sum('Actual_Revenue') as 'Actual_Revenue', (sum('Actual_Revenue')/sum('PlannedAmount')) as 'Realization';\nresult = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name', {{row(REVENUE_1.selection,[0],[\"value\",\"value\"]).asProjection()}};\nresult = order result by ('{{row(REVENUE_1.selection,[0],[\"value\"]).asObject()}}' desc);\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"static_2":{"broadcastFacet":true,"columns":{"Display":{"type":"string"}},"selectMode":"singlerequired","start":"{\"display\":[\"Active Agreements\"]}","type":"staticflex","values":["{\"display\":\"Active Agreements\",\"value\":\"[\\\"Activated\\\", \\\"Approved\\\"]\",\"label\":\"Active Agreements\"}","{\"display\":\"All Agreements\",\"value\":\"[\\\"Activated\\\", \\\"Approved\\\", \\\"Cancelled\\\", \\\"Expired\\\"]\",\"label\":\"All Agreements\"}"]},"DerivedActualAmount__1":{"broadcastFacet":true,"groups":[],"label":"DerivedActualAmount__1","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\";\nq = filter q by date('EndDate_Year', 'EndDate_Month', 'EndDate_Day') in {{cell(DateFilter_Static_1.selection, 0, \"value\").asObject()}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nresult = group q by all;\nresult = foreach result generate sum(q.'DerivedActualAmount') as 'DerivedActualAmount', sum(q.'PlannedAmountFinal') as 'PlannedAmount', sum(q.'PlannedAmountFinal') - sum(q.'DerivedActualAmount') as 'OutstandingAmount';\nresult = limit result 2000; ","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"ActiveAccounts_1":{"broadcastFacet":true,"groups":[],"label":"ActiveAccounts","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.StatusCode' in {{cell(AccountsToggle_1.selection,0, \"value\").asString()}};\nq = group q by 'SalesAgreementProduct.SalesAgreement.AccountId';\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.AccountId' as 'AccountId'; ","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"showRowIndexColumn":true,"totals":true,"verticalPadding":8},"type":"table"}},"static_1":{"broadcastFacet":true,"columns":{"Display":{"type":"string"}},"label":"","selectMode":"singlerequired","start":"{\"display\":[\"Percentage\"]}","type":"staticflex","values":["{\"display\":\"Percentage\",\"value\":\"NetRevenuePercent\",\"label\":\"Actual Vs Planned Revenue(%)\"}","{\"display\":\"Revenue\",\"value\":\"NetRevenue\",\"label\":\"Actual Vs Planned Revenue\"}"]},"DerivedActualAmount__2":{"broadcastFacet":true,"groups":[],"label":"DerivedActualAmount__2","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' in {{cell(static_2.selection,0,\"value\").asString()}};\nq = filter q by 'isValidProductSchedule' == \"true\";\nresult = group q by all;\nresult = foreach result generate sum(q.'DerivedActualAmount') as 'A', sum(q.'PlannedAmountFinal') as 'B';\nresult = foreach result generate 'A', 'B', A-B as 'NetRevenue', round(A*100/B,2) as 'NetRevenuePercent';\nresult = foreach result generate 'A', 'B','NetRevenue'; \nresult = limit result 2000; ","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"DateFilter_Static_1":{"broadcastFacet":true,"columns":{"Display":{"type":"string"}},"label":"DateFilter_Static","selectMode":"singlerequired","start":"{\"display\":[\"Quarter\"]}","type":"staticflex","values":["{\"display\":\"Month\",\"value\":\"[\\\"current month\\\"..\\\"current month\\\"]\"}","{\"display\":\"Quarter\",\"value\":\"[\\\"current quarter\\\"..\\\"current quarter\\\"]\"}","{\"display\":\"Year\",\"value\":\"[\\\"current year\\\"..\\\"current year\\\"]\"}"]},"Forecast_Planned_Rev_1":{"broadcastFacet":true,"groups":[],"label":"Forecast Planned Revenue","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_schedule = load \"MFG_SalesAgreementProductSchedule\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_schedule = filter all_slaps_schedule by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nall_slaps_schedule = filter all_slaps_schedule by 'isValidProductSchedule' == \"true\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_schedule = filter all_slaps_schedule by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_schedule = filter all_slaps_schedule by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount', 1 as 'Type';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 2 as 'Type';\nall_slaps_schedule = foreach all_slaps_schedule generate 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'SalesPrice' as 'SalesPrice', 'DiscountPercentage' as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'PlannedAmountFinal' as 'ForecastedAmountFinal', 'PlannedDailyAmount' as 'ForecastedDailyAmount', 3 as 'Type';\nvalid_slaps = union all_slaps_order, all_slaps_forecast, all_slaps_schedule;\nall_slaps_forecast = union all_slaps_forecast, all_slaps_schedule;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'Type' as 'Type',  'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'Type' as 'Type', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', 'Type' as 'Type', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Type' as 'Type', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', min(first('Type')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Type', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Type' as 'Type', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nFilledData = foreach FilledData generate 'Id' as 'Id', 'Date_Year', 'Date_Month', 'Actual Amount' as 'Actual Amount', case when 'Type' == 2 then 'Forecasted Amount' else 0 end as 'Forecasted Amount', case when 'Type' == 3 then 'Forecasted Amount' else 0 end as 'Planned Amount';\nresult = group FilledData by ('Id','Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Forecasted Amount') as 'Forecast', sum('Planned Amount') as 'PlannedAmount', (sum('Forecasted Amount')-sum('Actual Amount')) as 'Demand Shortfall';\nresult = group result by ('Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actual') as 'Actual', sum(sum('Actual')) over ([..0] partition by all order by 'Date_Year'+\"~~~\"+'Date_Month' asc) as 'Cum_Actual', sum('Forecast') as 'Forecast', sum(sum('Forecast')) over ([..0] partition by all order by 'Date_Year'+\"~~~\"+'Date_Month' asc) as 'Cum_Forecast', sum('PlannedAmount') as 'Planned', sum(sum('PlannedAmount')) over ([..0] partition by all order by 'Date_Year'+\"~~~\"+'Date_Month' asc) as 'Cum_Planned';\nresult = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'ServiceDate_Year~~~ServiceDate_Month', {{coalesce(cell(Cumulative_Toggle_1.selection,0,\"Actual\"),0).asObject()}} as 'ActualAmount',{{coalesce(cell(Cumulative_Toggle_1.selection,0,\"Forecast\"),0).asObject()}} as 'ForecastedAmount', {{coalesce(cell(Cumulative_Toggle_1.selection,0,\"Planned\"),0).asObject()}} as 'PlannedAmount';\nresult = order result by 'ServiceDate_Year~~~ServiceDate_Month' asc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"dual","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"timeAxis":["ServiceDate_Year~~~ServiceDate_Month"],"trellis":[],"plots":["ActualAmount","ForecastedAmount","PlannedAmount"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"color":"#00a1e0","value":{"data":"0","type":"static"}},{"color":"#00a1e0","value":{"data":"0","type":"static"}}],"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"SalesAgreementProduc_4":{"broadcastFacet":true,"groups":[],"label":"SalesAgreementProduc_1","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by date('EndDate_Year', 'EndDate_Month', 'EndDate_Day') in {{cell(DateFilter_Static_1.selection, 0, \"value\").asObject()}};\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Status' == \"Activated\";\nq = filter q by 'isValidProductSchedule' == \"true\";\nq = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name';\nq = foreach q generate 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum('PlannedAmountFinal') as 'Planned', sum('DerivedActualAmount') as 'Actual', sum('PlannedAmountFinal')-sum('DerivedActualAmount') as 'Outstanding Amount';\nq = order q by 'Outstanding Amount' desc;\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"vbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"binValues":false,"columnMap":{"trellis":[],"dimensionAxis":["SalesAgreementProduct.SalesAgreement.Account.Name"],"plots":["Outstanding Amount"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}}},"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1},"widgets":{"link_18":{"parameters":{"destinationLink":{"name":"eb5e70d9-9af9-42fc-a934-c6a9069bb355"},"destinationType":"page","fontSize":16,"includeState":false,"text":"","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_19":{"parameters":{"destinationLink":{"name":"d0cde39f-73b4-4ed9-a7b8-36f2231236ea"},"destinationType":"page","fontSize":16,"includeState":false,"text":"","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"text_18":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Actual Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_16":{"parameters":{"destinationLink":{"name":"eb5e70d9-9af9-42fc-a934-c6a9069bb355"},"destinationType":"page","fontSize":12,"includeState":false,"text":"VIEW DASHBOARD","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"text_17":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Planned Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_17":{"parameters":{"destinationLink":{"name":"eb5e70d9-9af9-42fc-a934-c6a9069bb355"},"destinationType":"page","fontSize":16,"includeState":false,"text":"","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_14":{"parameters":{"destinationLink":{"name":"affd9fef-3319-4206-840e-62d065d7b8c8"},"destinationType":"page","fontSize":14,"includeState":false,"text":"My Account Relationships","textAlignment":"center","textColor":"#335779"},"type":"link"},"container_14":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_19":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"10px","color":"#E6ECF2","align":"left"},"insert":"TOTAL NO OF ACCOUNTS"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_15":{"parameters":{"destinationLink":{"name":"eb5e70d9-9af9-42fc-a934-c6a9069bb355"},"destinationType":"page","fontSize":16,"includeState":false,"text":"","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_12":{"parameters":{"destinationLink":{"name":"affd9fef-3319-4206-840e-62d065d7b8c8"},"destinationType":"page","fontSize":14,"includeState":false,"text":"My Account Relationships","textAlignment":"center","textColor":"#335779"},"type":"link"},"text_14":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_13":{"parameters":{"destinationLink":{"name":"affd9fef-3319-4206-840e-62d065d7b8c8"},"destinationType":"page","fontSize":14,"includeState":false,"text":"My Account Relationships","textAlignment":"center","textColor":"#335779"},"type":"link"},"text_13":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_16":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Actual vs. Planned Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_10":{"parameters":{"destinationLink":{"name":"d0cde39f-73b4-4ed9-a7b8-36f2231236ea"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Overview","textAlignment":"center","textColor":"#335779"},"type":"link"},"text_15":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#7D98B3","align":"left"},"insert":"Performance based on past schedules of "}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_11":{"parameters":{"destinationType":"lens","fontSize":14,"includeState":false,"text":"My Account Relationships","textAlignment":"center","textColor":"rgb(0, 112, 210)"},"type":"link"},"text_10":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":"Accounts’ Health"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_12":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#335779","align":"left"},"insert":"How is my business performing against plan?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_11":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_9":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"vbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"columnMap":{"trellis":[],"dimensionAxis":["SalesAgreementProduct.SalesAgreement.Account.Name"],"plots":["Outstanding Amount"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"dark","step":"SalesAgreementProduc_4","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"text_3":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"left"},"insert":"Show Accounts by"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_2":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#7D98B3","align":"left"},"insert":"Based on currently active agreement schedules expiring this"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_5":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Planned Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_8":{"parameters":{"autoFitMode":"keepLabels","legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"scatter","exploreLink":true,"title":{"fontSize":10,"subtitleFontSize":10,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"radiusRatio":5,"columnMap":{"r":["CLV"],"x":["RelationshipLength"],"y":["Realization"],"trellis":[],"plots":["SalesAgreementProduct.SalesAgreement.Account.Name"]},"showActionMenu":true,"x":{"sqrtScale":false,"showZero":true,"showTitle":true,"showAxis":true,"title":"{{row(CLV_1.selection,[0],[\"RelationshipLengthLabel\"]).asObject()}}","customDomain":{"showDomain":false}},"y":{"sqrtScale":false,"showZero":true,"showTitle":true,"showAxis":true,"referenceLines":[{"color":"#00a1e0","label":{"data":"Avg Realization","type":"static"},"value":{"data":"{{coalesce(cell(Account_Value_2.result,0,\"Avg_Realization\"),1).asObject()}}","type":"static"}}],"title":"Revenue Realization (To Date)","customDomain":{"showDomain":false}},"theme":"dark","step":"Account_Value_2","applyConditionalFormatting":true},"type":"chart"},"text_4":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Outstanding Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_7":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"dark","step":"Clone_of_SalesAgreem_1","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"chart_2":{"parameters":{"autoFitMode":"keepLabels","legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"multi","totalSumMode":"none","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"stackhbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"columnMap":{"split":["Current_Planned_Flag"],"trellis":[],"dimensionAxis":["SalesAgreementProduct.SalesAgreement.Account.Name"],"plots":["Number of Years"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Total Length of Relationship(Years)","customDomain":{"showDomain":false}},"normalize":false,"valueType":"compactNumber","theme":"dark","step":"RelationshipLength_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"text_7":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"rgb(110, 160, 230)","align":"center"},"insert":"Accounts’ performance against plan"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_6":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Actual Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_1":{"parameters":{"autoFitMode":"none","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"colorblind","step":"SalesAgreementProduc_3","dimensionAxis":{"showTitle":false,"customSize":30,"showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"chart_4":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"vbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"columnMap":{"trellis":[],"dimensionAxis":["SalesAgreementProduct.SalesAgreement.Account.Name"],"plots":["Planned  Revenue","Actual Revenue"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"dark","step":"SalesAgreementProduc_2","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"text_9":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_8":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_28":{"parameters":{"destinationLink":{"name":"eb5e70d9-9af9-42fc-a934-c6a9069bb355"},"destinationType":"page","fontSize":18,"includeState":false,"text":"Sales Forecast","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"text_1":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#E6ECF2","align":"left"},"insert":"Which Accounts do I need to follow up with for order inflow?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_25":{"parameters":{"destinationLink":{"name":"d0cde39f-73b4-4ed9-a7b8-36f2231236ea"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Accounts’ performance against plan","textAlignment":"center","textColor":"rgb(110, 160, 230)"},"type":"link"},"link_23":{"parameters":{"destinationLink":{"name":"d0cde39f-73b4-4ed9-a7b8-36f2231236ea"},"destinationType":"page","fontSize":16,"includeState":false,"text":"","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_24":{"parameters":{"destinationLink":{"name":"d0cde39f-73b4-4ed9-a7b8-36f2231236ea"},"destinationType":"page","fontSize":16,"includeState":false,"text":"","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_21":{"parameters":{"destinationLink":{"name":"eb5e70d9-9af9-42fc-a934-c6a9069bb355"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Accounts’ performance against forecast","textAlignment":"center","textColor":"rgb(110, 160, 230)"},"type":"link"},"link_20":{"parameters":{"destinationLink":{"name":"d0cde39f-73b4-4ed9-a7b8-36f2231236ea"},"destinationType":"page","fontSize":12,"includeState":false,"text":"VIEW DASHBOARD","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"number_4":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"DerivedActualAmount","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"DerivedActualAmount__1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_3":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"PlannedAmount","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"DerivedActualAmount__1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_2":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"NetRevenue","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"DerivedActualAmount__2","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_1":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"OutstandingAmount","numberColor":"rgb(230, 236, 242)","numberSize":24,"showActionMenu":true,"step":"DerivedActualAmount__1","textAlignment":"left","title":"","titleColor":"rgb(9, 26, 62)","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"container_12":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_11":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_10":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"number_9":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"A","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"DerivedActualAmount__2","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_8":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"B","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"DerivedActualAmount__2","textAlignment":"left","title":"","titleColor":"rgba(9, 26, 62, 0)","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"link_31":{"parameters":{"destinationLink":{"name":"d0cde39f-73b4-4ed9-a7b8-36f2231236ea"},"destinationType":"page","fontSize":18,"includeState":false,"text":"Planned Business","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"link_3":{"parameters":{"destinationLink":{"name":"32e04838-d3ff-4554-b350-dbf372b7b843"},"destinationType":"page","fontSize":16,"includeState":false,"text":"OVERVIEW","textAlignment":"center","textColor":"#091A3E"},"type":"link"},"link_4":{"parameters":{"destinationLink":{"name":"63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Accounts In Focus","textAlignment":"center","textColor":"rgb(84, 105, 141)"},"type":"link"},"link_1":{"parameters":{"destinationLink":{"name":"125726a0-29bd-48b9-af08-393c33e20ede"},"destinationType":"page","fontSize":16,"includeState":false,"text":"Which are my best and worst performing accounts?","textAlignment":"left","textColor":"rgb(255, 255, 255)"},"type":"link"},"link_2":{"parameters":{"destinationLink":{"name":"63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f"},"destinationType":"page","fontSize":16,"includeState":false,"text":"Which Accounts do I need to follow up with for order inflow?","textAlignment":"left","textColor":"#E6ECF2"},"type":"link"},"pillbox_10":{"parameters":{"compact":false,"exploreLink":false,"fontSize":12,"selectedTab":{"backgroundColor":"#335779","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderWidth":0,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"Cumulative_Toggle_1","textColor":"#335779"},"type":"pillbox"},"table_1":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"showRowIndexColumn":false,"step":"AccountInFocus_Detai_2","totals":true,"verticalPadding":8},"type":"table"},"table_2":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":10},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"showRowIndexColumn":false,"step":"RealtionshipDetailsT_1","totals":true,"verticalPadding":8},"type":"table"},"link_9":{"parameters":{"destinationLink":{"name":"63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Accounts In Focus","textAlignment":"center","textColor":"rgb(84, 105, 141)"},"type":"link"},"table_3":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"showRowIndexColumn":false,"step":"AccountInFocus_Detai_1","totals":true,"verticalPadding":8},"type":"table"},"table_4":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"showActionMenu":true,"showRowIndexColumn":false,"step":"Overview_Details_1","verticalPadding":8},"type":"table"},"link_7":{"parameters":{"destinationLink":{"name":"63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f"},"destinationType":"page","fontSize":16,"includeState":false,"text":"ACCOUNTS IN FOCUS","textAlignment":"center","textColor":"#0D34B6"},"type":"link"},"table_5":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"showActionMenu":true,"showRowIndexColumn":false,"step":"Forecast_Details_Table_1","verticalPadding":8},"type":"table"},"pillbox_1":{"parameters":{"compact":false,"displayTemplate":"[]","exploreLink":false,"fontSize":12,"selectedTab":{"backgroundColor":"rgb(51, 87, 121)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderWidth":0,"textColor":"#C6D3E1"},"showActionMenu":false,"step":"DateFilter_Static_1","textColor":"rgb(198, 211, 225)"},"type":"pillbox"},"link_8":{"parameters":{"destinationLink":{"name":"d0cde39f-73b4-4ed9-a7b8-36f2231236ea"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Overview","textAlignment":"center","textColor":"rgb(0, 112, 210)"},"type":"link"},"pillbox_4":{"parameters":{"compact":false,"exploreLink":false,"fontSize":10,"selectedTab":{"backgroundColor":"#335779","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderWidth":0,"textColor":"#C6D3E1"},"showActionMenu":false,"step":"static_1","textColor":"#E6ECF2"},"type":"pillbox"},"link_5":{"parameters":{"destinationLink":{"name":"d0cde39f-73b4-4ed9-a7b8-36f2231236ea"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Overview","textAlignment":"center","textColor":"rgb(84, 105, 141)"},"type":"link"},"link_6":{"parameters":{"destinationLink":{"name":"63e8ac36-e5bc-4abd-bf67-f7a1e2e29c1f"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Accounts In Focus","textAlignment":"center","textColor":"rgb(0, 112, 210)"},"type":"link"},"pillbox_3":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"#335779","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderWidth":1,"textColor":"#C6D3E1"},"showActionMenu":false,"step":"CLV_1","textColor":"#E6ECF2"},"type":"pillbox"},"pillbox_6":{"parameters":{"compact":false,"exploreLink":false,"fontSize":10,"selectedTab":{"backgroundColor":"#0070D2","borderColor":"#C6D3E1","borderEdges":["all"],"borderWidth":1,"textColor":"#FFFFFF"},"showActionMenu":true,"step":"AccountsToggle_1","textColor":"#0070D2"},"type":"pillbox"},"pillbox_5":{"parameters":{"compact":false,"exploreLink":false,"fontSize":12,"selectedTab":{"backgroundColor":"#335779","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderWidth":1,"textColor":"#C6D3E1"},"showActionMenu":false,"step":"static_2","textColor":"#E6ECF2"},"type":"pillbox"},"pillbox_8":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"#335779","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderWidth":1,"textColor":"#C6D3E1"},"showActionMenu":false,"step":"AccountsToggle_1","textColor":"#C6D3E1"},"type":"pillbox"},"pillbox_7":{"parameters":{"compact":false,"exploreLink":false,"fontSize":12,"selectedTab":{"backgroundColor":"#335779","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderWidth":0,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"REVENUE_1","textColor":"#335779"},"type":"pillbox"},"number_12":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"NoOfAccounts","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"Relationship_Header_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_11":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"PlannedRevenue","numberColor":"#E6ECF2","numberSize":16,"showActionMenu":true,"step":"Relationship_Header_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_10":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"NoOfAccounts","numberColor":"#E6ECF2","numberSize":16,"showActionMenu":true,"step":"Relationship_Header_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_19":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"C","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"all_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_18":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"PlannedAmount","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"all_1","textAlignment":"left","title":"","titleColor":"rgb(9, 26, 62)","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_17":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Avg_Customer_Lifetime_Value","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"Relationship_Header_2","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_16":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Revenue","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"all_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_54":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#FFFFFF","align":"center"},"insert":"Sales Forecast"}]},"interactions":[],"showActionMenu":false},"type":"text"},"number_15":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"RevenueTillToday","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"Relationship_Header_2","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_53":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#FFFFFF","align":"center"},"insert":"Planned Business"}]},"interactions":[],"showActionMenu":false},"type":"text"},"number_14":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"PlannedAfterToday","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"Relationship_Header_2","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_13":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"NoOfAccounts","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"Relationship_Header_2","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_50":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Forecasted Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_52":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Actual (Orders) vs. Forecasted Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_1":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_51":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Actual Revenue (Orders)"}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_2":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_4":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_5":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_6":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_7":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_9":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"number_22":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Actual Forecast Difference","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"Forecast_Measures_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_21":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"DerivedForecastedAmount","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"Forecast_Measures_1","textAlignment":"left","title":"","titleColor":"rgb(9, 26, 62)","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_20":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"ActualRevenue","numberColor":"#E6ECF2","numberSize":24,"showActionMenu":true,"step":"Forecast_Measures_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"image_4":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"fitwidth","image":{"name":"arrowpng3","namespace":""},"interactions":[]},"type":"image"},"dateselector_1":{"parameters":{"absoluteModeEnabled":true,"calendarTypeSwitchingAllowed":true,"defaultFiscalMode":false,"displayMode":"filter","filterStyle":{"titleColor":"#335779","valueColor":"#335779"},"instant":false,"presetsEnabled":true,"relativeModeEnabled":true,"showActionMenu":false,"step":"Date_Selector_1","title":""},"type":"dateselector"},"image_6":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"fitwidth","image":{"name":"arrowpng3","namespace":""},"interactions":[]},"type":"image"},"filterpanel_2":{"parameters":{"filterItemOptions":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderRadius":4,"borderWidth":0,"propertyColor":"#54698D","valueColor":"#16325C"},"filters":[],"itemsPerRow":6,"showAllFilters":true,"title":{"separatorColor":"#E6ECF2","text":{"align":"left","color":"#091A3E","fontSize":16,"label":"Filters"},"visible":false}},"type":"filterpanel"},"filterpanel_1":{"parameters":{"filterItemOptions":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderRadius":4,"borderWidth":1,"propertyColor":"#54698D","valueColor":"#16325C"},"filters":[],"itemsPerRow":6,"showAllFilters":true,"title":{"separatorColor":"#E6ECF2","text":{"align":"left","color":"#091A3E","fontSize":16,"label":"Filters"},"visible":false}},"type":"filterpanel"},"text_46":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#335779","align":"left"},"insert":"Revenue trend over time by"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_43":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"rgb(110, 160, 230)","align":"center"},"insert":"Accounts’ performance against forecast"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_42":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_45":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#335779","align":"left"},"insert":"How is my business performing against forecast ?"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_44":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"left"},"insert":"Show Accounts by"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_41":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_40":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"right"},"insert":"Date Range:"}]},"interactions":[],"showActionMenu":true},"type":"text"},"image_1":{"parameters":{"alignmentX":"center","alignmentY":"center","fit":"fitwidth","image":{"name":"manufacturing_app_icon2xpng8","namespace":""},"interactions":[]},"type":"image"},"image_2":{"parameters":{"alignmentX":"center","alignmentY":"center","fit":"fitwidth","image":{"name":"manufacturing_app_icon2xpng8","namespace":""},"interactions":[]},"type":"image"},"chart_14":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["ActualAmount","ForecastedAmount","PlannedAmount"],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":["ServiceDate_Year~~~ServiceDate_Month"]}}},"visualizationType":"time-combo","missingValue":"connect","exploreLink":true,"timeAxis":{"showTitle":false,"predictiveLine":{"color":"#8932ED","label":"TODAY"},"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"plots":{"ForecastedAmount":{"mark":"line"},"ActualAmount":{"mark":"bar"},"PlannedAmount":{"mark":"line"}},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"color":"#00a1e0","value":{"data":"0","type":"static"}},{"color":"#00a1e0","value":{"data":"0","type":"static"}}],"title":"Revenue","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"light","step":"Forecast_Planned_Rev_1","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"chart_13":{"parameters":{"autoFitMode":"none","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"colorblind","step":"Forecast_Realisation_1","dimensionAxis":{"showTitle":false,"customSize":30,"showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"chart_12":{"parameters":{"autoFitMode":"keepLabels","max":1,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["ActualRevenue"],"showNullValues":true,"customizeLegend":true,"showPercentage":false,"showDimensions":true,"showMeasures":true,"dimensions":[]},"description":"[Attainment] of  [DerivedForecastedAmount]"}},"visualizationType":"flatgauge","medium":33,"exploreLink":true,"title":{"fontSize":10,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":[],"plots":["Attainment"]},"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","step":"Forecast_Measures_1","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"chart_11":{"parameters":{"autoFitMode":"keepLabels","max":1,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Revenue"],"showNullValues":true,"customizeLegend":true,"showPercentage":false,"showDimensions":true,"showMeasures":true,"dimensions":[]},"description":"[Realization] of  [ValidPlannedAmount]"}},"visualizationType":"flatgauge","medium":33,"exploreLink":true,"title":{"fontSize":10,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":[],"plots":["Realization"]},"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","step":"RevenueRealization_1","referenceLines":[],"compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"chart_10":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","exploreLink":true,"timeAxis":{"showTitle":false,"predictiveLine":{"color":"rgb(137, 50, 237)","label":"TODAY"},"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"plots":{"Actual_Revenue":{"mark":"bar"},"Planned_Revenue":{"mark":"line"}},"columnMap":{"timeAxis":["StartDate_Year~~~StartDate_Month"],"trellis":[],"plots":["Actual_Revenue","Planned_Revenue"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"color":"#00a1e0","value":{"data":"0","type":"static"}},{"color":"#00a1e0","value":{"data":"0","type":"static"}}],"title":"Revenue","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"light","step":"Revenue_Trend","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"text_39":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Actual vs. Planned Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_36":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"left"},"insert":"Metrics are calculated for the specified period."}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_35":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_38":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Planned Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_37":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Actual Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_32":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#335779","align":"left"},"insert":"Revenue Over Time"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_31":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Average Account Lifetime Value"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_34":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":"Details"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_33":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#E6ECF2","align":"center"},"insert":"{{row(CLV_1.selection,[0],[\"CLVText\"]).asObject()}}"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_30":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Planned Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"filterpanel_3":{"parameters":{"filterItemOptions":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderRadius":4,"borderWidth":1,"propertyColor":"#54698D","valueColor":"#16325C"},"filters":[],"itemsPerRow":6,"showAllFilters":true,"title":{"separatorColor":"#E6ECF2","text":{"align":"left","color":"#091A3E","fontSize":16,"label":"Filters"},"visible":false}},"type":"filterpanel"},"text_29":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Actual Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_28":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Total Accounts"}]},"interactions":[],"showActionMenu":true},"type":"text"},"listselector_2":{"parameters":{"compact":false,"displayMode":"filter","displayTemplate":"[Forecast.Status]","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":false,"step":"Forecast_Status_1","title":"Forecast Status"},"type":"listselector"},"text_25":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"10px","color":"#E6ECF2","align":"left"},"insert":"AVG CUSTOMER LIFETIME VALUE"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_24":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#E6ECF2","align":"left"},"insert":"Which are my most and least valuable accounts?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_27":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#E6ECF2","align":"left"},"insert":"Which are my most and least valuable accounts?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_26":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"rgb(255, 255, 255)","align":"left"},"insert":"How long are my accounts’ relationships?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_21":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"10px","color":"#E6ECF2","align":"left"},"insert":"TOTAL REVENUE GENERATED"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_20":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#E6ECF2","align":"right"},"insert":"Actual vs. Planned Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_23":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#E6ECF2","align":"left"},"insert":"What is the relationship length of my accounts?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_22":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"10px","color":"#E6ECF2","align":"left"},"insert":"TOTAL PLANNED REVENUE"}]},"interactions":[],"showActionMenu":true},"type":"text"},"listselector_1":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#335779","valueColor":"#335779"},"instant":true,"showActionMenu":false,"step":"Forecast_Revenue_1","title":""},"type":"listselector"}}}