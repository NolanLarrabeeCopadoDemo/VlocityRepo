{"dataSourceLinksInfo":{"enableAutomaticLinking":false,"excludeRelationships":[],"links":[{"fields":[{"dataSourceName":"ProgramRebateTypePayoutSourceMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"MemberPayout.PayoutPeriods.RebateProgram.Name"},{"dataSourceName":"RebateProgramMemberMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"RebateProgram.Name"},{"dataSourceName":"ProgramRebateTypeMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"RebateProgram.Name"},{"dataSourceName":"RebatePaymentMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"MemberPayout.PayoutPeriods.RebateProgram.Name"}],"label":"Program Name Connection","name":"Link_484"},{"fields":[{"dataSourceName":"RebatePaymentMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Name"},{"dataSourceName":"ProgramRebateTypePayoutSourceMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"MemberPayout.RebatePayment.Name"}],"label":"Payment Name Connection","name":"Link_916"},{"fields":[{"dataSourceName":"RebatePaymentMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Status"},{"dataSourceName":"ProgramRebateTypePayoutSourceMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"MemberPayout.RebatePayment.Status"}],"label":"Payment Status Connection","name":"Link_945"},{"fields":[{"dataSourceName":"OrderMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Product.Name"},{"dataSourceName":"ProgramRebateTypePayoutSourceMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Product.Name"}],"label":"Product Connection","name":"Link_21218"},{"fields":[{"dataSourceName":"RebateProgramMemberMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Name"},{"dataSourceName":"ProgramRebateTypePayoutSourceMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"MemberPayout.Member.Name"},{"dataSourceName":"OrderMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Name"},{"dataSourceName":"RebatePaymentMaster","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"MemberPayout.Member.Name"}],"label":"Account Connection","name":"Link_21249"}]},"filters":[],"gridLayouts":[{"maxWidth":1500,"name":"Default","numColumns":50,"pages":[{"label":"Purchase","name":"8a61610b-9f15-4256-9291-ac270544f830","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_2","row":0,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":1,"name":"listselector_1","row":1,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"dateselector_1","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"text_4","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"dateselector_2","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"text_6","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_4","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_7","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"text_8","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_5","row":12,"rowspan":42,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_9","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":2,"name":"number_3","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderEdges":[]}},{"colspan":11,"column":13,"name":"text_5","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":13,"name":"number_4","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":4,"name":"text_10","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":16,"name":"text_11","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":27,"name":"text_13","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":27,"name":"number_5","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":29,"name":"text_14","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"text_12","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":40,"name":"number_6","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":43,"name":"text_15","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":1,"name":"text_16","row":13,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_17","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":2,"name":"chart_5","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":40,"column":9,"name":"chart_6","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_7","row":32,"rowspan":21,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":1,"name":"container_3","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":3,"name":"link_1","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":1,"column":0,"name":"text_18","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":39,"column":11,"name":"container_6","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":11,"name":"link_2","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":21,"name":"link_3","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":31,"name":"link_4","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":1,"name":"chart_8","row":60,"rowspan":20,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":14,"name":"chart_9","row":63,"rowspan":17,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":14,"name":"text_19","row":60,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":33,"name":"chart_11","row":64,"rowspan":16,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":33,"name":"text_20","row":60,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":40,"name":"pillbox_7","row":60,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"chart_23","row":87,"rowspan":18,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":20,"column":1,"name":"text_21","row":83,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"pillbox_8","row":83,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":1,"name":"text_22","row":107,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"table_1","row":110,"rowspan":15,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_9","row":58,"rowspan":69,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["all"],"borderRadius":0,"borderWidth":1}}]},{"label":"Incentives","name":"6eb36708-182e-42dc-81f0-31b2931bdaf0","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_2","row":0,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":1,"name":"listselector_1","row":1,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"dateselector_1","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"text_4","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"dateselector_2","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"text_6","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_4","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_7","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"text_8","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_5","row":12,"rowspan":42,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_9","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":2,"name":"number_3","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderEdges":[]}},{"colspan":11,"column":13,"name":"text_5","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":13,"name":"number_4","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":4,"name":"text_10","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":16,"name":"text_11","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":27,"name":"text_13","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":27,"name":"number_5","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":29,"name":"text_14","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"text_12","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":40,"name":"number_6","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":43,"name":"text_15","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":1,"name":"text_16","row":13,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_17","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":2,"name":"chart_5","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":40,"column":9,"name":"chart_6","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_7","row":32,"rowspan":21,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_18","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_9","row":58,"rowspan":6,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":1,"name":"container_10","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":3,"name":"link_13","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"rgb(0, 112, 210)","borderEdges":[],"borderRadius":0,"borderWidth":4}},{"colspan":29,"column":21,"name":"container_11","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":21,"name":"link_18","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":31,"name":"link_19","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":27,"column":1,"name":"text_26","row":60,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":48,"column":1,"name":"container_14","row":64,"rowspan":6,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":3,"name":"text_28","row":65,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":3,"name":"number_7","row":67,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":12,"name":"text_29","row":65,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":28,"column":1,"name":"chart_12","row":96,"rowspan":30,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":12,"name":"number_8","row":67,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":21,"name":"text_23","row":65,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":21,"name":"number_9","row":67,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":30,"name":"text_24","row":65,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":30,"name":"number_10","row":67,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"text_25","row":65,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"number_11","row":67,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_7","row":70,"rowspan":111,"widgetStyle":{"borderEdges":[]}},{"colspan":1,"column":49,"name":"text_27","row":64,"rowspan":6,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_30","row":64,"rowspan":6,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"chart_15","row":75,"rowspan":18,"widgetStyle":{"borderEdges":[]}},{"colspan":19,"column":29,"name":"chart_13","row":97,"rowspan":29,"widgetStyle":{"borderEdges":[]}},{"colspan":19,"column":2,"name":"chart_14","row":129,"rowspan":24,"widgetStyle":{"borderEdges":[]}},{"colspan":20,"column":29,"name":"chart_17","row":129,"rowspan":24,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":12,"name":"link_5","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":47,"column":2,"name":"table_4","row":160,"rowspan":19,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":2,"name":"link_20","row":156,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":7,"column":9,"name":"link_27","row":156,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":41,"name":"pillbox_1","row":71,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}}]},{"label":"Payments","name":"8e86b661-a2c4-41c6-8b4f-b269bf39f8fb","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_2","row":0,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":1,"name":"listselector_1","row":1,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"dateselector_1","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"text_4","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"dateselector_2","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"text_6","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_4","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_7","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"text_8","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_5","row":12,"rowspan":42,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_9","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":2,"name":"number_3","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderEdges":[]}},{"colspan":11,"column":13,"name":"text_5","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":13,"name":"number_4","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":4,"name":"text_10","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":16,"name":"text_11","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":27,"name":"text_13","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":27,"name":"number_5","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":29,"name":"text_14","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"text_12","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":40,"name":"number_6","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":43,"name":"text_15","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":1,"name":"text_16","row":13,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_17","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":2,"name":"chart_5","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":40,"column":9,"name":"chart_6","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_7","row":32,"rowspan":21,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_18","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_9","row":58,"rowspan":6,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":1,"name":"container_10","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":3,"name":"link_13","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"rgb(0, 112, 210)","borderEdges":[],"borderRadius":0,"borderWidth":4}},{"colspan":29,"column":21,"name":"container_11","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":21,"name":"link_18","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":31,"name":"link_19","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":27,"column":1,"name":"text_26","row":60,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":48,"column":1,"name":"container_14","row":64,"rowspan":6,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":3,"name":"text_28","row":65,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":3,"name":"number_7","row":67,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":12,"name":"text_29","row":65,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":28,"column":1,"name":"chart_12","row":96,"rowspan":30,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":12,"name":"number_8","row":67,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":21,"name":"text_23","row":65,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":21,"name":"number_9","row":67,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":30,"name":"text_24","row":65,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":30,"name":"number_10","row":67,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"text_25","row":65,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"number_11","row":67,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_7","row":70,"rowspan":111,"widgetStyle":{"borderEdges":[]}},{"colspan":1,"column":49,"name":"text_27","row":64,"rowspan":6,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_30","row":64,"rowspan":6,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"chart_15","row":75,"rowspan":18,"widgetStyle":{"borderEdges":[]}},{"colspan":19,"column":29,"name":"chart_13","row":97,"rowspan":29,"widgetStyle":{"borderEdges":[]}},{"colspan":19,"column":2,"name":"chart_14","row":129,"rowspan":24,"widgetStyle":{"borderEdges":[]}},{"colspan":20,"column":29,"name":"chart_17","row":129,"rowspan":24,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":41,"name":"pillbox_7","row":71,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":12,"name":"link_5","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":7,"column":2,"name":"link_28","row":156,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":[],"borderRadius":0,"borderWidth":4}},{"colspan":7,"column":9,"name":"link_29","row":156,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":47,"column":2,"name":"table_2","row":160,"rowspan":19,"widgetStyle":{"borderEdges":[]}}]},{"label":"Pricing","name":"93112a49-c1eb-438f-a517-20f7fa2f8334","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_2","row":0,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":1,"name":"listselector_1","row":1,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"dateselector_1","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"text_4","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"dateselector_2","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"text_6","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_4","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_7","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"text_8","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_5","row":12,"rowspan":42,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_9","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":2,"name":"number_3","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderEdges":[]}},{"colspan":11,"column":13,"name":"text_5","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":13,"name":"number_4","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":4,"name":"text_10","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":16,"name":"text_11","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":27,"name":"text_13","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":27,"name":"number_5","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":29,"name":"text_14","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"text_12","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":40,"name":"number_6","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":43,"name":"text_15","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":1,"name":"text_16","row":13,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_17","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":2,"name":"chart_5","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":40,"column":9,"name":"chart_6","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_7","row":32,"rowspan":21,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_18","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":19,"column":31,"name":"container_6","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":31,"name":"link_4","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":20,"column":1,"name":"container_8","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":2,"name":"link_11","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":11,"name":"link_22","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":21,"name":"container_12","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":23,"name":"link_24","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":50,"column":0,"name":"container_13","row":58,"rowspan":67,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"chart_10","row":60,"rowspan":28,"widgetStyle":{"borderEdges":[]}},{"colspan":48,"column":1,"name":"table_3","row":94,"rowspan":28,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":1,"name":"text_45","row":91,"rowspan":3,"widgetStyle":{"borderEdges":[]}}]},{"label":"Whats Next","name":"9f1a7df1-84ae-49b9-8d28-d069b3122c91","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_2","row":0,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":1,"name":"listselector_1","row":1,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"dateselector_1","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"text_4","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"dateselector_2","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"text_6","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_4","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_7","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"text_8","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_5","row":12,"rowspan":42,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_9","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":2,"name":"number_3","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderEdges":[]}},{"colspan":11,"column":13,"name":"text_5","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":13,"name":"number_4","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":4,"name":"text_10","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":16,"name":"text_11","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":27,"name":"text_13","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":27,"name":"number_5","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":29,"name":"text_14","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"text_12","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":40,"name":"number_6","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":43,"name":"text_15","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":1,"name":"text_16","row":13,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_17","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":2,"name":"chart_5","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":40,"column":9,"name":"chart_6","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_7","row":32,"rowspan":21,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_18","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":30,"column":1,"name":"container_15","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":2,"name":"link_9","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":11,"name":"link_10","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":42,"name":"container_17","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":22,"name":"link_21","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":31,"name":"container_18","row":54,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":33,"name":"link_26","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":50,"column":0,"name":"container_19","row":65,"rowspan":8,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"rgba(255, 255, 255, 0)","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":26,"name":"text_42","row":88,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":12,"column":36,"name":"text_44","row":88,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"container_16","row":76,"rowspan":12,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":2,"name":"listselector_2","row":67,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":14,"column":18,"name":"listselector_3","row":67,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":35,"name":"listselector_5","row":67,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":11,"column":3,"name":"text_46","row":77,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":17,"name":"text_49","row":77,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":24,"name":"text_51","row":77,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":24,"name":"number_12","row":79,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":45,"column":2,"name":"chart_19","row":93,"rowspan":15,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":42,"column":3,"name":"chart_20","row":82,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":3,"name":"text_55","row":79,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":17,"name":"text_56","row":79,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":32,"name":"text_57","row":77,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":32,"name":"text_59","row":79,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":35,"name":"link_17","row":61,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":50,"column":0,"name":"container_1","row":58,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"text_2","row":73,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":0,"name":"text_3","row":76,"rowspan":12,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_20","row":88,"rowspan":23,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":48,"name":"text_31","row":76,"rowspan":12,"widgetStyle":{"borderEdges":[]}}]},{"label":"No Benefit Map","name":"045599b9-5889-47c5-a7bf-e08a18ef3bf4","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_2","row":0,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":1,"name":"listselector_1","row":1,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"dateselector_1","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"text_4","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"dateselector_2","row":1,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":34,"name":"text_6","row":4,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_4","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_7","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"text_8","row":6,"rowspan":6,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_5","row":12,"rowspan":42,"widgetStyle":{"backgroundColor":"rgb(8, 36, 75)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_9","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":2,"name":"number_3","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderEdges":[]}},{"colspan":11,"column":13,"name":"text_5","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":13,"name":"number_4","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":4,"name":"text_10","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":16,"name":"text_11","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":27,"name":"text_13","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":27,"name":"number_5","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":29,"name":"text_14","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"text_12","row":7,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":40,"name":"number_6","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":43,"name":"text_15","row":9,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":1,"name":"text_16","row":13,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":2,"name":"text_17","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":2,"name":"chart_5","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":40,"column":9,"name":"chart_6","row":19,"rowspan":11,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_7","row":32,"rowspan":21,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"text_18","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":30,"column":1,"name":"container_15","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":2,"name":"link_9","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":11,"name":"link_10","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":42,"name":"container_17","row":54,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":22,"name":"link_21","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":31,"name":"container_18","row":54,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":33,"name":"link_26","row":55,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":50,"column":0,"name":"container_19","row":65,"rowspan":8,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"rgba(255, 255, 255, 0)","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"container_16","row":76,"rowspan":12,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":4,"borderWidth":1}},{"colspan":20,"column":2,"name":"listselector_2","row":67,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":11,"column":3,"name":"text_46","row":77,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":3,"name":"text_48","row":79,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":17,"name":"text_49","row":77,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":17,"name":"text_50","row":79,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":24,"name":"text_51","row":77,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":24,"name":"number_12","row":79,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":20,"column":28,"name":"listselector_4","row":67,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":10,"column":26,"name":"text_53","row":88,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":12,"column":36,"name":"text_54","row":88,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":42,"column":3,"name":"chart_18","row":82,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":44,"column":2,"name":"chart_21","row":93,"rowspan":15,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":32,"name":"text_57","row":77,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":32,"name":"text_58","row":79,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":35,"name":"link_25","row":61,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":50,"column":0,"name":"container_21","row":58,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_22","row":88,"rowspan":23,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"text_33","row":73,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":0,"name":"text_34","row":76,"rowspan":12,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":48,"name":"text_35","row":76,"rowspan":12,"widgetStyle":{"borderEdges":[]}}]}],"rowHeight":"fine","selectors":[],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"#F2F6FA","cellSpacingX":0,"cellSpacingY":0,"fit":"original","gutterColor":"#C5D3E0"},"version":1.0}],"layouts":[],"steps":{"Order_OrderNumber_Or_1":{"broadcastFacet":true,"groups":[],"label":"Order_OrderNumber_Or_1","numbers":[],"query":"q = load \"OrderMaster\";\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"Account.Id\")}};\nq = filter q by 'Order.ActivatedDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n q = filter q by 'Order.ActivatedDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nresult = group q by ('Order.OrderNumber', 'Order.ActivatedDate_Year', 'Order.ActivatedDate_Month', 'Order.ActivatedDate_Day', 'Order.CreatedDate_Year', 'Order.CreatedDate_Month', 'Order.CreatedDate_Day', 'Order.Status', 'Product.Name');\nresult = foreach result generate q.'Order.OrderNumber' as 'Order.OrderNumber', q.'Order.ActivatedDate_Year' + \"~~~\" + q.'Order.ActivatedDate_Month' + \"~~~\" + q.'Order.ActivatedDate_Day' as 'Order.ActivatedDate_Year~~~Order.ActivatedDate_Month~~~Order.ActivatedDate_Day', q.'Order.CreatedDate_Year' + \"~~~\" + q.'Order.CreatedDate_Month' + \"~~~\" + q.'Order.CreatedDate_Day' as 'Order.CreatedDate_Year~~~Order.CreatedDate_Month~~~Order.CreatedDate_Day', q.'Order.Status' as 'Order.Status', q.'Product.Name' as 'Product.Name', sum(q.'Quantity') as 'Quantity', sum(q.'TotalPrice') as 'Order Value';\nresult = order result by ('Order.OrderNumber' asc, 'Order.ActivatedDate_Year~~~Order.ActivatedDate_Month~~~Order.ActivatedDate_Day' asc, 'Order.CreatedDate_Year~~~Order.CreatedDate_Month~~~Order.CreatedDate_Day' asc, 'Order.Status' asc, 'Product.Name' asc);\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":["Quantity","Order.OrderNumber","Order.ActivatedDate_Year~~~Order.ActivatedDate_Month~~~Order.ActivatedDate_Day","Order.CreatedDate_Year~~~Order.CreatedDate_Month~~~Order.CreatedDate_Day","Order.Status","Product.Name","Order Value"],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"Order_Status_2":{"broadcastFacet":true,"groups":[],"label":"Order Status","numbers":[],"query":"orders = load \"OrderMaster\";\norders = filter orders by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"Account.Id\")}};\norders = filter orders by 'Order.ActivatedDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; orders = filter orders by 'Order.ActivatedDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\norders = group orders by 'Order.Status';\norders = foreach orders generate 'Order.Status' as 'Order.Status', unique('OrderId') as 'Orders';\norders = order orders by 'Order.Status' asc;\norders = limit orders 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","centerText":"","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"showMeasureTitle":false,"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"pie","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"inner":80,"columnMap":{"trellis":[],"dimension":["Order.Status"],"plots":["Orders"]},"showActionMenu":true,"centerValueType":"number","measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Products_by_Order_Me_1":{"broadcastFacet":true,"groups":[],"label":"Products by Order Measures","numbers":[],"query":"q = load \"OrderMaster\";\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"Account.Id\")}};\nq = filter q by 'Order.ActivatedDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n q = filter q by 'Order.ActivatedDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nq = group q by 'Product.Name';\nq = foreach q generate 'Product.Name' as 'Product.Name', sum('TotalPrice') as 'Order Value', sum('Quantity') as 'Quantity';\nq = foreach q generate 'Product.Name' as 'Product.Name', {{coalesce(cell(static_1.selection, 0, \"Order_Measure\"), \"NA\").asObject()}} as {{coalesce(cell(static_1.selection, 0, \"Order_Measure\"), \"NA\").asObject()}};\nq = order q by {{coalesce(cell(static_1.selection, 0, \"Order_Measure\"), \"NA\").asObject()}} desc;\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Payment_Details_1":{"broadcastFacet":true,"groups":[],"label":"Payment Details","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asEquality('MemberPayout.PayoutPeriods.RebateProgram.Name')}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") \nend as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nDataForFill_Current = union Start_Current, End_Current;\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'RebateAmount' as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount';\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Current = foreach FilledData_Current generate 'Id' as 'Id', 'Date_Year', 'Date_Month', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount';\npayout_result = group FilledData_Current by ('Id') left, current_valid_payout_sources by ('Id');\npayout_result = foreach payout_result generate first(current_valid_payout_sources.'MemberPayout.PayoutPeriods.Name') as 'MemberPayout.PayoutPeriods.Name', \nfirst(current_valid_payout_sources.'MemberPayout.Member.Name') as 'MemberPayout.Member.Name', sum(FilledData_Current.'RebateAmount') as 'RebateAmount';\nq = load \"RebatePaymentMaster\";\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nq = filter q by 'PaymentDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nq = filter q by 'PaymentDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nq = filter q by {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asEquality('MemberPayout.PayoutPeriods.RebateProgram.Name')}};\nq = group q by ('Name', 'Status', 'PaymentDate', 'MemberPayout.Member.Name', 'MemberPayout.PayoutPeriods.Name');\nq = foreach q generate q.'Name' as 'Name', q.'Status' as 'Status', q.'PaymentDate' as 'PaymentDate', q.'MemberPayout.Member.Name' as 'MemberPayout.Member.Name', q.'MemberPayout.PayoutPeriods.Name' as 'MemberPayout.PayoutPeriods.Name', sum(q.'Amount') as 'Amount';\nresult = group q by ('MemberPayout.PayoutPeriods.Name', 'MemberPayout.Member.Name') full, payout_result by ('MemberPayout.PayoutPeriods.Name', 'MemberPayout.Member.Name');\nresult = foreach result generate first(q.'Name') as 'Payment Name', first(q.'Status') as 'Payment Status', first(q.'PaymentDate') as 'Payment Date', \ncoalesce(q.'MemberPayout.Member.Name', payout_result.'MemberPayout.Member.Name') as 'Member', payout_result.'MemberPayout.PayoutPeriods.Name' as 'Payout Period', first(q.'Amount') as 'Payment Amount',round(sum(payout_result.'RebateAmount'),0) as 'Earnings';\nresult = order result by ('Payment Name' asc, 'Payment Status' asc, 'Payment Date' asc, 'Member' asc, 'Payout Period' asc);\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"StartDate_1":{"broadcastFacet":false,"datasets":[{"name":"RebatePayoutPeriodMaster"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"StartDate\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","start":"[[[\"year\",-1],[\"year\",-1]]]","type":"aggregateflex","useGlobal":false,"visualizationParameters":{}},"Programs_count_1":{"broadcastFacet":true,"groups":[],"label":"Programs count","numbers":[],"query":"q = load \"RebateProgramMemberMaster\";\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"Account.Id\")}};\nq = filter q by 'RebateProgram.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nq = filter q by 'RebateProgram.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nq = group q by all;\nq = foreach q generate unique('RebateProgram.Name') as 'unique_RebateProgram.Name';\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":[],"plots":["unique_RebateProgram.Name"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Date_Selector_1":{"broadcastFacet":false,"datasets":[{"name":"RebatePayoutPeriodMaster"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"StartDate\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"singlerequired","start":"[[[\"year\",0],[\"year\",0]]]","type":"aggregateflex","useGlobal":false,"visualizationParameters":{}},"RebateType_Name_2":{"broadcastFacet":false,"groups":[],"label":"RebateType_Name No Benefit Map","numbers":[],"query":"q = load \"ProgramRebateTypeBenefitMaster\";\nq = filter q by 'RebateType.BenefitMapping.HasProductBenefitMapping' == \"false\" or 'RebateType.BenefitMapping.HasProductBenefitMapping' is null;\nq = filter q by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nq = filter q by 'RebateType.RebateProgram.Name' == \"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\";\nq = group q by 'RebateType.Name';\nq = foreach q generate 'RebateType.Name' as 'RebateType.Name', count() as 'count';\nq = order q by 'RebateType.Name' asc;\nq = limit q 2000;","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"singlerequired","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Payouts__Adjustments_1":{"broadcastFacet":true,"groups":[],"label":"Payouts, Adjustments and Transactions","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asEquality('MemberPayout.PayoutPeriods.RebateProgram.Name')}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+\ncoalesce('MemberPayout.PayoutPeriods.Name',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalApprovedAdjustmentAmount' else 'MemberPayout.TotalApprovedAdjustmentAmount' end as 'TotalAdjustmentAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyTotalApprovedAdjustmentAmount' as 'DailyTotalApprovedAdjustmentAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('MemberPayout.PayoutPeriods.Name',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalApprovedAdjustmentAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalApprovedAdjustmentAmount' else 0 end as 'TotalAdjustmentAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount',  case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyTotalApprovedAdjustmentAmount' as 'DailyTotalApprovedAdjustmentAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount','DailyQuantity' as 'DailyQuantity';\nDataForFill_Current = union Start_Current, End_Current;\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'TotalAdjustmentAmount' as 'TotalAdjustmentAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyTotalApprovedAdjustmentAmount' as 'DailyTotalApprovedAdjustmentAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('TotalAdjustmentAmount') as 'TotalAdjustmentAmount', min(first('DailyTotalApprovedAdjustmentAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalApprovedAdjustmentAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity';\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Current = foreach FilledData_Current generate substr('Id',index_of('Id',\"<#>\")+3) as 'MemberPayout.PayoutPeriods.Name', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'TotalAdjustmentAmount' is null then month_days(toDate('Date'))*'DailyTotalApprovedAdjustmentAmount' else 'TotalAdjustmentAmount' end) as 'TotalAdjustmentAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity';\nresult = group FilledData_Current by ('MemberPayout.PayoutPeriods.Name');\nresult = foreach result generate 'MemberPayout.PayoutPeriods.Name', first('Date_Year') as 'Date_Year', first('Date_Month') as 'Date_Month', coalesce(sum('TotalAdjustmentAmount'),0) as 'Adjusted Earnings', coalesce(sum('RebateAmount'),0) as 'Earnings', {{coalesce(cell(static_3.selection, 0, \"Transaction_Measure\"), \"NA\").asString()}};\nresult = order result by ('Date_Year' asc, 'Date_Month' asc);","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"dual","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"vbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Progress_To_Next_2":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"all_benefit_types = load \"ProgramRebateTypeBenefitMaster\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.BenefitMapping.HasProductBenefitMapping' == \"false\" or 'RebateType.BenefitMapping.HasProductBenefitMapping' is null;\nall_benefit_types = filter all_benefit_types by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nall_benefit_types = filter all_benefit_types by 'RebateType.RebateProgram.Name' == \"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.Name' == \"{{cell(RebateType_Name_2.selection, 0, \"RebateType.Name\").asString()}}\";\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', number_to_string('MinimumQualifyingValue',\"#.0#\") as 'MinimumQualifyingValue_str', 'MinimumQualifyingValue', number_to_string('MaximumQualifyingValue',\"#.0#\") as 'MaximumQualifyingValue_str', 'MaximumQualifyingValue', 'BenefitValue', 'RebateType.RebateMeasureType','RebateType.BenefitQualifierField';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MaximumQualifyingValue', case when len('MaximumQualifyingValue_str') > 5 then (number_to_string('MaximumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MaximumQualifyingValue_str' end as 'MaximumQualifyingValue_str', 'MinimumQualifyingValue', case when len('MinimumQualifyingValue_str') > 5 then (number_to_string('MinimumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MinimumQualifyingValue_str' end as 'MinimumQualifyingValue_str', 'BenefitValue', 'RebateType.RebateMeasureType', case when 'RebateType.RebateMeasureType'==\"PercentageOfRevenue\" then \"%\" when 'RebateType.RebateMeasureType'==\"Custom\" then \"no units\" else \"$\" end as 'BenefitUnit','RebateType.BenefitQualifierField';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MinimumQualifyingValue_str'+\" - \"+coalesce('MaximumQualifyingValue_str',\"\") as 'Tiers','RebateType.BenefitQualifierField', 'BenefitValue', 'BenefitUnit','MinimumQualifyingValue','MaximumQualifyingValue';\r\nall_benefit_types = filter all_benefit_types by 'Tiers' != \"{{cell(Current_Tier_2.result, 0, \"Tiers\").asString()}}\";\r\nresult = foreach all_benefit_types generate 'Id' as 'ProgramRebateTypeBenefitId', first(all_benefit_types.'Tiers') as 'Tiers','RebateType.BenefitQualifierField', 'MinimumQualifyingValue','MaximumQualifyingValue',first(all_benefit_types.'BenefitUnit') as 'BenefitUnit', case when first(all_benefit_types.'BenefitUnit') == \"%\" then \"%\" else null end as 'BenefitUnit_suffix', case when first(all_benefit_types.'BenefitUnit') == \"$\" then \"$\" else null end as 'BenefitUnit_prefix',\r\ncoalesce(sum(all_benefit_types.'BenefitValue'),0) as 'Benefit Value';\r\nresult = foreach result generate 'Tiers' as 'Tiers','RebateType.BenefitQualifierField','MinimumQualifyingValue','MaximumQualifyingValue', {{coalesce(cell(Current_Tier_2.result, 0, \"BenefitQualifierValue\"),0).asObject()}} as 'Current_Benifit_Qualifier','MinimumQualifyingValue' - {{coalesce(cell(Current_Tier_2.result, 0, \"BenefitQualifierValue\"),0).asObject()}} as 'Min_Current_DIfference';\r\nresult = filter result by 'Min_Current_DIfference' > 0;\r\nresult = group result by 'Tiers';\r\nresult = foreach result generate 'Tiers' as 'Tiers', first('RebateType.BenefitQualifierField') as 'RebateType.BenefitQualifierField',sum('MinimumQualifyingValue') as 'MinimumQualifyingValue' ,case when first('RebateType.BenefitQualifierField') like \"%Amount%\" then sum('MinimumQualifyingValue')/{{coalesce(cell(Current_Tier.result, 0, \"UnitPrice\"),1).asObject()}} else sum('MinimumQualifyingValue') end as 'MinimumQualifyingUnits', sum('MaximumQualifyingValue') as 'MaximumQualifyingValue',sum('Current_Benifit_Qualifier') as 'Current_Benifit_Qualifier', case when first('RebateType.BenefitQualifierField') like \"%Amount\" then sum('Min_Current_DIfference')/{{coalesce(cell(Current_Tier_2.result, 0, \"UnitPrice\"),1).asObject()}} else sum('Min_Current_DIfference') end as 'Progress_To_Next_Tier', min( case when first('RebateType.BenefitQualifierField') like \"%Amount\" then sum('Min_Current_DIfference')/{{coalesce(cell(Current_Tier_2.result, 0, \"UnitPrice\"),1).asObject()}} else sum('Min_Current_DIfference') end) over([..] partition by all)  as 'Min';\r\nresult = filter result by 'Progress_To_Next_Tier' == 'Min' ;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"MemberPayout_PayoutP_2":{"broadcastFacet":true,"groups":[],"label":"MemberPayout_PayoutP_2","numbers":[],"query":"q = load \"ProgramRebateTypePayoutSourceMaster\";\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nq = filter q by 'RebateType.CalculationBasis' in [\"Payout\", \"PayoutAndAccrual\"];\nq = group q by 'MemberPayout.PayoutPeriods.RebateProgram.Name';\nq = foreach q generate 'MemberPayout.PayoutPeriods.RebateProgram.Name' as 'MemberPayout.PayoutPeriods.RebateProgram.Name', count() as 'count';\nq = order q by 'MemberPayout.PayoutPeriods.RebateProgram.Name' asc;\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":["MemberPayout.PayoutPeriods.RebateProgram.Name"],"plots":["count"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Current_Tier_2":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"q = load \"ProgramRebateTypePayoutSourceMaster\";\r\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nq = filter q by 'RebateType.BenefitMapping.HasProductBenefitMapping' == \"false\" or 'RebateType.BenefitMapping.HasProductBenefitMapping' is null;\nq = filter q by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nq = filter q by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Current_PayoutPeriod_FIlter.result, 0, \"Max\"),0).asObject()}}/1000;\r\nq = filter q by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result, 0, \"Min\"),0).asObject()}}/1000;\r\nall_payout_sources = filter q by 'MemberPayout.PayoutPeriods.RebateProgram.Name' in [\"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\"];\r\nall_payout_sources = filter all_payout_sources by 'RebateType.Name' in [\"{{cell(RebateType_Name_2.selection, 0, \"RebateType.Name\").asString()}}\"];\r\nall_payout_sources = foreach all_payout_sources generate 'MemberPayout.PayoutPeriods.Name','RebateType.BenefitQualifierField','BenefitQualifierValue', 'RebateTypeBenefit.Id', 'RebateTypeBenefit.Name', number_to_string('RebateTypeBenefit.MinimumQualifyingValue',\"#.0#\") as 'MinimumQualifyingValue_str', 'RebateTypeBenefit.MinimumQualifyingValue', number_to_string('RebateTypeBenefit.MaximumQualifyingValue',\"#.0#\") as 'MaximumQualifyingValue_str', 'RebateTypeBenefit.MaximumQualifyingValue','Product.PriceEntry.UnitPrice';\r\nall_payout_sources = foreach all_payout_sources generate 'MemberPayout.PayoutPeriods.Name', 'RebateTypeBenefit.Id','RebateType.BenefitQualifierField', 'RebateTypeBenefit.Name','BenefitQualifierValue', 'RebateTypeBenefit.MaximumQualifyingValue', case when len('MaximumQualifyingValue_str') > 5 then (number_to_string('RebateTypeBenefit.MaximumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MaximumQualifyingValue_str' end as 'MaximumQualifyingValue_str', 'RebateTypeBenefit.MinimumQualifyingValue', case when len('MinimumQualifyingValue_str') > 5 then (number_to_string('RebateTypeBenefit.MinimumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MinimumQualifyingValue_str' end as 'MinimumQualifyingValue_str', 'Product.PriceEntry.UnitPrice';\r\nall_payout_sources = foreach all_payout_sources generate 'MemberPayout.PayoutPeriods.Name', 'RebateTypeBenefit.Id','RebateType.BenefitQualifierField', 'RebateTypeBenefit.Name', 'MinimumQualifyingValue_str'+\" - \"+coalesce('MaximumQualifyingValue_str',\"\") as 'Tiers','BenefitQualifierValue', 'Product.PriceEntry.UnitPrice';\r\nresult = group  all_payout_sources by ('MemberPayout.PayoutPeriods.Name', 'RebateTypeBenefit.Id', 'Tiers', 'RebateType.BenefitQualifierField');\r\nresult = foreach result generate 'MemberPayout.PayoutPeriods.Name',coalesce('Tiers',\"-\") as 'Tiers','RebateType.BenefitQualifierField' as 'RebateType.BenefitQualifierField',  sum('BenefitQualifierValue') as 'BenefitQualifierValue', case when first('RebateType.BenefitQualifierField') like \"%Amount\" then sum('BenefitQualifierValue')/sum('Product.PriceEntry.UnitPrice') else sum('BenefitQualifierValue') end as 'BenefitQualifierUnits', sum('Product.PriceEntry.UnitPrice') as 'UnitPrice';","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Revenue___Payout_Ove_1":{"broadcastFacet":true,"groups":[],"label":"Revenue & Payout Over Time","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\"; all_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"Payout\", \"PayoutAndAccrual\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; current_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; orders = load \"OrderMaster\"; orders = filter orders by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"Account.Id\")}};\norders = filter orders by 'Order.ActivatedDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; orders = filter orders by 'Order.ActivatedDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;Start_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity'; End_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity'; DataForFill_Current = union Start_Current, End_Current; DataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity'; FilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month'); FilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity'; FilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_Current = foreach FilledData_Current generate 'Id' as 'Id', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity'; result = group FilledData_Current by ('Date_Year', 'Date_Month') full, orders by ('Order.ActivatedDate_Year', 'Order.ActivatedDate_Month'); result = foreach result generate coalesce(FilledData_Current.'Date_Year', orders.'Order.ActivatedDate_Year')+\"~~~\"+coalesce(FilledData_Current.'Date_Month', orders.'Order.ActivatedDate_Year') as 'CreatedDate_Year~~~CreatedDate_Month', sum(FilledData_Current.'TotalQuantity') as 'Total Quantity', sum(FilledData_Current.'TotalTransactionAmount') as 'Submitted Transaction Amount', sum(FilledData_Current.'RebateAmount') as 'Earnings', sum(orders.'TotalPrice') as 'Orders'; result = order result by 'CreatedDate_Year~~~CreatedDate_Month' asc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"dual","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"plots":{"Total Payout":{"mark":"bar"},"Total Orders":{"mark":"line"},"Total Submitted Transactions":{"mark":"bar"}},"columnMap":{"timeAxis":["CreatedDate_Year~~~CreatedDate_Month"],"trellis":[],"plots":["Submitted Transaction Amount","Earnings","Orders"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Tiers_2":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"all_benefit_types = load \"ProgramRebateTypeBenefitMaster\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.BenefitMapping.HasProductBenefitMapping' == \"false\" or 'RebateType.BenefitMapping.HasProductBenefitMapping' is null;\nall_benefit_types = filter all_benefit_types by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nall_benefit_types = filter all_benefit_types by 'RebateType.RebateProgram.Name' == \"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.Name' == \"{{cell(RebateType_Name_2.selection, 0, \"RebateType.Name\").asString()}}\";\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', number_to_string('MinimumQualifyingValue',\"#.0#\") as 'MinimumQualifyingValue_str', 'MinimumQualifyingValue', number_to_string('MaximumQualifyingValue',\"#.0#\") as 'MaximumQualifyingValue_str', 'MaximumQualifyingValue', 'BenefitValue', 'RebateType.RebateMeasureType';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MaximumQualifyingValue', case when len('MaximumQualifyingValue_str') > 5 then (number_to_string('MaximumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MaximumQualifyingValue_str' end as 'MaximumQualifyingValue_str', 'MinimumQualifyingValue', case when len('MinimumQualifyingValue_str') > 5 then (number_to_string('MinimumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MinimumQualifyingValue_str' end as 'MinimumQualifyingValue_str', 'BenefitValue', 'RebateType.RebateMeasureType', case when 'RebateType.RebateMeasureType'==\"PercentageOfRevenue\" then \"%\" when 'RebateType.RebateMeasureType'==\"Custom\" then \"no units\" else \"$\" end as 'BenefitUnit';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MinimumQualifyingValue_str'+\" - \"+coalesce('MaximumQualifyingValue_str',\"\") as 'Tiers', 'BenefitValue', 'BenefitUnit';\r\nresult = foreach all_benefit_types generate 'Id' as 'ProgramRebateTypeBenefitId', first(all_benefit_types.'Tiers') as 'Tiers', first(all_benefit_types.'BenefitUnit') as 'BenefitUnit', case when first(all_benefit_types.'BenefitUnit') == \"%\" then \"%\" else null end as 'BenefitUnit_suffix', case when first(all_benefit_types.'BenefitUnit') == \"$\" then \"$\" else null end as 'BenefitUnit_prefix',\r\ncoalesce(sum(all_benefit_types.'BenefitValue'),0) as 'Benefit Value';\r\nresult = foreach result generate 'Tiers' as 'Tiers',sum('Benefit Value') as 'Benefit Multiplier';\nresult = order result by 'Tiers';","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Program_Timeline_1":{"broadcastFacet":true,"groups":[],"label":"Program Timeline","numbers":[],"query":"all_payout_sources = load \"RebateProgramMemberMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"Account.Id\")}};\ncurrent_valid_payout_sources = filter all_payout_sources by 'RebateProgram.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'RebateProgram.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'RebateProgram.Name' as 'Id', 'RebateProgram.StartDate_sec_epoch' as 'Start Date', 'RebateProgram.EndDate_sec_epoch' as 'End Date', case when ('RebateProgram.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('RebateProgram.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('RebateProgram.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('RebateProgram.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 1 as 'counter';\nStart_Current = order Start_Current by ('Id' asc, 'Date_Year' asc, 'Date_Month' asc);\nStart_Current = group Start_Current by ('Id');\nStart_Current = foreach Start_Current generate 'Id' as 'Id', first('Date_Year') as 'Date_Year', first('Date_Month') as 'Date_Month', first('Start') as 'Start', first('End') as 'End', first('Start Date') as 'Start Date', first('End Date') as 'End Date', sum(first('counter')) over ([..0] partition by all order by ('Id')) as 'counter';\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'RebateProgram.Name' as 'Id', 'RebateProgram.StartDate_sec_epoch' as 'Start Date', 'RebateProgram.EndDate_sec_epoch' as 'End Date', case when ('RebateProgram.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('RebateProgram.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('RebateProgram.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('RebateProgram.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 0 as 'counter';\nEnd_Current = order End_Current by ('Id' asc, 'Date_Year' desc, 'Date_Month' desc);\nEnd_Current = group End_Current by ('Id');\nEnd_Current = foreach End_Current generate 'Id' as 'Id', first('Date_Year') as 'Date_Year', first('Date_Month') as 'Date_Month', first('Start') as 'Start', first('End') as 'End', first('Start Date') as 'Start Date', first('End Date') as 'End Date', 0 as 'counter';\nDataForFill_Current = union Start_Current, End_Current;\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'counter' as 'counter';\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', max(first('counter'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'counter';\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Current = foreach FilledData_Current generate 'Id' as 'RebateProgram.Name', 'Date_Year', 'Date_Month', 'counter' as counter;\nresult = group FilledData_Current by ('Date_Year', 'Date_Month', 'RebateProgram.Name');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'CreatedDate_Year~~~CreatedDate_Month', 'RebateProgram.Name', sum('counter') as 'counter';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Rebate_Type_details_2":{"broadcastFacet":true,"groups":[],"label":"Rebate Type details with No benefit Map","numbers":[],"query":"q = load \"ProgramRebateTypeMaster\";\nq = filter q by 'CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nq = filter q by {{coalesce(cell(RebateProgram_Name_3.selection, 0, \"Program Name\"), \"NA\").asEquality(\"RebateProgram.Name\")}};\nq = filter q by {{coalesce(cell(RebateType_Name_2.selection, 0, \"RebateType.Name\"), \"NA\").asEquality(\"Name\")}};\nq = group q by ('RebateProgram.Name', 'Name', 'DerivedRebateMeasureType', 'DerivedBenefitQualifierField');\nq = foreach q generate 'RebateProgram.Name' as 'RebateProgram.Name', 'Name' as 'Name', 'DerivedRebateMeasureType' as 'DerivedRebateMeasureType', 'DerivedBenefitQualifierField' as 'DerivedBenefitQualifierField', count() as 'count';\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"pivoted":false,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"Pricing_details_tabl_1":{"broadcastFacet":true,"groups":[],"label":"Pricing details table","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"Payout\", \"PayoutAndAccrual\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nprevious_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000;\nprevious_valid_payout_sources = filter previous_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000;\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('MemberPayout.Member.Account.Name',\"-\")+\"<#>\"+coalesce('Product.Name',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('MemberPayout.Member.Account.Name',\"-\")+\"<#>\"+coalesce('Product.Name',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nDataForFill_Current = union Start_Current, End_Current;\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity';\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Current = foreach FilledData_Current generate substr('Id',index_of('Id',\"<#>\")+3, ((index_of('Id',\"<#>\",1,2)-3)-index_of('Id',\"<#>\"))) as 'MemberPayout.Member.Account.Name', substr('Id',index_of('Id',\"<#>\",1,2)+3) as 'Product.Name', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity';\nStart_Previous = foreach previous_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('MemberPayout.Member.Account.Name',\"-\")+\"<#>\"+coalesce('Product.Name',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nEnd_Previous = foreach previous_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('MemberPayout.Member.Account.Name',\"-\")+\"<#>\"+coalesce('Product.Name',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nDataForFill_Previous = union Start_Previous, End_Previous;\nDataForFill_Previous = foreach DataForFill_Previous generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nFilledData_Previous = fill DataForFill_Previous by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Previous = group FilledData_Previous by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Previous = foreach FilledData_Previous generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity';\nFilledData_Previous = filter FilledData_Previous by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Previous = foreach FilledData_Previous generate substr('Id',index_of('Id',\"<#>\")+3, ((index_of('Id',\"<#>\",1,2)-3)-index_of('Id',\"<#>\"))) as 'MemberPayout.Member.Account.Name', substr('Id',index_of('Id',\"<#>\",1,2)+3) as 'Product.Name', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity';\nresult = group FilledData_Current by ('MemberPayout.Member.Account.Name', 'Product.Name') left,FilledData_Previous by ('MemberPayout.Member.Account.Name', 'Product.Name');\nresult = foreach result generate FilledData_Current.'MemberPayout.Member.Account.Name' as 'MemberPayout.Member.Account.Name', FilledData_Current.'Product.Name' as 'Product.Name', sum(FilledData_Current.'TotalTransactionAmount') as 'TotalTransactionAmount', sum(FilledData_Current.'TotalQuantity') as 'TotalQuantity', sum(FilledData_Current.'RebateAmount') as 'RebateAmount', (sum(FilledData_Current.'TotalTransactionAmount') -  sum(FilledData_Current.'RebateAmount'))/sum(FilledData_Current.'TotalQuantity') as 'Current Effective Price', (sum(FilledData_Previous.'TotalTransactionAmount') -  sum(FilledData_Previous.'RebateAmount'))/sum(FilledData_Previous.'TotalQuantity') as 'Previous Effective Price';\nresult = foreach result generate 'MemberPayout.Member.Account.Name' as 'MemberPayout.Member.Account.Name', 'Product.Name' as 'Product.Name', sum('TotalTransactionAmount')/ sum('TotalQuantity') as 'Quoted Price', (sum('TotalTransactionAmount') -  sum('RebateAmount'))/sum('TotalQuantity') as 'Effective Price', ('Current Effective Price' - 'Previous Effective Price') / 'Previous Effective Price' as 'Change_in_Price', sum('RebateAmount')/sum('TotalTransactionAmount') as 'Effective Rebate', round(sum('RebateAmount'),0) as 'Earnings', round(sum('TotalTransactionAmount'),0) as 'Submitted Transaction Amount';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Product_List":{"broadcastFacet":false,"groups":[],"label":"Product_List","numbers":[],"query":"RebateTypes = load \"ProgramRebateTypeMaster\";\nproducts = load \"ProductMaster\";\nRebateTypes = filter RebateTypes by 'BenefitMapping.HasProductBenefitMapping' == \"true\";\nRebateTypes = filter RebateTypes by 'CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nRebateTypes = filter RebateTypes by {{coalesce(cell(RebateProgram_Name_3.selection, 0, \"Program Name\"), \"NA\").asEquality(\"RebateProgram.Name\")}};\nRebateTypes = filter RebateTypes by {{coalesce(cell(RebateType_Name_1.selection, 0, \"RebateType.Name\"), \"NA\").asEquality(\"Name\")}};\nRebateTypes = group RebateTypes by 'InclusionFilters.ValuesMultiValue';\nRebateTypes = foreach RebateTypes generate 'InclusionFilters.ValuesMultiValue' as 'ProductId';\nresult = group RebateTypes by 'ProductId' left, products by 'Id';\nresult = foreach result generate RebateTypes.'ProductId' as 'ProductID', first(products.'Name') as 'Product Name';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"singlerequired","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Rebate_Type_details_1":{"broadcastFacet":true,"groups":[],"label":"Rebate Type details","numbers":[],"query":"q = load \"ProgramRebateTypeMaster\";\nq = filter q by 'CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nq = filter q by {{coalesce(cell(RebateProgram_Name_3.selection, 0, \"Program Name\"), \"NA\").asEquality(\"RebateProgram.Name\")}};\nq = filter q by {{coalesce(cell(RebateType_Name_1.selection, 0, \"RebateType.Name\"), \"NA\").asEquality(\"Name\")}};\nq = group q by ('RebateProgram.Name', 'Name', 'DerivedRebateMeasureType', 'DerivedBenefitQualifierField');\nq = foreach q generate 'RebateProgram.Name' as 'RebateProgram.Name', 'Name' as 'Name', 'DerivedRebateMeasureType' as 'DerivedRebateMeasureType', 'DerivedBenefitQualifierField' as 'DerivedBenefitQualifierField', count() as 'count';\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"pivoted":false,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"Payments_by_status_1":{"broadcastFacet":true,"groups":[],"label":"Payments by status","numbers":[],"query":"q = load \"RebatePaymentMaster\";\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nq = filter q by {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asEquality('MemberPayout.PayoutPeriods.RebateProgram.Name')}};\nq = filter q by 'PaymentDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nq = filter q by 'PaymentDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nq = group q by 'Status';\nq = foreach q generate 'Status' as 'Status', sum('Amount') as 'Payment Amount';\nq = order q by 'Status' asc;\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","centerText":"","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"showMeasureTitle":false,"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"pie","title":{"fontSize":14,"subtitleFontSize":11,"label":"Payments by Status","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"inner":80,"columnMap":{"trellis":[],"dimension":["Status"],"plots":["Payment Amount"]},"showActionMenu":true,"centerValueType":"number","measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Current_PayoutPeriod_FIlter":{"broadcastFacet":true,"groups":[],"label":"Current_PayoutPeriod_FIlter","numbers":[],"query":"q = load \"RebatePayoutPeriodMaster\";\nq = filter q by 'RebateProgram.Name' == \"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\";\nq = group q by ('RebateProgram.Name','StartDate_Year', 'StartDate_Month', 'StartDate_Day', 'EndDate_Year', 'EndDate_Month', 'EndDate_Day');\nq = foreach q generate 'RebateProgram.Name','StartDate_Year' + \"~~~\" + 'StartDate_Month' + \"~~~\" + 'StartDate_Day' as 'StartDate_Year~~~StartDate_Month~~~StartDate_Day', 'EndDate_Year' + \"~~~\" + 'EndDate_Month' + \"~~~\" + 'EndDate_Day' as 'EndDate_Year~~~EndDate_Month~~~EndDate_Day',case when date_to_epoch(now()) >= first('StartDate_sec_epoch') && date_to_epoch(now()) <= first('EndDate_sec_epoch') then \"True\" else \"False\" end as 'CurrentPayoutPeriod', min('StartDate_sec_epoch')*1000 as 'Min', (max('EndDate_sec_epoch')+86399)*1000  as 'Max', first('Id') as 'PayoutId';\nq = filter q by 'CurrentPayoutPeriod' == \"True\";","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"Earnings_by_Products_1":{"broadcastFacet":true,"groups":[],"label":"Earnings by Products","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asEquality('MemberPayout.PayoutPeriods.RebateProgram.Name')}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"Payout\", \"PayoutAndAccrual\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"@#%\"+coalesce('Product.Name',\"-\")+\"!#%\"+coalesce('Product.Id',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount' ;\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('Product.Name',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) \nthen (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', \n'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nDataForFill_Current = union Start_Current, End_Current;\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'RebateAmount' as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount';\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Current = foreach FilledData_Current generate substr('Id', index_of('Id',\"@#%\",1,1)+3, index_of('Id',\"!#%\") - (index_of('Id',\"@#%\",1,1)+3)) as 'Product.Name', substr('Id', index_of('Id',\"!#%\")+3) as 'Product.Id', 'Date_Year', 'Date_Month', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount';\nproductFilters = load \"ProgramRebateTypeMaster\";\nproductFilters = filter productFilters by 'CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nproducts = load \"ProductMaster\";\nresult = group productFilters by ('InclusionFilters.ValuesMultiValue') left, products by ('Id') left, FilledData_Current by ('Product.Id');\nresult = foreach result generate first(products.'Name') as 'Product.Name', sum(FilledData_Current.'RebateAmount') as 'RebateAmount';\nresult = group result by 'Product.Name';\nresult = foreach result generate 'Product.Name' as 'Product.Name', sum('RebateAmount') as 'Earnings';\nresult = filter result by 'Earnings' != 0;\nresult = order result by 'Earnings' desc nulls last;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Name_MemberPayout_Na_2":{"broadcastFacet":true,"groups":[],"label":"Payment and Payouts Sankey chart","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asEquality('MemberPayout.PayoutPeriods.RebateProgram.Name')}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"Payout\", \"PayoutAndAccrual\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nDataForFill_Current = union Start_Current, End_Current;\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'RebateAmount' as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount';\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Current = foreach FilledData_Current generate 'Id' as 'Id', 'Date_Year', 'Date_Month', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount';\nresult1 = group FilledData_Current by 'Id' left, all_payout_sources by 'Id';\nresult1 = foreach result1 generate FilledData_Current.'Id' as 'Id', first(all_payout_sources.'MemberPayout.RebatePayment.Name') as \n'MemberPayout.RebatePayment.Name', first(all_payout_sources.'MemberPayout.Name') as 'MemberPayout.Name',sum(FilledData_Current.'RebateAmount') as 'RebateAmount';\npayments = load \"RebatePaymentMaster\";\npayments = filter payments by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\npayments = filter payments by 'PaymentDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\npayments = filter payments by 'PaymentDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nresult = group payments by ('Name', 'MemberPayout.Name') full, result1 by ('MemberPayout.RebatePayment.Name', 'MemberPayout.Name');\nresult = foreach result generate payments.'Name' as 'Payment', result1.'MemberPayout.Name' as 'Earning', sum(result1.'RebateAmount') as 'Earnings';\n result = filter result by 'Earnings' is not null;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showDimensionTitle":true,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"sankey","title":{"fontSize":14,"subtitleFontSize":11,"label":"Payouts and Payments","align":"left","subtitleLabel":""},"columnProperties":{},"columnMap":{"dimensionAxis":["Payment","Earning"],"plots":["Earnings"]},"showActionMenu":true,"showAbsoluteValues":true,"showTotal":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1},"type":"chart"}},"Payment_Count_1":{"broadcastFacet":true,"groups":[],"label":"Payment Count","numbers":[],"query":"q = load \"RebatePaymentMaster\";\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nq = filter q by {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asEquality('MemberPayout.PayoutPeriods.RebateProgram.Name')}};\nq = filter q by 'PaymentDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nq = filter q by 'PaymentDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nq = group q by all;\nq = foreach q generate unique('Id') as 'unique_Id', sum('Amount') as 'sum_Amount';\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":[],"plots":["unique_Id","sum_Amount"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Account_for_current__1":{"broadcastFacet":true,"groups":[],"label":"Account for current user","numbers":[],"query":"q = load \"UserMaster\";\nq = filter q by 'Id' == \"!{User.Id}\";\nq = foreach q generate 'AccountId' as 'AccountId';\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Date_Filter_1":{"broadcastFacet":true,"groups":[],"label":"Date Filter","numbers":[],"query":"q1 = load \"RebatePayoutPeriodMaster\";\nq2 = foreach q1 generate \"1970\" as 'Date_Year', \"01\" as 'Date_Month', \"01\" as 'Date_Day';\nq3 = foreach q1 generate \"2100\" as 'Date_Year', \"12\" as 'Date_Month', \"31\" as 'Date_Day';\nq = union q2, q3;\nq = group q by ('Date_Year', 'Date_Month', 'Date_Day');\nq = foreach q generate 'Date_Year', 'Date_Month', 'Date_Day', count() as 'sum';\nq = fill q by (dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = foreach q generate 'Date_Year' + \"-\" + 'Date_Month' + \"-\" + 'Date_Day'+ \" 00:00:00\" as 'Date','Date_Year', 'Date_Month', 'Date_Day'; current = filter q by {{row(Date_Selector_1.selection, [0], [\"min\", \"max\"]).asDateRange(\"date('Date_Year', 'Date_Month', 'Date_Day')\")}};  previous = filter q by {{row(StartDate_1.selection, [0], [\"min\", \"max\"]).asDateRange(\"date('Date_Year', 'Date_Month', 'Date_Day')\")}}; current = foreach current generate toDate('Date') as 'Date', date_to_epoch(toDate('Date')) as 'Date_sec_epoch'; previous = foreach previous generate toDate('Date') as 'Date', date_to_epoch(toDate('Date')) as 'Date_sec_epoch'; result = group current by all, previous by all; result = foreach result generate toDate(min(current.'Date_sec_epoch')) as 'Min Date', toDate(max(current.'Date_sec_epoch')+86399) as 'Max Date', min(current.'Date_sec_epoch')*1000 as 'Min', (max(current.'Date_sec_epoch')+86399)*1000 as 'Max',  min(previous.'Date_sec_epoch')*1000 as 'Prev_Min',  (max(previous.'Date_sec_epoch')+86399)*1000 as 'Prev_Max', date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(min(current.'Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(min(current.'Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))*1000 as 'Prev_Year_Min', (date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(max(current.'Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(max(current.'Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))+86399)*1000 as 'Prev_Year_Max';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Tiers":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"all_benefit_types = load \"ProgramRebateTypeBenefitMaster\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.BenefitMapping.HasProductBenefitMapping' == \"true\";\nall_benefit_types = filter all_benefit_types by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nall_benefit_types = filter all_benefit_types by 'RebateType.RebateProgram.Name' == \"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.Name' == \"{{cell(RebateType_Name_1.selection, 0, \"RebateType.Name\").asString()}}\";\r\nall_benefit_types = filter all_benefit_types by 'ProductId' == \"{{cell(Product_List.selection, 0, \"ProductID\").asString()}}\" or 'ProductId' is null;\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', number_to_string('MinimumQualifyingValue',\"#.0#\") as 'MinimumQualifyingValue_str', 'MinimumQualifyingValue', number_to_string('MaximumQualifyingValue',\"#.0#\") as 'MaximumQualifyingValue_str', 'MaximumQualifyingValue', 'BenefitValue', 'RebateType.RebateMeasureType';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MaximumQualifyingValue', case when len('MaximumQualifyingValue_str') > 5 then (number_to_string('MaximumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MaximumQualifyingValue_str' end as 'MaximumQualifyingValue_str', 'MinimumQualifyingValue', case when len('MinimumQualifyingValue_str') > 5 then (number_to_string('MinimumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MinimumQualifyingValue_str' end as 'MinimumQualifyingValue_str', 'BenefitValue', 'RebateType.RebateMeasureType', case when 'RebateType.RebateMeasureType'==\"PercentageOfRevenue\" then \"%\" when 'RebateType.RebateMeasureType'==\"Custom\" then \"no units\" else \"$\" end as 'BenefitUnit';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MinimumQualifyingValue_str'+\" - \"+coalesce('MaximumQualifyingValue_str',\"\") as 'Tiers', 'BenefitValue', 'BenefitUnit';\r\nresult = foreach all_benefit_types generate 'Id' as 'ProgramRebateTypeBenefitId', first(all_benefit_types.'Tiers') as 'Tiers', first(all_benefit_types.'BenefitUnit') as 'BenefitUnit', case when first(all_benefit_types.'BenefitUnit') == \"%\" then \"%\" else null end as 'BenefitUnit_suffix', case when first(all_benefit_types.'BenefitUnit') == \"$\" then \"$\" else null end as 'BenefitUnit_prefix',\r\ncoalesce(sum(all_benefit_types.'BenefitValue'),0) as 'Benefit Value';\r\nresult = foreach result generate 'Tiers' as 'Tiers',sum('Benefit Value') as 'Benefit Multiplier';","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Current_Tier":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"q = load \"ProgramRebateTypePayoutSourceMaster\";\r\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nq = filter q by 'RebateType.BenefitMapping.HasProductBenefitMapping' == \"true\";\nq = filter q by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nq = filter q by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Current_PayoutPeriod_FIlter.result, 0, \"Max\"),0).asObject()}}/1000;\r\nq = filter q by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result, 0, \"Min\"),0).asObject()}}/1000;\r\nall_payout_sources = filter q by 'MemberPayout.PayoutPeriods.RebateProgram.Name' in [\"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\"];\r\nall_payout_sources = filter all_payout_sources by 'RebateType.Name' in [\"{{cell(RebateType_Name_1.selection, 0, \"RebateType.Name\").asString()}}\"];\r\nall_payout_sources = filter all_payout_sources by 'Product.Name' in [\"{{cell(Product_List.selection, 0, \"Product Name\").asString()}}\"];\r\nall_payout_sources = foreach all_payout_sources generate 'MemberPayout.PayoutPeriods.Name','RebateType.BenefitQualifierField','BenefitQualifierValue', 'RebateTypeBenefit.Id', 'RebateTypeBenefit.Name', number_to_string('RebateTypeBenefit.MinimumQualifyingValue',\"#.0#\") as 'MinimumQualifyingValue_str', 'RebateTypeBenefit.MinimumQualifyingValue', number_to_string('RebateTypeBenefit.MaximumQualifyingValue',\"#.0#\") as 'MaximumQualifyingValue_str', 'RebateTypeBenefit.MaximumQualifyingValue','Product.PriceEntry.UnitPrice';\r\nall_payout_sources = foreach all_payout_sources generate 'MemberPayout.PayoutPeriods.Name', 'RebateTypeBenefit.Id','RebateType.BenefitQualifierField', 'RebateTypeBenefit.Name','BenefitQualifierValue', 'RebateTypeBenefit.MaximumQualifyingValue', case when len('MaximumQualifyingValue_str') > 5 then (number_to_string('RebateTypeBenefit.MaximumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MaximumQualifyingValue_str' end as 'MaximumQualifyingValue_str', 'RebateTypeBenefit.MinimumQualifyingValue', case when len('MinimumQualifyingValue_str') > 5 then (number_to_string('RebateTypeBenefit.MinimumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MinimumQualifyingValue_str' end as 'MinimumQualifyingValue_str', 'Product.PriceEntry.UnitPrice';\r\nall_payout_sources = foreach all_payout_sources generate 'MemberPayout.PayoutPeriods.Name', 'RebateTypeBenefit.Id','RebateType.BenefitQualifierField', 'RebateTypeBenefit.Name', 'MinimumQualifyingValue_str'+\" - \"+coalesce('MaximumQualifyingValue_str',\"\") as 'Tiers','BenefitQualifierValue', 'Product.PriceEntry.UnitPrice';\r\nresult = group  all_payout_sources by ('MemberPayout.PayoutPeriods.Name', 'RebateTypeBenefit.Id', 'Tiers', 'RebateType.BenefitQualifierField');\r\nresult = foreach result generate 'MemberPayout.PayoutPeriods.Name',coalesce('Tiers',\"-\") as 'Tiers','RebateType.BenefitQualifierField' as 'RebateType.BenefitQualifierField',  sum('BenefitQualifierValue') as 'BenefitQualifierValue', case when first('RebateType.BenefitQualifierField') like \"%Amount\" then sum('BenefitQualifierValue')/sum('Product.PriceEntry.UnitPrice') else sum('BenefitQualifierValue') end as 'BenefitQualifierUnits', sum('Product.PriceEntry.UnitPrice') as 'UnitPrice';","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Payouts_by_Status_1":{"broadcastFacet":true,"groups":[],"label":"Payouts by Status","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asEquality('MemberPayout.PayoutPeriods.RebateProgram.Name')}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"Payout\", \"PayoutAndAccrual\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+\n'MemberPayout.Status' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+'MemberPayout.PayoutPeriods.RebateProgram.Name' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nDataForFill_Current = union Start_Current, End_Current;\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity';\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Current = foreach FilledData_Current generate substr('Id',index_of('Id',\"<#>\")+3) as 'MemberPayout.Status', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity';\nFilledData_Current = foreach FilledData_Current generate case when 'MemberPayout.Status' == \"Pending\" then 'RebateAmount' else 0 end as 'UnderReview_Payout', \ncase when 'MemberPayout.Status' == \"SystemCalculated\" then 'RebateAmount' else 0 end as 'Calculated_Payout'\n;\nresult = group FilledData_Current by all;\nresult = foreach result generate sum('UnderReview_Payout') as 'UnderReview_Payout', sum('Calculated_Payout') as 'Calculated_Payout';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Progress_To_Next":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"all_benefit_types = load \"ProgramRebateTypeBenefitMaster\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.BenefitMapping.HasProductBenefitMapping' == \"true\";\nall_benefit_types = filter all_benefit_types by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nall_benefit_types = filter all_benefit_types by 'RebateType.RebateProgram.Name' == \"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.Name' == \"{{cell(RebateType_Name_1.selection, 0, \"RebateType.Name\").asString()}}\";\r\nall_benefit_types = filter all_benefit_types by 'ProductId' == \"{{cell(Product_List.selection, 0, \"ProductID\").asString()}}\";\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', number_to_string('MinimumQualifyingValue',\"#.0#\") as 'MinimumQualifyingValue_str', 'MinimumQualifyingValue', number_to_string('MaximumQualifyingValue',\"#.0#\") as 'MaximumQualifyingValue_str', 'MaximumQualifyingValue', 'BenefitValue', 'RebateType.RebateMeasureType','RebateType.BenefitQualifierField';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MaximumQualifyingValue', case when len('MaximumQualifyingValue_str') > 5 then (number_to_string('MaximumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MaximumQualifyingValue_str' end as 'MaximumQualifyingValue_str', 'MinimumQualifyingValue', case when len('MinimumQualifyingValue_str') > 5 then (number_to_string('MinimumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MinimumQualifyingValue_str' end as 'MinimumQualifyingValue_str', 'BenefitValue', 'RebateType.RebateMeasureType', case when 'RebateType.RebateMeasureType'==\"PercentageOfRevenue\" then \"%\" when 'RebateType.RebateMeasureType'==\"Custom\" then \"no units\" else \"$\" end as 'BenefitUnit','RebateType.BenefitQualifierField';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MinimumQualifyingValue_str'+\" - \"+coalesce('MaximumQualifyingValue_str',\"\") as 'Tiers','RebateType.BenefitQualifierField', 'BenefitValue', 'BenefitUnit','MinimumQualifyingValue','MaximumQualifyingValue';\r\nall_benefit_types = filter all_benefit_types by 'Tiers' != \"{{cell(Current_Tier.result, 0, \"Tiers\").asString()}}\";\r\nresult = foreach all_benefit_types generate 'Id' as 'ProgramRebateTypeBenefitId', first(all_benefit_types.'Tiers') as 'Tiers','RebateType.BenefitQualifierField', 'MinimumQualifyingValue','MaximumQualifyingValue',first(all_benefit_types.'BenefitUnit') as 'BenefitUnit', case when first(all_benefit_types.'BenefitUnit') == \"%\" then \"%\" else null end as 'BenefitUnit_suffix', case when first(all_benefit_types.'BenefitUnit') == \"$\" then \"$\" else null end as 'BenefitUnit_prefix',\r\ncoalesce(sum(all_benefit_types.'BenefitValue'),0) as 'Benefit Value';\r\nresult = foreach result generate 'Tiers' as 'Tiers','RebateType.BenefitQualifierField','MinimumQualifyingValue','MaximumQualifyingValue', {{coalesce(cell(Current_Tier.result, 0, \"BenefitQualifierValue\"),0).asObject()}} as 'Current_Benifit_Qualifier','MinimumQualifyingValue' - {{coalesce(cell(Current_Tier.result, 0, \"BenefitQualifierValue\"),0).asObject()}} as 'Min_Current_DIfference';\r\nresult = filter result by 'Min_Current_DIfference' > 0;\r\nresult = group result by 'Tiers';\r\nresult = foreach result generate 'Tiers' as 'Tiers', first('RebateType.BenefitQualifierField') as 'RebateType.BenefitQualifierField',sum('MinimumQualifyingValue') as 'MinimumQualifyingValue' ,case when first('RebateType.BenefitQualifierField') like \"%Amount%\" then sum('MinimumQualifyingValue')/{{coalesce(cell(Current_Tier.result, 0, \"UnitPrice\"),1).asObject()}} else sum('MinimumQualifyingValue') end as 'MinimumQualifyingUnits', sum('MaximumQualifyingValue') as 'MaximumQualifyingValue',sum('Current_Benifit_Qualifier') as 'Current_Benifit_Qualifier', case when first('RebateType.BenefitQualifierField') like \"%Amount\" then sum('Min_Current_DIfference')/{{coalesce(cell(Current_Tier.result, 0, \"UnitPrice\"),1).asObject()}} else sum('Min_Current_DIfference') end as 'Progress_To_Next_Tier', min( case when first('RebateType.BenefitQualifierField') like \"%Amount\" then sum('Min_Current_DIfference')/{{coalesce(cell(Current_Tier.result, 0, \"UnitPrice\"),1).asObject()}} else sum('Min_Current_DIfference') end) over([..] partition by all)  as 'Min';\r\nresult = filter result by 'Progress_To_Next_Tier' == 'Min' ;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"RebateProgram_Name_3":{"broadcastFacet":false,"groups":[],"label":"RebateProgram_Name_3","numbers":[],"query":"q = load \"RebateProgramMemberMaster\";\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"Account.Id\")}};\nq = group q by 'RebateProgram.Name';\nq = foreach q generate 'RebateProgram.Name' as 'Program Name', count() as 'count';\nq = order q by 'Program Name' asc;\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"singlerequired","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Incentives_Details_T_1":{"broadcastFacet":true,"groups":[],"label":"Incentives Details Table","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asEquality('MemberPayout.PayoutPeriods.RebateProgram.Name')}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalApprovedAdjustmentAmount' else 'MemberPayout.TotalApprovedAdjustmentAmount' end as 'TotalAdjustmentAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyTotalApprovedAdjustmentAmount' as 'DailyTotalApprovedAdjustmentAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalApprovedAdjustmentAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalApprovedAdjustmentAmount' else 0 end as 'TotalAdjustmentAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount',  case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyTotalApprovedAdjustmentAmount' as 'DailyTotalApprovedAdjustmentAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount','DailyQuantity' as 'DailyQuantity';\nDataForFill_Current = union Start_Current, End_Current;\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'TotalAdjustmentAmount' as 'TotalAdjustmentAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyTotalApprovedAdjustmentAmount' as 'DailyTotalApprovedAdjustmentAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('TotalAdjustmentAmount') as 'TotalAdjustmentAmount', min(first('DailyTotalApprovedAdjustmentAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalApprovedAdjustmentAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity';\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Current = foreach FilledData_Current generate 'Id' as 'Id', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'TotalAdjustmentAmount' is null then month_days(toDate('Date'))*'DailyTotalApprovedAdjustmentAmount' else 'TotalAdjustmentAmount' end) as 'TotalAdjustmentAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity';\nresult = group FilledData_Current by ('Id') left, current_valid_payout_sources by ('Id');\nresult = foreach result generate first(current_valid_payout_sources.'MemberPayout.PayoutPeriods.Name') as 'MemberPayout.PayoutPeriods.Name', first(current_valid_payout_sources.'MemberPayout.PayoutPeriods.Status') as 'MemberPayout.PayoutPeriods.Status', \n first(current_valid_payout_sources.'MemberPayout.PayoutPeriods.StartDate') as 'MemberPayout.PayoutPeriods.StartDate', first(current_valid_payout_sources.'MemberPayout.PayoutPeriods.EndDate') as 'MemberPayout.PayoutPeriods.EndDate', first(current_valid_payout_sources.'MemberPayout.PayoutPeriods.PayoutCalculationDate') as 'MemberPayout.PayoutPeriods.PayoutCalculationDate', first(current_valid_payout_sources.'Product.Name') as 'Product.Name', sum(FilledData_Current.'TotalTransactionAmount') as 'TotalTransactionAmount',sum(FilledData_Current.'TotalQuantity') as 'TotalQuantity', sum(FilledData_Current.'RebateAmount') as 'RebateAmount', sum(FilledData_Current.'TotalAdjustmentAmount') as 'TotalAdjustmentAmount';\n result = group result by ('MemberPayout.PayoutPeriods.Name', 'MemberPayout.PayoutPeriods.Status', 'MemberPayout.PayoutPeriods.StartDate', 'MemberPayout.PayoutPeriods.EndDate', \n 'MemberPayout.PayoutPeriods.PayoutCalculationDate', 'Product.Name');\n result = foreach result generate 'MemberPayout.PayoutPeriods.Name' as 'Payout Period', 'MemberPayout.PayoutPeriods.Status' as 'Status', \n 'MemberPayout.PayoutPeriods.StartDate' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate' as 'End Date', 'MemberPayout.PayoutPeriods.PayoutCalculationDate' as 'Payout Calculation Date', 'Product.Name' as 'Product.Name', round(sum('TotalTransactionAmount'),0) as 'AggregateObject.TotalTransactionAmount',round(sum('TotalQuantity'),0) as 'AggregateObject.TotalQuantity', round(sum('RebateAmount'),0) as 'Total Payout', round(sum('TotalAdjustmentAmount'),0) as 'Adjusted Earnings';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"pivoted":false,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"Current_Period_Earni_1":{"broadcastFacet":true,"groups":[],"label":"Current Period Earnings","numbers":[],"query":"q = load \"ProgramRebateTypePayoutSourceMaster\";\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nq = filter q by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nq = filter q by {{coalesce(cell(Current_PayoutPeriod_FIlter.result, 0, \"PayoutId\"), \"NA\").asEquality(\"MemberPayout.PayoutPeriods.Id\")}};\nq = group q by all;\nq = foreach q generate sum('FinalRebateAmount') as 'sum_FinalRebateAmount';\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":[],"plots":["sum_FinalRebateAmount"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Benefit_Qualifier_Ga_1":{"broadcastFacet":true,"groups":[],"label":"Benefit Qualifier Gauge Chart","numbers":[],"query":"q = load \"ProgramRebateTypeBenefitMaster\";\nq = group q by all;\nq = foreach q generate {{coalesce(cell(Current_Tier.result, 0, \"BenefitQualifierUnits\"), 0).asObject()}} as 'Benefit Qualifier';\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"RebateType_Name_1":{"broadcastFacet":false,"groups":[],"label":"RebateType_Name_1","numbers":[],"query":"q = load \"ProgramRebateTypeBenefitMaster\";\nq = filter q by 'RebateType.BenefitMapping.HasProductBenefitMapping' == \"true\";\nq = filter q by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nq = filter q by 'RebateType.RebateProgram.Name' == \"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\";\nq = group q by 'RebateType.Name';\nq = foreach q generate 'RebateType.Name' as 'RebateType.Name', count() as 'count';\nq = order q by 'RebateType.Name' asc;\nq = limit q 2000;","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"singlerequired","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Pricing_by_products_1":{"broadcastFacet":true,"groups":[],"label":"Pricing by products","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"Payout\", \"PayoutAndAccrual\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('Product.Id',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('Product.Id',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nDataForFill_Current = union Start_Current, End_Current;\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity';\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Current = foreach FilledData_Current generate substr('Id',index_of('Id',\"<#>\")+3) as 'Product.Id', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity';\nproductFilters = load \"ProgramRebateTypeMaster\"; productFilters = filter productFilters by 'CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];products = load \"ProductMaster\"; result = group productFilters by ('InclusionFilters.ValuesMultiValue') left, products by ('Id') left, FilledData_Current by ('Product.Id');\n result = foreach result generate first(products.'Name') as 'Product.Name', round(sum(FilledData_Current.'TotalTransactionAmount'),0) as 'TotalTransactionAmount', round(sum(FilledData_Current.'TotalQuantity'),0) as 'TotalQuantity', round(sum(FilledData_Current.'RebateAmount'),0) as 'RebateAmount';\nresult = foreach result generate 'Product.Name' as 'Product.Name', sum('TotalTransactionAmount')/sum('TotalQuantity') as 'Quoted Price', (sum('TotalTransactionAmount') - sum('RebateAmount'))/sum('TotalQuantity') as 'Effective Price', sum('RebateAmount')/sum('TotalTransactionAmount') as 'Effective Rebate', sum('TotalTransactionAmount') as 'Transactions';\nresult = order result by 'Quoted Price' desc nulls last;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"static_3":{"broadcastFacet":true,"columns":{"Transaction_Measure":{"type":"string"},"Display":{"type":"string"}},"label":"","selectMode":"singlerequired","type":"staticflex","values":["{\"Display\":\"Quantity\",\"Transaction_Measure\":\"coalesce(sum('TotalQuantity'),0) as 'Quantity'\"}","{\"Display\":\"Amount\",\"Transaction_Measure\":\"coalesce(sum('TotalTransactionAmount'),0) as 'Submitted Transaction Amount'\"}"]},"static_2":{"broadcastFacet":true,"columns":{"Measure":{"type":"string"},"Display":{"type":"string"}},"label":"Orders Placed and Value","selectMode":"singlerequired","type":"staticflex","values":["{\"Display\":\"Orders\",\"Measure\":\"coalesce(sum(q_current.'unique_order.Id'),0) as 'Current Orders', coalesce(sum(q_previous.'unique_order.Id'),0) as 'Previous Orders'\"}","{\"Display\":\"Order Value\",\"Measure\":\"coalesce(sum(q_current.'sum_TotalPrice'),0) as 'Current Order Value', coalesce(sum(q_previous.'sum_TotalPrice'),0) as 'Previous Order Value'\"}"]},"Benefit_Qualifier_Ga_2":{"broadcastFacet":true,"groups":[],"label":"Benefit Qualifier No Benefit Map Gauge Chart","numbers":[],"query":"q = load \"ProgramRebateTypeBenefitMaster\";\nq = group q by all;\nq = foreach q generate {{coalesce(cell(Current_Tier_2.result, 0, \"BenefitQualifierUnits\"), 0).asObject()}} as 'Beenfit Qualifier';\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"static_1":{"broadcastFacet":true,"columns":{"Order_Measure":{"type":"string"},"Display":{"type":"string"}},"label":"","selectMode":"singlerequired","type":"staticflex","values":["{\"Display\":\"Quantity\",\"Order_Measure\":\"'Quantity'\"}","{\"Display\":\"Order Value\",\"Order_Measure\":\"'Order Value'\"}"]},"Revenue_Payout_Quant_1":{"broadcastFacet":true,"groups":[],"label":"Revenue-Payout-Quantity KPIs","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"Payout\", \"PayoutAndAccrual\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; current_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; Start_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount'; End_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount'; DataForFill_Current = union Start_Current, End_Current; DataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount'; FilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month'); FilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount'; FilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount'; previous_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000; previous_valid_payout_sources = filter previous_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000;Start_Previous = foreach previous_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount'; End_Previous = foreach previous_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount'; DataForFill_Previous = union Start_Previous, End_Previous; DataForFill_Previous = foreach DataForFill_Previous generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount'; FilledData_Previous = fill DataForFill_Previous by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_Previous = group FilledData_Previous by ('Id', 'Date_Year', 'Date_Month'); FilledData_Previous = foreach FilledData_Previous generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount'; FilledData_Previous = filter FilledData_Previous by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_Previous = foreach FilledData_Previous generate 'Id', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount'; result = group FilledData_Current by all full, FilledData_Previous by all; result = foreach result generate sum(FilledData_Current.'RebateAmount') as 'Total Payout', case when coalesce(sum(FilledData_Previous.'RebateAmount'),0) == 0 then \"-\" else number_to_string(round((coalesce(sum(FilledData_Current.'RebateAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount'),0)) * 100 / coalesce(sum(FilledData_Previous.'RebateAmount'),0),0),\"0\") end as 'RebateDelta', case when (coalesce(sum(FilledData_Current.'RebateAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount'),0)) > 0 then \"rgb(255, 152, 151)\" else \"rgb(0, 181, 49)\" end as 'RebateColor', case when (coalesce(sum(FilledData_Current.'RebateAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount'),0)) > 0 then \"↑\"  when (coalesce(sum(FilledData_Current.'RebateAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount'),0)) == 0 then \"-\" else \"↓\" end as 'RebateArrow',  sum(FilledData_Current.'TotalTransactionAmount') as 'Total Revenue', case when coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0) == 0 then \"-\" else number_to_string(round((coalesce(sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0)) * 100 / coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0),0),\"0\") end as 'TransactionDelta', case when (coalesce(sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0)) > 0 then \"rgb(0, 181, 49)\" else \"rgb(255, 152, 151)\" end as 'TransactionColor', case when (coalesce(sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0)) > 0 then \"↑\"  when (coalesce(sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0)) == 0 then \"-\" else \"↓\" end as 'TransactionArrow', round(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalTransactionAmount'),4) as 'Payout:Revenue', case when coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0) == 0 then \"-\" else number_to_string(round((coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0)) * 100 / coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0),0),\"0\") end as 'Payout:RevenueDelta', case when (coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0)) > 0 then \"rgb(255, 152, 151)\" else \"rgb(0, 181, 49)\" end as 'Payout:RevenueColor',  case when (coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0)) > 0 then \"↑\"  when (coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0)) == 0 then \"-\" else \"↓\" end as 'Payout:RevenueArrow';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Orders_by_Amount_1":{"broadcastFacet":true,"groups":[],"label":"Orders by Amount","numbers":[],"query":"q = load \"OrderMaster\";\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"Account.Id\")}};\nq = filter q by 'Order.ActivatedDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n q = filter q by 'Order.ActivatedDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nq = group q by 'Order.OrderNumber';\nq = foreach q generate 'Order.OrderNumber' as 'Order.OrderNumber', sum('TotalPrice') as 'Order Value';\nq = order q by 'Order Value' desc;\nq = limit q 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Orders_Trend_1":{"broadcastFacet":true,"groups":[],"label":"Orders Trend","numbers":[],"query":"q = load \"OrderMaster\";\nq = filter q by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"Account.Id\")}};\nq_current = filter q by 'Order.ActivatedDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nq_current = filter q_current by 'Order.ActivatedDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nq_previous = filter q by 'Order.ActivatedDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Year_Max\"),0).asObject()}}/1000;\nq_previous = filter q_previous by 'Order.ActivatedDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Year_Min\"),0).asObject()}}/1000;\nq_current = group q_current by ('Order.ActivatedDate_Year','Order.ActivatedDate_Month');\nq_current = foreach q_current generate 'Order.ActivatedDate_Year' as 'Order.ActivatedDate_Year','Order.ActivatedDate_Month' as 'Order.ActivatedDate_Month', unique('Order.Id') as 'unique_order.Id', sum('TotalPrice') as 'sum_TotalPrice';\nq1 = foreach q_current generate toString(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") as 'Order.ActivatedDate_Year', toString(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") as 'Order.ActivatedDate_Month', 0 as 'unique_order.Id', 0 as 'sum_TotalPrice';\nq2 = foreach q_current generate toString(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") as 'Order.ActivatedDate_Year', toString(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") as 'Order.ActivatedDate_Month', 0 as 'unique_order.Id', 0 as 'sum_TotalPrice';\nq_current = union q_current, q1, q2;\nq_current = foreach q_current generate 'Order.ActivatedDate_Year' as 'Order.ActivatedDate_Year', 'Order.ActivatedDate_Month' as 'Order.ActivatedDate_Month',\n'unique_order.Id' as 'unique_order.Id', 'sum_TotalPrice' as 'sum_TotalPrice';\nq_current = fill q_current by (dateCols=('Order.ActivatedDate_Year', 'Order.ActivatedDate_Month', \"Y-M\"));\nq_previous = group q_previous by ('Order.ActivatedDate_Year','Order.ActivatedDate_Month');\nq_previous = foreach q_previous generate 'Order.ActivatedDate_Year' as 'Order.ActivatedDate_Year','Order.ActivatedDate_Month' as 'Order.ActivatedDate_Month', unique('Order.Id') as 'unique_order.Id', sum('TotalPrice') as 'sum_TotalPrice';\nresult = cogroup q_current by 'Order.ActivatedDate_Month' full, q_previous by 'Order.ActivatedDate_Month';\nresult = foreach result generate first(q_current.'Order.ActivatedDate_Year') +\"~~~\" +coalesce(q_current.'Order.ActivatedDate_Month', q_previous.'Order.ActivatedDate_Month') as 'CreatedDate_Year~~~CreatedDate_Month', {{coalesce(cell(static_2.selection, 0, \"Measure\"), \"NA\").asString()}};\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-bar","timeAxis":{"showTitle":false,"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"timeAxis":["Order.ActivatedDate_Month"],"trellis":[],"plots":["current_orders","Previous_orders"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Total_Orders_1":{"broadcastFacet":true,"groups":[],"label":"Total Orders","numbers":[],"query":"orders = load \"OrderMaster\"; orders = filter orders by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"Account.Id\")}};\norders_current = filter orders by 'Order.ActivatedDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; orders_current = filter orders_current by 'Order.ActivatedDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; orders_previous = filter orders by 'Order.ActivatedDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000; orders_previous = filter orders_previous by 'Order.ActivatedDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000; result = group orders_current by all full, orders_previous by all; result = foreach result generate sum(orders_current.'TotalPrice') as 'sum_TotalPrice', case when coalesce(sum(orders_current.'TotalPrice'),0) < coalesce(sum(orders_previous.'TotalPrice'),0) then \"rgb(255, 152, 151)\" else \"rgb(0, 181, 49)\" end as 'OrdersColor', case when coalesce(sum(orders_current.'TotalPrice'),0) < coalesce(sum(orders_previous.'TotalPrice'),0) then \"↓\" when coalesce(sum(orders_current.'TotalPrice'),0) == coalesce(sum(orders_previous.'TotalPrice'),0) then \"-\" else \"↑\" end as 'OrdersArrow', round((coalesce(sum(orders_current.'TotalPrice'),0)/coalesce(sum(orders_previous.'TotalPrice'),0))*100,2) as 'OrdersDelta';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Revenue_Payouts_Quan_1":{"broadcastFacet":true,"groups":[],"label":"Revenue/Payouts/Quantity by Rebate Program","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\"; all_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"Payout\", \"PayoutAndAccrual\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; current_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; Start_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+'MemberPayout.PayoutPeriods.RebateProgram.Name' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity'; End_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+'MemberPayout.PayoutPeriods.RebateProgram.Name' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity'; DataForFill_Current = union Start_Current, End_Current; DataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity'; FilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month'); FilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity'; FilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_Current = foreach FilledData_Current generate substr('Id',index_of('Id',\"<#>\")+3) as 'MemberPayout.PayoutPeriods.RebateProgram.Name', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity'; result = group FilledData_Current by ('MemberPayout.PayoutPeriods.RebateProgram.Name');\nresult = foreach result generate 'MemberPayout.PayoutPeriods.RebateProgram.Name', sum('TotalTransactionAmount') as 'TotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', sum('TotalQuantity') as 'TotalQuantity';\nresult = group result by ('MemberPayout.PayoutPeriods.RebateProgram.Name');\nresult = foreach result generate 'MemberPayout.PayoutPeriods.RebateProgram.Name', sum('TotalTransactionAmount') as 'Total Revenue', sum('RebateAmount') as 'Earnings', sum('TotalQuantity') as 'Total Quantity', sum('RebateAmount')/sum('TotalTransactionAmount') as 'Payout:Revenue', sum('RebateAmount')/sum('TotalQuantity') as 'Payout:Quantity', sum(count()) over([..] partition by all) as 'Count_Programs';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","centerText":"","legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"showMeasureTitle":true,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"pie","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"inner":60,"showActionMenu":true,"centerValueType":"number","valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Change_in_earnings_b_1":{"broadcastFacet":true,"groups":[],"label":"Change in earnings by products","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asEquality('MemberPayout.PayoutPeriods.RebateProgram.Name')}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"Payout\", \"PayoutAndAccrual\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"@#%\"+coalesce('Product.Name',\"-\")+\"!#%\"+coalesce('Product.Id',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('Product.Name',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) \nthen (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', \n'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nDataForFill_Current = union Start_Current, End_Current;\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'RebateAmount' as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount';\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Current = foreach FilledData_Current generate substr('Id', index_of('Id',\"@#%\",1,1)+3, index_of('Id',\"!#%\") - (index_of('Id',\"@#%\",1,1)+3)) as 'Product.Name', substr('Id', index_of('Id',\"!#%\")+3) as 'Product.Id', 'Date_Year', 'Date_Month', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount';\nprevious_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000;\nprevious_valid_payout_sources = filter previous_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000;\nStart_Previous = foreach previous_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"@#%\"+coalesce('Product.Name',\"-\")+\"!#%\"+coalesce('Product.Id',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nEnd_Previous = foreach previous_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('Product.Name',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000)) \nthen (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', \n'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nDataForFill_Previous = union Start_Previous, End_Previous;\nDataForFill_Previous = foreach DataForFill_Previous generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'RebateAmount' as 'RebateAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount';\nFilledData_Previous = fill DataForFill_Previous by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Previous = group FilledData_Previous by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Previous = foreach FilledData_Previous generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount';\nFilledData_Previous = filter FilledData_Previous by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Previous = foreach FilledData_Previous generate substr('Id', index_of('Id',\"@#%\",1,1)+3, index_of('Id',\"!#%\") - (index_of('Id',\"@#%\",1,1)+3)) as 'Product.Name', substr('Id', index_of('Id',\"!#%\")+3) as 'Product.Id', 'Date_Year', 'Date_Month', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount';\nproductFilters = load \"ProgramRebateTypeMaster\";\nproductFilters = filter productFilters by 'CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nproducts = load \"ProductMaster\";\nresult = group productFilters by ('InclusionFilters.ValuesMultiValue') left, products by ('Id') left, FilledData_Current by ('Product.Id') full, FilledData_Previous by ('Product.Id');\nresult = foreach result generate first(products.'Name') as 'Product.Name', sum(FilledData_Current.'RebateAmount') as 'CurrentRebate', sum(FilledData_Previous.'RebateAmount') as 'PreviousRebate';\nresult = group result by 'Product.Name';\nresult = foreach result generate 'Product.Name' as 'Product.Name', coalesce(round((sum('CurrentRebate') - sum('PreviousRebate'))/sum('PreviousRebate'),2),0) as 'RebateDelta';\nresult = foreach result generate 'Product.Name' as 'Product.Name', 'RebateDelta' as 'RebateDelta', case when 'RebateDelta' > 0 then 'RebateDelta' else 0 end as 'PositiveRebateDelta', case when 'RebateDelta' < 0 then -'RebateDelta' else 0 end as 'NegativeRebateDelta';\nresult = filter result by 'PositiveRebateDelta' !=0 or 'NegativeRebateDelta' !=0;\nresult = order result by 'PositiveRebateDelta' desc nulls last;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"showMeasureTitle":true,"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"pyramid","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showMeasure":true,"columnMap":{"measureAxis2":["PositiveRebateDelta"],"measureAxis1":["NegativeRebateDelta"],"trellis":[],"dimensionAxis":["Product.Name"],"plots":["PositiveRebateDelta","NegativeRebateDelta"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","rightColor":"#e16032","leftColor":"#52b7d8","compactDecimalDigits":-1,"dimensionAxis":{"customSize":"auto","showAxis":true},"applyConditionalFormatting":true},"type":"chart"}},"Adjustment_Amount_1":{"broadcastFacet":true,"groups":[],"label":"Adjustment Amount KPI","numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(Account_for_current__1.result, 0, \"AccountId\"), \"NA\").asEquality(\"MemberPayout.Member.Account.Id\")}};\nall_payout_sources = filter all_payout_sources by {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asEquality('MemberPayout.PayoutPeriods.RebateProgram.Name')}};\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"Payout\", \"PayoutAndAccrual\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; current_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; Start_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalApprovedAdjustmentAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalApprovedAdjustmentAmount' else 'MemberPayout.TotalApprovedAdjustmentAmount' end as 'AdjustmentAmount', 'DailyTotalApprovedAdjustmentAmount' as 'DailyTotalApprovedAdjustmentAmount';\n End_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalApprovedAdjustmentAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalApprovedAdjustmentAmount' else 0 end as 'AdjustmentAmount', 'DailyTotalApprovedAdjustmentAmount' as 'DailyTotalApprovedAdjustmentAmount';\n DataForFill_Current = union Start_Current, End_Current; DataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'DailyTotalApprovedAdjustmentAmount' as 'DailyTotalApprovedAdjustmentAmount', 'AdjustmentAmount' as 'AdjustmentAmount'; FilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month'); FilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('AdjustmentAmount') as 'AdjustmentAmount', min(first('DailyTotalApprovedAdjustmentAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalApprovedAdjustmentAmount'; FilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', (case when 'AdjustmentAmount' is null then month_days(toDate('Date'))*'DailyTotalApprovedAdjustmentAmount' else 'AdjustmentAmount' end) as 'AdjustmentAmount'; result = group FilledData_Current by all; result = foreach result generate sum('AdjustmentAmount') as 'sum_AdjustmentAmount';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}}},"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1},"widgets":{"container_19":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"link_18":{"parameters":{"destinationLink":{"name":"93112a49-c1eb-438f-a517-20f7fa2f8334"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Product Pricing","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"container_18":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"link_19":{"parameters":{"destinationLink":{"name":"9f1a7df1-84ae-49b9-8d28-d069b3122c91"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Tier Benefits","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"container_17":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_18":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_16":{"parameters":{"destinationType":"lens","fontSize":16,"includeState":false,"text":"What's Next","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"container_16":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_17":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#ffffff","size":"14px"},"insert":"Earnings"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_15":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"link_17":{"parameters":{"destinationLink":{"name":"045599b9-5889-47c5-a7bf-e08a18ef3bf4"},"destinationType":"page","fontSize":16,"includeState":false,"text":"Rebate Types without Product Benefits >>","textAlignment":"center","textColor":"rgb(0, 112, 210)"},"type":"link"},"link_14":{"parameters":{"destinationType":"lens","fontSize":16,"includeState":false,"text":"Incentives","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"container_14":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_19":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"16px"},"insert":"Orders by Value"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_15":{"parameters":{"destinationType":"lens","fontSize":16,"includeState":false,"text":"Pricing","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"container_13":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_14":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"{{cell(Revenue_Payout_Quant_1.result, 0, \"RebateColor\").asObject()}}","align":"left"},"insert":"{{cell(Revenue_Payout_Quant_1.result, 0, \"RebateArrow\").asObject()}} {{coalesce(cell(Revenue_Payout_Quant_1.result, 0, \"RebateDelta\"),\"-\").asObject()}}%"}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_12":{"parameters":{"destinationLink":{"name":"8a61610b-9f15-4256-9291-ac270544f830"},"destinationType":"page","fontSize":16,"includeState":false,"text":"Purchase","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"text_13":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#c6d3e1","size":"14px"},"insert":"Earnings"},{"attributes":{"color":"#091a3e","size":"16px"},"insert":" text..."},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_13":{"parameters":{"destinationLink":{"name":"8a61610b-9f15-4256-9291-ac270544f830"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Orders","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"text_16":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#ffffff","size":"16px"},"insert":"What are my earnings from rebate programs ?"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_10":{"parameters":{"destinationLink":{"name":"6eb36708-182e-42dc-81f0-31b2931bdaf0"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Incentives","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"text_15":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"{{cell(Revenue_Payout_Quant_1.result, 0, \"Payout:RevenueColor\").asObject()}}","align":"left"},"insert":"{{cell(Revenue_Payout_Quant_1.result, 0, \"Payout:RevenueArrow\").asObject()}} {{coalesce(cell(Revenue_Payout_Quant_1.result, 0, \"Payout:RevenueDelta\"),\"-\").asObject()}}%"}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_11":{"parameters":{"destinationLink":{"name":"8a61610b-9f15-4256-9291-ac270544f830"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Orders","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"text_10":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"{{cell(Total_Orders_1.result, 0, \"OrdersColor\").asObject()}}","align":"left"},"insert":"{{cell(Total_Orders_1.result, 0, \"OrdersArrow\").asObject()}} {{coalesce(cell(Total_Orders_1.result, 0, \"OrdersDelta\"),\"-\").asObject()}}%"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_12":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#c6d3e1","size":"14px"},"insert":"Effective Rebate"},{"attributes":{"color":"#091a3e","size":"16px"},"insert":" text..."},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_11":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"{{cell(Revenue_Payout_Quant_1.result, 0, \"TransactionColor\").asObject()}}","align":"left"},"insert":"{{cell(Revenue_Payout_Quant_1.result, 0, \"TransactionArrow\").asObject()}} {{coalesce(cell(Revenue_Payout_Quant_1.result, 0, \"TransactionDelta\"),\"-\").asObject()}}%"}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_9":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","step":"Orders_by_Amount_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"chart_6":{"parameters":{"showPoints":false,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["counter"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":true,"showMeasures":false,"dimensions":["RebateProgram.Name"]}}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"exploreLink":true,"timeAxis":{"showTitle":false,"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"dark","step":"Program_Timeline_1","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"text_3":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_5":{"parameters":{"autoFitMode":"keepLabels","centerText":"{{coalesce(cell(Programs_count_1.result, 0, \"unique_RebateProgram.Name\"), 0).asObject()}}","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"showMeasureTitle":false,"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"pie","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"inner":80,"columnMap":{"trellis":[],"dimension":["MemberPayout.PayoutPeriods.RebateProgram.Name"],"plots":["Earnings"]},"showActionMenu":true,"centerValueType":"text","measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"dark","step":"Revenue_Payouts_Quan_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"text_2":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_22":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_5":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#c6d3e1","size":"14px"},"insert":"Submitted Transaction Amount"},{"attributes":{"color":"#091a3e","size":"16px"},"insert":"txt..."},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_8":{"parameters":{"autoFitMode":"keepLabels","centerText":"","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"showMeasureTitle":false,"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"pie","exploreLink":true,"title":{"fontSize":16,"subtitleFontSize":11,"label":"Orders by Status","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"inner":80,"columnMap":{"trellis":[],"dimension":["Order.Status"],"plots":["Orders"]},"showActionMenu":true,"centerValueType":"number","measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","step":"Order_Status_2","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"container_21":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_4":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_7":{"parameters":{"stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"dual","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"missingValue":"connect","visualizationType":"time-combo","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"valueType":"compactNumber","theme":"dark","dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true,"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"timeAxis":{"showTitle":false,"showAxis":true,"title":""},"plots":{"Orders":{"mark":"line"},"Submitted Transaction Amount":{"mark":"bar"},"Earnings":{"mark":"bar"}},"columnMap":{"timeAxis":["CreatedDate_Year~~~CreatedDate_Month"],"trellis":[],"plots":["Orders","Submitted Transaction Amount","Earnings"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Submitted Transaction Amount and Earnings","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueTypeOnLine":"none","step":"Revenue___Payout_Ove_1","compactDecimalDigits":-1},"type":"chart"},"container_20":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_7":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_6":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_9":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#c6d3e1","size":"14px"},"insert":"Total Order Value"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_8":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_29":{"parameters":{"destinationLink":{"name":"8e86b661-a2c4-41c6-8b4f-b269bf39f8fb"},"destinationType":"page","fontSize":16,"includeState":false,"text":"Payment Details","textAlignment":"center","textColor":"rgb(0, 112, 210)"},"type":"link"},"link_27":{"parameters":{"destinationLink":{"name":"8e86b661-a2c4-41c6-8b4f-b269bf39f8fb"},"destinationType":"page","fontSize":16,"includeState":false,"text":"Payment Details","textAlignment":"center","textColor":"rgb(0, 112, 210)"},"type":"link"},"link_28":{"parameters":{"destinationLink":{"name":"6eb36708-182e-42dc-81f0-31b2931bdaf0"},"destinationType":"page","fontSize":16,"includeState":false,"text":"Incentive Details","textAlignment":"center","textColor":"rgb(0, 112, 210)"},"type":"link"},"link_25":{"parameters":{"destinationLink":{"name":"9f1a7df1-84ae-49b9-8d28-d069b3122c91"},"destinationType":"page","fontSize":16,"includeState":false,"text":"<< Rebate Types with Product Benefits","textAlignment":"center","textColor":"rgb(0, 112, 210)"},"type":"link"},"link_26":{"parameters":{"destinationLink":{"name":"9f1a7df1-84ae-49b9-8d28-d069b3122c91"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Tier Benefits","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_23":{"parameters":{"destinationLink":{"name":"8a61610b-9f15-4256-9291-ac270544f830"},"destinationType":"page","fontSize":16,"includeState":false,"text":"Purchase","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_24":{"parameters":{"destinationLink":{"name":"93112a49-c1eb-438f-a517-20f7fa2f8334"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Product Pricing","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_21":{"parameters":{"destinationLink":{"name":"93112a49-c1eb-438f-a517-20f7fa2f8334"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Product Pricing","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"link_22":{"parameters":{"destinationLink":{"name":"6eb36708-182e-42dc-81f0-31b2931bdaf0"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Incentives","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"link_20":{"parameters":{"destinationLink":{"name":"6eb36708-182e-42dc-81f0-31b2931bdaf0"},"destinationType":"page","fontSize":16,"includeState":false,"text":"Incentive Details","textAlignment":"center","textColor":"rgb(0, 112, 210)"},"type":"link"},"number_5":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Total Payout","numberColor":"#FFFFFF","numberSize":16,"showActionMenu":true,"step":"Revenue_Payout_Quant_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_4":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Total Revenue","numberColor":"#FFFFFF","numberSize":16,"showActionMenu":true,"step":"Revenue_Payout_Quant_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_3":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_TotalPrice","numberColor":"#FFFFFF","numberSize":16,"showActionMenu":true,"step":"Total_Orders_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"container_12":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_11":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_10":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"number_9":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_AdjustmentAmount","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"Adjustment_Amount_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_8":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_Amount","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"Payment_Count_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_7":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"unique_Id","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"Payment_Count_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_6":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Payout:Revenue","numberColor":"#FFFFFF","numberSize":16,"showActionMenu":true,"step":"Revenue_Payout_Quant_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"dateselector_2":{"parameters":{"absoluteModeEnabled":true,"calendarTypeSwitchingAllowed":true,"defaultFiscalMode":false,"displayMode":"filter","filterStyle":{"titleColor":"#C6D3E1","valueColor":"#FFFFFF"},"instant":false,"presetsEnabled":true,"relativeModeEnabled":true,"showActionMenu":true,"step":"StartDate_1","title":"Compare To"},"type":"dateselector"},"link_3":{"parameters":{"destinationLink":{"name":"93112a49-c1eb-438f-a517-20f7fa2f8334"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Product Pricing","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"link_4":{"parameters":{"destinationLink":{"name":"9f1a7df1-84ae-49b9-8d28-d069b3122c91"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Tier Benefits","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"link_1":{"parameters":{"destinationLink":{"name":"8a61610b-9f15-4256-9291-ac270544f830"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Orders","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_2":{"parameters":{"destinationLink":{"name":"6eb36708-182e-42dc-81f0-31b2931bdaf0"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Incentives","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"table_1":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12,"textWrap":false},"columnProperties":{},"columns":["Quantity","Order.OrderNumber","Order.ActivatedDate_Year~~~Order.ActivatedDate_Month~~~Order.ActivatedDate_Day","Order.CreatedDate_Year~~~Order.CreatedDate_Month~~~Order.CreatedDate_Day","Order.Status","Product.Name","Order Value"],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12,"textWrap":false},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"step":"Order_OrderNumber_Or_1","totals":true,"verticalPadding":8},"type":"table"},"table_2":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12,"textWrap":false},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12,"textWrap":false},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"step":"Payment_Details_1","verticalPadding":8},"type":"table"},"link_9":{"parameters":{"destinationLink":{"name":"8a61610b-9f15-4256-9291-ac270544f830"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Orders","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"table_3":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12,"textWrap":false},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12,"textWrap":false},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"step":"Pricing_details_tabl_1","verticalPadding":8},"type":"table"},"table_4":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12,"textWrap":false},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12,"textWrap":false},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"step":"Incentives_Details_T_1","totals":true,"verticalPadding":8},"type":"table"},"link_7":{"parameters":{"destinationType":"lens","fontSize":16,"includeState":false,"text":"Pricing","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"link_8":{"parameters":{"destinationType":"lens","fontSize":16,"includeState":false,"text":"What's Next","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"pillbox_1":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"#335779","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderWidth":0,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"static_3","textColor":"#335779"},"type":"pillbox"},"link_5":{"parameters":{"destinationLink":{"name":"6eb36708-182e-42dc-81f0-31b2931bdaf0"},"destinationType":"page","fontSize":20,"includeState":false,"text":"Incentives","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_6":{"parameters":{"destinationType":"lens","fontSize":16,"includeState":false,"text":"Incentives","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"pillbox_8":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"#335779","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderWidth":1,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"static_2","textColor":"#335779"},"type":"pillbox"},"pillbox_7":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"#335779","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderWidth":0,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"static_1","textColor":"#335779"},"type":"pillbox"},"number_12":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_FinalRebateAmount","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"Current_Period_Earni_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_11":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Calculated_Payout","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"Payouts_by_Status_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_10":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"UnderReview_Payout","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"Payouts_by_Status_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_58":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"{{coalesce(cell(Progress_To_Next_2.result, 0, \"Tiers\"), \"NA\").asString()}}"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_57":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Next Tier"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_59":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"{{coalesce(cell(Progress_To_Next.result, 0, \"Tiers\"), \"NA\").asString()}}"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_54":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Qualification Criteria : {{coalesce(cell(Rebate_Type_details_2.result, 0, \"DerivedBenefitQualifierField\"), \"NA\").asString()}}"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_53":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Measure Type : {{coalesce(cell(Rebate_Type_details_2.result, 0, \"DerivedRebateMeasureType\"), \"NA\").asString()}}"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_56":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"{{coalesce(cell(Current_Tier.result, 0, \"Tiers\"),\"NA\").asString()}}"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_55":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"{{coalesce(cell(Progress_To_Next.result, 0, \"Progress_To_Next_Tier\"),0).asString()}} Units"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_50":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"{{coalesce(cell(Current_Tier_2.result, 0, \"Tiers\"),\"NA\").asString()}}"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_51":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Current Period Earnings"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"container_1":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_2":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_3":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_4":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_5":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_6":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_7":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_8":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_9":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"chart_20":{"parameters":{"max":"{{cell(Progress_To_Next.result, 0, \"MinimumQualifyingUnits\").asObject()}}","legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","exploreLink":true,"medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"showActionMenu":true,"min":0,"valueType":"compactNumber","theme":"wave","step":"Benefit_Qualifier_Ga_1","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"dateselector_1":{"parameters":{"absoluteModeEnabled":true,"calendarTypeSwitchingAllowed":true,"defaultFiscalMode":false,"displayMode":"filter","filterStyle":{"titleColor":"#C6D3E1","valueColor":"#FFFFFF"},"instant":false,"presetsEnabled":true,"relativeModeEnabled":true,"showActionMenu":true,"step":"Date_Selector_1","title":"Duration"},"type":"dateselector"},"text_46":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px"},"insert":"Purchases Required for Tier Upgrade"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_49":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Current Tier"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_48":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"{{coalesce(cell(Progress_To_Next_2.result, 0, \"Progress_To_Next_Tier\"),0).asString()}} Units"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_42":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Measure Type : {{coalesce(cell(Rebate_Type_details_1.result, 0, \"DerivedRebateMeasureType\"), \"NA\").asString()}}"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_45":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"16px"},"insert":"Pricing Details"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_44":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Qualification Criteria : {{coalesce(cell(Rebate_Type_details_1.result, 0, \"DerivedBenefitQualifierField\"), \"NA\").asString()}}"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_19":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":16,"subtitleFontSize":11,"label":"Tiers and Benefits","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","step":"Tiers","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"chart_18":{"parameters":{"max":"{{cell(Progress_To_Next_2.result, 0, \"MinimumQualifyingUnits\").asObject()}}","legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","exploreLink":true,"medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"showActionMenu":true,"min":0,"valueType":"compactNumber","theme":"wave","step":"Benefit_Qualifier_Ga_2","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"chart_17":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"showMeasureTitle":false,"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["RebateDelta"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":["Product.Name"]}}},"visualizationType":"pyramid","exploreLink":true,"title":{"fontSize":16,"subtitleFontSize":11,"label":"Change in Earnings","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showMeasure":true,"columnMap":{"measureAxis2":["PositiveRebateDelta"],"measureAxis1":["NegativeRebateDelta"],"trellis":[],"dimensionAxis":["Product.Name"],"plots":["PositiveRebateDelta","NegativeRebateDelta"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","rightColor":"#e16032","step":"Change_in_earnings_b_1","leftColor":"#52b7d8","compactDecimalDigits":-1,"dimensionAxis":{"customSize":"auto","showAxis":true},"applyConditionalFormatting":true},"type":"chart"},"chart_15":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"dual","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"vbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","step":"Payouts__Adjustments_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"chart_14":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":16,"subtitleFontSize":11,"label":"Top Earning Products","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","step":"Earnings_by_Products_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"chart_13":{"parameters":{"autoFitMode":"keepLabels","centerText":"","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"showMeasureTitle":false,"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"pie","exploreLink":true,"title":{"fontSize":16,"subtitleFontSize":11,"label":"Payments by Status","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"inner":80,"columnMap":{"trellis":[],"dimension":["Status"],"plots":["Payment Amount"]},"showActionMenu":true,"centerValueType":"number","measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","step":"Payments_by_status_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"chart_12":{"parameters":{"autoFitMode":"keepLabels","showDimensionTitle":true,"bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"sankey","exploreLink":true,"title":{"fontSize":16,"subtitleFontSize":11,"label":"Payouts and Payments","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnProperties":{},"columnMap":{"dimensionAxis":["Payment","Earning"],"plots":["Earnings"]},"showActionMenu":true,"showAbsoluteValues":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"showTotal":true,"valueType":"compactNumber","theme":"wave","step":"Name_MemberPayout_Na_2","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"chart_11":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","step":"Products_by_Order_Me_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"chart_10":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","step":"Pricing_by_products_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"Products","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"text_39":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Quantity"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_36":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Measure Type"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_35":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_38":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Qualification criteria"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_37":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Revenue"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_32":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"16px"},"insert":"What's Next ?"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_31":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_34":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_33":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_30":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_23":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-bar","timeAxis":{"showTitle":false,"showAxis":true,"title":""},"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","step":"Orders_Trend_1","dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"chart_21":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"Tiers and Benefits","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","step":"Tiers_2","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"},"text_29":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Payment Amount"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"listselector_3":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":true,"step":"RebateType_Name_1","title":"Rebate Type"},"type":"listselector"},"text_28":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Payments"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"listselector_2":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":true,"step":"RebateProgram_Name_3","title":"Rebate Program"},"type":"listselector"},"listselector_5":{"parameters":{"compact":false,"displayMode":"filter","displayTemplate":"[Product Name]","exploreLink":false,"filterStyle":{"titleColor":"rgb(84, 105, 141)","valueColor":"#16325C"},"instant":true,"measureField":"none","showActionMenu":true,"step":"Product_List","title":"Product"},"type":"listselector"},"listselector_4":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":true,"step":"RebateType_Name_2","title":"Rebate Type"},"type":"listselector"},"text_25":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Calculated Earnings"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_24":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Payouts Under Review"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_27":{"parameters":{"content":{"richTextContent":[{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_26":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"16px"},"insert":"Rebate Program : {{coalesce(cell(MemberPayout_PayoutP_2.selection, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\"), cell(MemberPayout_PayoutP_2.result, 0, \"MemberPayout.PayoutPeriods.RebateProgram.Name\")).asString()}}"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_21":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"16px"},"insert":"How are my current orders when compared to previous year ?"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_20":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"16px"},"insert":"Products"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_23":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"14px"},"insert":"Adjusted Earnings"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_22":{"parameters":{"content":{"richTextContent":[{"attributes":{"color":"#091a3e","size":"16px"},"insert":"Order Details"},{"attributes":{"align":"left"},"insert":"\n"}]},"interactions":[],"showActionMenu":false},"type":"text"},"listselector_1":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#C6D3E1","valueColor":"#FFFFFF"},"instant":true,"measureField":"count","showActionMenu":true,"step":"MemberPayout_PayoutP_2","title":"Rebate Program"},"type":"listselector"}}}