{"dataSourceLinksInfo":{"enableAutomaticLinking":false,"excludeRelationships":[],"links":[]},"filters":[],"gridLayouts":[{"maxWidth":550,"name":"Default","numColumns":50,"pages":[{"label":"Untitled","name":"4fa6864c-bd35-466d-81ae-7510600d12f2","navigationHidden":false,"widgets":[{"colspan":23,"column":26,"name":"listselector_3","row":11,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":8,"borderWidth":4}},{"colspan":49,"column":0,"name":"chart_11","row":31,"rowspan":14,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_1","row":19,"rowspan":8,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":8,"borderWidth":8}},{"colspan":48,"column":1,"name":"listselector_1","row":6,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":8,"borderWidth":4}},{"colspan":24,"column":1,"name":"listselector_2","row":11,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":8,"borderWidth":4}},{"colspan":50,"column":0,"name":"container_2","row":4,"rowspan":13,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":0,"name":"text_1","row":29,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":12,"column":36,"name":"text_2","row":20,"rowspan":2,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":12,"column":36,"name":"number_1","row":22,"rowspan":2,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":26,"name":"text_3","row":20,"rowspan":2,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":26,"name":"text_4","row":22,"rowspan":2,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":24,"column":2,"name":"text_5","row":20,"rowspan":2,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":23,"column":3,"name":"text_6","row":22,"rowspan":2,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":5,"name":"text_7","row":0,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":23,"column":3,"name":"chart_3","row":24,"rowspan":3,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":2,"name":"image_1","row":0,"rowspan":4,"widgetStyle":{"borderEdges":[]}}]}],"rowHeight":"fine","selectors":[],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"#FFFFFF","cellSpacingX":0,"cellSpacingY":0,"fit":"original","gutterColor":"#C5D3E0"},"version":1.0}],"layouts":[],"steps":{"RebateType_Name_1":{"broadcastFacet":true,"groups":[],"label":"RebateType_Name_1","numbers":[],"query":"q = load \"ProgramRebateTypeBenefitMaster\";\nq = filter q by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nq = filter q by 'RebateType.RebateProgram.Name' == \"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\";\nq = group q by 'RebateType.Name';\nq = foreach q generate 'RebateType.Name' as 'RebateType.Name', count() as 'count';\nq = order q by 'RebateType.Name' asc;\nq = limit q 2000;","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","start":"[\"HighPowerJetSales\"]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Payouts_TD":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\r\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nall_payout_sources = filter all_payout_sources by 'MemberPayout.Status' != \"Rejected\";\r\nall_payout_sources = filter all_payout_sources by {{cell(Account_Name_1.selection, 0, \"Account.Name\").asEquality(\"MemberPayout.Member.Account.Name\")}};\r\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000;\r\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000;\r\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 as 'Start',\r\n'MemberPayout.Status' as 'MemberPayout.Status' ,(case when 'MemberPayout.Status' == \"Approved\" then 'DailyFinalRebateAmount' else 0 end) as 'DailyFinalRebateAmount_Approved', (case when 'MemberPayout.Status' == \"Interim\" || 'MemberPayout.Status' == \"Pending\" || 'MemberPayout.Status' == \"SystemCalculated\"  then 'DailyFinalRebateAmount' else 0 end ) as 'DailyFinalRebateAmount_UnderReview',\r\n {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount',\r\n\r\n case when ('MemberPayout.Status' == \"Approved\") && ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.Status' == \"Approved\") && ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.Status' == \"Approved\") && ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.Status' == \"Approved\") && ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.Status' == \"Approved\") && ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else (case when 'MemberPayout.Status' == \"Approved\" then 'FinalRebateAmount' else 0 end)   end as 'Approved TD_Current',\r\n\r\n case when ('MemberPayout.Status' == \"Interim\" || 'MemberPayout.Status' == \"Pending\" || 'MemberPayout.Status' == \"SystemCalculated\") &&('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.Status' == \"Interim\" || 'MemberPayout.Status' == \"Pending\" || 'MemberPayout.Status' == \"SystemCalculated\") && ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.Status' == \"Interim\" || 'MemberPayout.Status' == \"Pending\" || 'MemberPayout.Status' == \"SystemCalculated\") && ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.Status' == \"Interim\" || 'MemberPayout.Status' == \"Pending\" || 'MemberPayout.Status' == \"SystemCalculated\") && ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.Status' == \"Interim\" || 'MemberPayout.Status' == \"Pending\" || 'MemberPayout.Status' == \"SystemCalculated\") && ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else (case when 'MemberPayout.Status' == \"Interim\" || 'MemberPayout.Status' == \"Pending\" || 'MemberPayout.Status' == \"SystemCalculated\" then 'FinalRebateAmount' else 0 end)  end as 'Under Review_Current',\r\n \r\n \r\n case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount',\r\n \r\n \r\n case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyRebateAmount' else 'RebateAmount' end as 'RebateBeforeAdjustment', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity', 'DailyRebateAmount' as 'DailyRebateAmount';\r\nEnd_Current = foreach current_valid_payout_sources generate 'MemberPayout.Status' as 'MemberPayout.Status',(case when 'MemberPayout.Status' == \"Approved\" then 'DailyFinalRebateAmount' else 0 end) as 'DailyFinalRebateAmount_Approved', (case when 'MemberPayout.Status' == \"Interim\" || 'MemberPayout.Status' == \"Pending\" || 'MemberPayout.Status' == \"SystemCalculated\"  then 'DailyFinalRebateAmount' else 0 end ) as 'DailyFinalRebateAmount_UnderReview' ,{{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', \r\n\r\n\r\n\r\ncase when ('MemberPayout.Status' == \"Approved\") && (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.Status' == \"Approved\") && (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'Approved TD_Current',\r\n\r\ncase when ('MemberPayout.Status' == \"Interim\" || 'MemberPayout.Status' == \"Pending\" || 'MemberPayout.Status' == \"SystemCalculated\") && (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.Status' == \"Interim\" || 'MemberPayout.Status' == \"Pending\" || 'MemberPayout.Status' == \"SystemCalculated\") && (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'Under Review_Current',\r\n\r\ncase when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount',\r\ncase when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyRebateAmount' else 0 end as 'RebateBeforeAdjustment', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Current_PayoutPeriod_FIlter.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity', 'DailyRebateAmount' as 'DailyRebateAmount';\r\nDataForFill_Current = union Start_Current, End_Current;\r\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Approved TD_Current' as 'Approved TD_Current','Under Review_Current' as 'Under Review_Current', 'TotalTransactionAmount' as 'TotalTransactionAmount','RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount','DailyFinalRebateAmount_Approved' as 'DailyFinalRebateAmount_Approved' ,'DailyFinalRebateAmount_UnderReview' as 'DailyFinalRebateAmount_UnderReview','DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity', 'DailyRebateAmount' as 'DailyRebateAmount', 'RebateBeforeAdjustment' as 'RebateBeforeAdjustment';\r\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\r\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\r\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Approved TD_Current') as 'Approved TD_Current' ,sum('Under Review_Current') as 'Under Review_Current', sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount',min(first('DailyFinalRebateAmount_Approved'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount_Approved',min(first('DailyFinalRebateAmount_UnderReview'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount_UnderReview', sum('RebateBeforeAdjustment') as 'RebateBeforeAdjustment', min(first('DailyRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity';\r\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\r\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month',\r\n(case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount',\r\n(case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount',\r\n(case when 'RebateBeforeAdjustment' is null then month_days(toDate('Date'))*'DailyRebateAmount' else 'RebateBeforeAdjustment' end) as 'RebateBeforeAdjustment',\r\n(case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity',\r\n(case when 'Approved TD_Current' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount_Approved' else 'Approved TD_Current' end) as 'Approved TD_Current',\r\n(case when 'Under Review_Current' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount_UnderReview' else 'Under Review_Current' end) as 'Under Review_Current';\r\nFilledData_Current = group FilledData_Current by all;\nFilledData_Current = foreach FilledData_Current generate  sum('RebateAmount') as 'sum_RebateAmount',sum('Approved TD_Current') as 'sum_Approved TD_Current',sum('Under Review_Current') as 'sum_Under Review_Current';","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Tiers":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"all_benefit_types = load \"ProgramRebateTypeBenefitMaster\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nall_benefit_types = filter all_benefit_types by 'RebateType.RebateProgram.Name' == \"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.Name' == \"{{cell(RebateType_Name_1.selection, 0, \"RebateType.Name\").asString()}}\";\r\nall_benefit_types = filter all_benefit_types by 'ProductId' == \"{{cell(Product_List.selection, 0, \"ProductID\").asString()}}\";\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', number_to_string('MinimumQualifyingValue',\"#.0#\") as 'MinimumQualifyingValue_str', 'MinimumQualifyingValue', number_to_string('MaximumQualifyingValue',\"#.0#\") as 'MaximumQualifyingValue_str', 'MaximumQualifyingValue', 'BenefitValue', 'RebateType.RebateMeasureType';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MaximumQualifyingValue', case when len('MaximumQualifyingValue_str') > 5 then (number_to_string('MaximumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MaximumQualifyingValue_str' end as 'MaximumQualifyingValue_str', 'MinimumQualifyingValue', case when len('MinimumQualifyingValue_str') > 5 then (number_to_string('MinimumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MinimumQualifyingValue_str' end as 'MinimumQualifyingValue_str', 'BenefitValue', 'RebateType.RebateMeasureType', case when 'RebateType.RebateMeasureType'==\"PercentageOfRevenue\" then \"%\" when 'RebateType.RebateMeasureType'==\"Custom\" then \"no units\" else \"$\" end as 'BenefitUnit';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MinimumQualifyingValue_str'+\" - \"+'MaximumQualifyingValue_str' as 'Tiers', 'BenefitValue', 'BenefitUnit';\r\nresult = foreach all_benefit_types generate 'Id' as 'ProgramRebateTypeBenefitId', first(all_benefit_types.'Tiers') as 'Tiers', first(all_benefit_types.'BenefitUnit') as 'BenefitUnit', case when first(all_benefit_types.'BenefitUnit') == \"%\" then \"%\" else null end as 'BenefitUnit_suffix', case when first(all_benefit_types.'BenefitUnit') == \"$\" then \"$\" else null end as 'BenefitUnit_prefix',\r\ncoalesce(sum(all_benefit_types.'BenefitValue'),0) as 'Benefit Value';\r\nresult = foreach result generate 'Tiers' as 'Tiers',sum('Benefit Value') as 'Benefit Multiplier';","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Current_Tier":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"q = load \"ProgramRebateTypePayoutSourceMaster\";\r\nq = filter q by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nq = filter q by 'MemberPayout.Member.Account.Name'== \"{{cell(Account_Name_1.selection, 0, \"Account.Name\").asString()}}\";\r\nq = filter q by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Current_PayoutPeriod_FIlter.result, 0, \"Max\"),0).asObject()}};\r\nq = filter q by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Current_PayoutPeriod_FIlter.result, 0, \"Min\"),0).asObject()}};\r\nall_payout_sources = filter q by 'MemberPayout.PayoutPeriods.RebateProgram.Name' in [\"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\"];\r\nall_payout_sources = filter all_payout_sources by 'RebateType.Name' in [\"{{cell(RebateType_Name_1.selection, 0, \"RebateType.Name\").asString()}}\"];\r\nall_payout_sources = filter all_payout_sources by 'Product.Name' in [\"{{cell(Product_List.selection, 0, \"Product Name\").asString()}}\"];\r\nall_payout_sources = foreach all_payout_sources generate 'MemberPayout.PayoutPeriods.Name','RebateType.BenefitQualifierField','BenefitQualifierValue', 'RebateTypeBenefit.Id', 'RebateTypeBenefit.Name', number_to_string('RebateTypeBenefit.MinimumQualifyingValue',\"#.0#\") as 'MinimumQualifyingValue_str', 'RebateTypeBenefit.MinimumQualifyingValue', number_to_string('RebateTypeBenefit.MaximumQualifyingValue',\"#.0#\") as 'MaximumQualifyingValue_str', 'RebateTypeBenefit.MaximumQualifyingValue','Product.PriceEntry.UnitPrice';\r\nall_payout_sources = foreach all_payout_sources generate 'MemberPayout.PayoutPeriods.Name', 'RebateTypeBenefit.Id','RebateType.BenefitQualifierField', 'RebateTypeBenefit.Name','BenefitQualifierValue', 'RebateTypeBenefit.MaximumQualifyingValue', case when len('MaximumQualifyingValue_str') > 5 then (number_to_string('RebateTypeBenefit.MaximumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MaximumQualifyingValue_str' end as 'MaximumQualifyingValue_str', 'RebateTypeBenefit.MinimumQualifyingValue', case when len('MinimumQualifyingValue_str') > 5 then (number_to_string('RebateTypeBenefit.MinimumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MinimumQualifyingValue_str' end as 'MinimumQualifyingValue_str', 'Product.PriceEntry.UnitPrice';\r\nall_payout_sources = foreach all_payout_sources generate 'MemberPayout.PayoutPeriods.Name', 'RebateTypeBenefit.Id','RebateType.BenefitQualifierField', 'RebateTypeBenefit.Name', 'MinimumQualifyingValue_str'+\" - \"+'MaximumQualifyingValue_str' as 'Tiers','BenefitQualifierValue', 'Product.PriceEntry.UnitPrice';\r\nresult = group  all_payout_sources by ('MemberPayout.PayoutPeriods.Name', 'RebateTypeBenefit.Id', 'Tiers', 'RebateType.BenefitQualifierField');\r\nresult = foreach result generate 'MemberPayout.PayoutPeriods.Name',coalesce('Tiers',\"-\") as 'Tiers','RebateType.BenefitQualifierField' as 'RebateType.BenefitQualifierField',  sum('BenefitQualifierValue') as 'BenefitQualifierValue', sum('Product.PriceEntry.UnitPrice') as 'UnitPrice';","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Rebate_Program_Filter":{"broadcastFacet":true,"groups":[],"label":"Rebate Program","numbers":[],"query":"RebateProgramMemberMaster4 = load \"RebateProgramMemberMaster\";\nRebateProgramMemberMaster4 = group RebateProgramMemberMaster4 by 'RebateProgram.Name';\nRebateProgramMemberMaster4 = foreach RebateProgramMemberMaster4 generate 'RebateProgram.Name' as 'RebateProgram.Name';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Account_Name_1":{"broadcastFacet":true,"groups":[],"label":"Account_Name_1","numbers":[],"query":"q = load \"RebateProgramMemberMaster\";\nq = group q by 'Account.Name';\nq = foreach q generate 'Account.Name' as 'Account.Name', count() as 'count';\nq = order q by 'Account.Name' asc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"singlerequired","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Progress_To_Next":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"all_benefit_types = load \"ProgramRebateTypeBenefitMaster\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nall_benefit_types = filter all_benefit_types by 'RebateType.RebateProgram.Name' == \"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\";\r\nall_benefit_types = filter all_benefit_types by 'RebateType.Name' == \"{{cell(RebateType_Name_1.selection, 0, \"RebateType.Name\").asString()}}\";\r\nall_benefit_types = filter all_benefit_types by 'ProductId' == \"{{cell(Product_List.selection, 0, \"ProductID\").asString()}}\";\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', number_to_string('MinimumQualifyingValue',\"#.0#\") as 'MinimumQualifyingValue_str', 'MinimumQualifyingValue', number_to_string('MaximumQualifyingValue',\"#.0#\") as 'MaximumQualifyingValue_str', 'MaximumQualifyingValue', 'BenefitValue', 'RebateType.RebateMeasureType','RebateType.BenefitQualifierField';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MaximumQualifyingValue', case when len('MaximumQualifyingValue_str') > 5 then (number_to_string('MaximumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MaximumQualifyingValue_str' end as 'MaximumQualifyingValue_str', 'MinimumQualifyingValue', case when len('MinimumQualifyingValue_str') > 5 then (number_to_string('MinimumQualifyingValue'/1000,\"#.0#\")+\"K\") else 'MinimumQualifyingValue_str' end as 'MinimumQualifyingValue_str', 'BenefitValue', 'RebateType.RebateMeasureType', case when 'RebateType.RebateMeasureType'==\"PercentageOfRevenue\" then \"%\" when 'RebateType.RebateMeasureType'==\"Custom\" then \"no units\" else \"$\" end as 'BenefitUnit','RebateType.BenefitQualifierField';\r\nall_benefit_types = foreach all_benefit_types generate 'Id' as 'Id', 'Name' as 'Name', 'MinimumQualifyingValue_str'+\" - \"+'MaximumQualifyingValue_str' as 'Tiers','RebateType.BenefitQualifierField', 'BenefitValue', 'BenefitUnit','MinimumQualifyingValue','MaximumQualifyingValue';\r\nall_benefit_types = filter all_benefit_types by 'Tiers' != \"{{cell(Current_Tier.result, 0, \"Tiers\").asString()}}\";\r\nresult = foreach all_benefit_types generate 'Id' as 'ProgramRebateTypeBenefitId', first(all_benefit_types.'Tiers') as 'Tiers','RebateType.BenefitQualifierField', 'MinimumQualifyingValue','MaximumQualifyingValue',first(all_benefit_types.'BenefitUnit') as 'BenefitUnit', case when first(all_benefit_types.'BenefitUnit') == \"%\" then \"%\" else null end as 'BenefitUnit_suffix', case when first(all_benefit_types.'BenefitUnit') == \"$\" then \"$\" else null end as 'BenefitUnit_prefix',\r\ncoalesce(sum(all_benefit_types.'BenefitValue'),0) as 'Benefit Value';\r\nresult = foreach result generate 'Tiers' as 'Tiers','RebateType.BenefitQualifierField','MinimumQualifyingValue','MaximumQualifyingValue', {{coalesce(cell(Current_Tier.result, 0, \"BenefitQualifierValue\"),0).asObject()}} as 'Current_Benifit_Qualifier','MinimumQualifyingValue' - {{coalesce(cell(Current_Tier.result, 0, \"BenefitQualifierValue\"),0).asObject()}} as 'Min_Current_DIfference';\r\nresult = group result by 'Tiers';\r\nresult = foreach result generate 'Tiers' as 'Tiers',first('RebateType.BenefitQualifierField') as 'RebateType.BenefitQualifierField', sum('MinimumQualifyingValue') as 'MinimumQualifyingValue' ,sum('MaximumQualifyingValue') as 'MaximumQualifyingValue',sum('Current_Benifit_Qualifier') as 'Current_Benifit_Qualifier', case when sum(sum('Current_Benifit_Qualifier')) over ([..] partition by all) == 0 then min(sum('MinimumQualifyingValue')) over ([..] partition by all) else  sum('MinimumQualifyingValue') - sum('Current_Benifit_Qualifier') end as 'Min_Current_DIfference';\r\nresult = group result by 'Tiers';\r\nresult = foreach result generate 'Tiers' as 'Tiers',first('RebateType.BenefitQualifierField') as 'RebateType.BenefitQualifierField', sum('MinimumQualifyingValue') as 'MinimumQualifyingValue' ,sum('MaximumQualifyingValue') as 'MaximumQualifyingValue',sum('Current_Benifit_Qualifier') as 'Current_Benifit_Qualifier', case when sum('Current_Benifit_Qualifier') > sum('Min_Current_DIfference') then 0 else  sum('MinimumQualifyingValue') - sum('Current_Benifit_Qualifier') end as 'Min_Current_DIfference';\r\nresult = filter result by 'Min_Current_DIfference' > 0;\r\nresult = group result by 'Tiers';\r\nresult = foreach result generate 'Tiers' as 'Tiers', first('RebateType.BenefitQualifierField') as 'RebateType.BenefitQualifierField',sum('MinimumQualifyingValue') as 'MinimumQualifyingValue' ,sum('MaximumQualifyingValue') as 'MaximumQualifyingValue',sum('Current_Benifit_Qualifier') as 'Current_Benifit_Qualifier', case when first('RebateType.BenefitQualifierField') == \"TotalTransactionAmount\" then sum('Min_Current_DIfference')/{{coalesce(cell(Current_Tier.result, 0, \"UnitPrice\"),1).asObject()}} else sum('Min_Current_DIfference') end as 'Progress_To_Next_Tier', min( sum('Min_Current_DIfference')) over([..] partition by all)  as 'Min';\r\nresult = filter result by 'Progress_To_Next_Tier' == 'Min' ;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"RebateProgram_Name_3":{"broadcastFacet":true,"groups":[],"label":"RebateProgram_Name_3","numbers":[],"query":"RebateProgramMemberMaster4 = load \"RebateProgramMemberMaster\";\nProgramRebateTypeMaster4 = load \"ProgramRebateTypeMaster\";\nProgramRebateTypeMaster4 = filter ProgramRebateTypeMaster4 by 'CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];ProgramRebateTypeMaster4 = group ProgramRebateTypeMaster4 by ('RebateProgram.Name', 'InclusionFilters.ValuesMultiValue');\nRebateProgramMemberMaster4 = filter RebateProgramMemberMaster4 by 'Account.Name' == \"{{cell(Account_Name_1.selection, 0, \"Account.Name\").asString()}}\";\nresult = cogroup RebateProgramMemberMaster4 by 'RebateProgram.Name' left, ProgramRebateTypeMaster4  by 'RebateProgram.Name';\nresult = foreach result generate RebateProgramMemberMaster4.'RebateProgram.Name' as 'Program Name', ProgramRebateTypeMaster4.'InclusionFilters.ValuesMultiValue' as 'ProductID';\nresult = filter result by'ProductID' == \"{{cell(Product_List.selection, 0, \"ProductID\").asString()}}\";\nresult = foreach result generate 'Program Name'as 'Program Name';","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"singlerequired","start":"[\"Incentives on Jet Engine Sales\"]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"UniqueProds_inOrders_1":{"broadcastFacet":true,"groups":[],"label":"UniqueProds_inOrders_perAccount","numbers":[],"query":"OrderMaster4 = load \"OrderMaster\";\nOrderMaster4 = group OrderMaster4 by all;\nOrderMaster4 = foreach OrderMaster4 generate coalesce(unique('Product2Id'),0) as 'Order_Product_Count';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Product_List":{"broadcastFacet":true,"groups":[],"label":"Product_List","numbers":[],"query":"ProductMaster4 = load \"ProductMaster\";\r\nOrderMaster4 = load \"OrderMaster\";\r\nOrderMaster4 = filter OrderMaster4 by 'Account.Name' == \"{{cell(Account_Name_1.selection, 0, \"Account.Name\").asString()}}\";\r\nresult = cogroup ProductMaster4 by 'Id' full, OrderMaster4 by 'Product2Id';\r\nresult = foreach result generate first(OrderMaster4.'Product.Name') as 'Product Name',first(ProductMaster4.'Name') as 'Name',OrderMaster4.'Product2Id' as 'Product Id', ProductMaster4.'Id' as 'Id' ;\r\n\r\nresult = foreach result generate (case when {{coalesce(cell(UniqueProds_inOrders_1.result, 0, \"Order_Product_Count\"),0).asObject()}} == 0 then 'Name' else  'Product Name' end) as 'Product Name',(case when {{coalesce(cell(UniqueProds_inOrders_1.result, 0, \"Order_Product_Count\"),0).asObject()}} == 0 then 'Id' else  'Product Id' end) as 'ProductID';\r\nresult = filter result by 'Product Name' is not null;","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"singlerequired","start":"[\"01tB0000000j20aIAA\"]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"lens_1":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"q = load \"ProgramRebateTypeBenefitMaster\";\nq = filter q by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nq = foreach q generate {{coalesce(cell(Current_Tier.result, 0, \"BenefitQualifierValue\"),0).asObject()}} as 'Benefit Qualifier';","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"showActionMenu":true,"min":0,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Current_PayoutPeriod_FIlter":{"broadcastFacet":true,"groups":[],"label":"Current_PayoutPeriod_FIlter","numbers":[],"query":"q = load \"RebatePayoutPeriodMaster\";\nq = filter q by 'RebateProgram.Name' == \"{{cell(RebateProgram_Name_3.selection, 0, \"Program Name\").asString()}}\";\nq = group q by ('RebateProgram.Name','StartDate_Year', 'StartDate_Month', 'StartDate_Day', 'EndDate_Year', 'EndDate_Month', 'EndDate_Day');\nq = foreach q generate 'RebateProgram.Name','StartDate_Year' + \"~~~\" + 'StartDate_Month' + \"~~~\" + 'StartDate_Day' as 'StartDate_Year~~~StartDate_Month~~~StartDate_Day', 'EndDate_Year' + \"~~~\" + 'EndDate_Month' + \"~~~\" + 'EndDate_Day' as 'EndDate_Year~~~EndDate_Month~~~EndDate_Day',case when date_to_epoch(now()) >= first('StartDate_sec_epoch') && date_to_epoch(now()) <= first('EndDate_sec_epoch') then \"True\" else \"False\" end as 'CurrentPayoutPeriod', min('StartDate_sec_epoch')*1000 as 'Min', (max('EndDate_sec_epoch')+86399)*1000  as 'Max';\nq = filter q by 'CurrentPayoutPeriod' == \"True\";","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}}},"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1},"widgets":{"listselector_3":{"parameters":{"compact":false,"displayMode":"filter","displayTemplate":"[RebateType.Name]","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":true,"step":"RebateType_Name_1","title":"Rebate Type"},"type":"listselector"},"listselector_2":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":true,"step":"RebateProgram_Name_3","title":"Rebate Program"},"type":"listselector"},"text_1":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":"Tiers & Benefits"}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_1":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_2":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"number_1":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"sum_Approved TD_Current","noResultsLabel":"0","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"Payouts_TD","textAlignment":"center","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_3":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"center"},"insert":"Current Tier"}]},"interactions":[],"showActionMenu":true},"type":"text"},"image_1":{"parameters":{"alignmentX":"center","alignmentY":"center","fit":"fitwidth","image":{"name":"Artboard2xpng47","namespace":""},"interactions":[]},"type":"image"},"text_2":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"center"},"insert":"Payouts to Date"}]},"interactions":[],"showActionMenu":true},"type":"text"},"listselector_1":{"parameters":{"compact":false,"displayMode":"filter","displayTemplate":"[Product Name]","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"showActionMenu":true,"step":"Product_List","title":"Product"},"type":"listselector"},"text_5":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"center"},"insert":"Purchases Required for Tier Upgrade"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_4":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"{{coalesce(cell(Current_Tier.result, 0, \"Tiers\"),\"NA\").asString()}}"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_7":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":"Incentives"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_6":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#091A3E","align":"center"},"insert":"{{coalesce(cell(Progress_To_Next.result, 0, \"Progress_To_Next_Tier\"),0).asString()}} Units"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_11":{"parameters":{"autoFitMode":"none","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"light","step":"Tiers","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"chart_3":{"parameters":{"max":"{{cell(Progress_To_Next.result, 0, \"MinimumQualifyingValue\").asObject()}}","legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"bluegrassLight","step":"lens_1","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}}}