{"dataSourceLinksInfo":{"enableAutomaticLinking":false,"excludeRelationships":[],"links":[{"fields":[{"dataSourceName":"MFG_Targets_AccountProductPeriodForecast","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.UniqueAccountName"},{"dataSourceName":"MFG_TargetActuals","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.UniqueAccountName"},{"dataSourceName":"MFG_AccountManagerPeriodicTargetDistribution","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"AcctMgrTargetDstr.Account.UniqueAccountName"},{"dataSourceName":"MFG_Target_Accounts","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"UniqueAccountName"}],"label":"Account Name - Targets-Forecast-Actuals-Account","name":"Link_2148"},{"fields":[{"dataSourceName":"MFG_AccountManagerPeriodicTargetDistribution","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"AcctMgrTarget.Parent.AcctMgrTargetDstr.Product.Name"},{"dataSourceName":"MFG_TargetActuals","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Product.Name"},{"dataSourceName":"MFG_Targets_AccountProductPeriodForecast","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"AccountProductForecast.Name"}],"label":"Product Name - Target-Actuals-Forecast","name":"Link_2033"},{"fields":[{"dataSourceName":"MFG_Users","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Id"},{"dataSourceName":"MFG_AccountManagerPeriodicTargetDistribution","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"AssignedTo.Id"},{"dataSourceName":"MFG_Targets_AccountProductPeriodForecast","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"TargetsAccount.Owner.Managers"},{"dataSourceName":"MFG_TargetActuals","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"TargetActualsOwner.Managers"},{"dataSourceName":"MFG_Target_Accounts","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"TargetsOwner.Managers"}],"label":"Logged In User - Users-Targets-Forecast-Actuals","name":"Link_1414"}]},"filters":[{"dataset":{"name":"MFG_AccountManagerPeriodicTargetDistribution"},"dependent":true,"fields":["AcctMgrTarget.MeasureType"],"locked":false,"operator":"in","value":"[\"Currency\"]"}],"gridLayouts":[{"maxWidth":1500,"name":"Default","numColumns":50,"pages":[{"label":"Overview","name":"96fb1d7e-ae0d-4b51-bd1b-46fee7880e63","navigationHidden":false,"widgets":[{"colspan":10,"column":0,"name":"container_3","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_2","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":3,"name":"text_1","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":40,"column":10,"name":"container_1","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":48,"column":1,"name":"container_13","row":39,"rowspan":73,"widgetStyle":{"backgroundColor":"rgb(255, 255, 255)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":1,"name":"listselector_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":8,"column":10,"name":"listselector_2","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_1","row":17,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_2","row":25,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":26,"name":"number_3","row":19,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_2","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_3","row":29,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":26,"name":"text_5","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":18,"column":6,"name":"chart_1","row":13,"rowspan":19,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":25,"name":"text_6","row":17,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#7D98B3","borderEdges":["left"],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"container_4","row":34,"rowspan":78,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"container_7","row":34,"rowspan":78,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"navigation_1","row":35,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":17,"column":32,"name":"chart_3","row":9,"rowspan":22,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":43,"name":"pillbox_1","row":40,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":3,"column":40,"name":"text_7","row":40,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":46,"column":2,"name":"chart_2","row":44,"rowspan":32,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":34,"name":"pillbox_2","row":40,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":30,"name":"text_8","row":40,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":8,"name":"link_1","row":40,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":16,"name":"link_2","row":40,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(198, 211, 224)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":19,"name":"listselector_3","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":23,"column":2,"name":"chart_4","row":81,"rowspan":30,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":27,"name":"table_10","row":84,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":27,"name":"text_9","row":78,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":21,"column":27,"name":"table_6","row":99,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_8","row":112,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":27,"name":"text_10","row":97,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":27,"name":"text_11","row":82,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":41,"name":"text_24","row":4,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":48,"column":1,"name":"text_25","row":34,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":3,"name":"text_4","row":40,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":46,"column":2,"name":"text_32","row":77,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":20,"column":3,"name":"text_33","row":78,"rowspan":3,"widgetStyle":{"borderEdges":[]}}]},{"label":"Overview - Over Time","name":"c0dee536-d646-423b-b2ab-986e9a4672ee","navigationHidden":true,"widgets":[{"colspan":10,"column":0,"name":"container_3","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_2","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":3,"name":"text_1","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":40,"column":10,"name":"container_1","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":19,"name":"listselector_3","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":8,"column":1,"name":"listselector_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":8,"column":10,"name":"listselector_2","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":17,"column":32,"name":"chart_3","row":9,"rowspan":22,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"container_4","row":34,"rowspan":78,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_13","row":39,"rowspan":73,"widgetStyle":{"backgroundColor":"rgb(255, 255, 255)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"navigation_1","row":35,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":43,"name":"pillbox_1","row":40,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":3,"column":40,"name":"text_7","row":40,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":34,"name":"pillbox_2","row":40,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":30,"name":"text_8","row":40,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"container_7","row":34,"rowspan":78,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_8","row":112,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_6","row":44,"rowspan":32,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":16,"name":"link_3","row":40,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":8,"name":"link_4","row":40,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(198, 211, 224)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":41,"name":"text_24","row":4,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":48,"column":1,"name":"text_25","row":34,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":3,"name":"text_4","row":40,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":46,"column":2,"name":"text_32","row":77,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":20,"column":3,"name":"text_33","row":78,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":23,"column":2,"name":"chart_4","row":81,"rowspan":30,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":27,"name":"table_10","row":84,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":27,"name":"text_11","row":82,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":21,"column":27,"name":"text_9","row":78,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":21,"column":27,"name":"table_6","row":99,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":27,"name":"text_10","row":97,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_1","row":17,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_2","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_2","row":25,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_3","row":29,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":18,"column":6,"name":"chart_1","row":13,"rowspan":19,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":25,"name":"text_6","row":17,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#7D98B3","borderEdges":["left"],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":26,"name":"number_3","row":19,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":26,"name":"text_5","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}}]},{"label":"Accounts","name":"d958f6e8-eb02-468f-87e9-84563865def4","navigationHidden":false,"widgets":[{"colspan":10,"column":0,"name":"container_3","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_2","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":3,"name":"text_1","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":40,"column":10,"name":"container_1","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":19,"name":"listselector_3","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":8,"column":1,"name":"listselector_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":8,"column":10,"name":"listselector_2","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":17,"column":32,"name":"chart_3","row":9,"rowspan":22,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"container_4","row":34,"rowspan":122,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_13","row":39,"rowspan":117,"widgetStyle":{"backgroundColor":"rgb(255, 255, 255)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"navigation_1","row":35,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"container_7","row":34,"rowspan":122,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_8","row":156,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":5,"name":"pillbox_4","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(255, 255, 255)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_7","row":46,"rowspan":29,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":11,"name":"link_5","row":77,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(198, 211, 224)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":3,"name":"link_6","row":77,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"rgb(0, 112, 210)","borderEdges":[],"borderRadius":0,"borderWidth":2}},{"colspan":16,"column":32,"name":"chart_8","row":120,"rowspan":35,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_11","row":81,"rowspan":32,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":32,"name":"text_12","row":115,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":39,"name":"pillbox_3","row":116,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["right"],"borderRadius":0,"borderWidth":2}},{"colspan":46,"column":2,"name":"text_15","row":76,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"text_16","row":45,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":28,"column":2,"name":"chart_10","row":119,"rowspan":36,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":29,"column":2,"name":"text_20","row":115,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":2,"name":"text_22","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":41,"name":"text_24","row":4,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":18,"name":"listselector_6","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":5,"column":24,"name":"listselector_7","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":5,"column":30,"name":"listselector_8","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":5,"column":36,"name":"listselector_9","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":5,"column":42,"name":"listselector_10","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":48,"column":1,"name":"text_25","row":34,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"text_31","row":114,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_1","row":17,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_2","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_2","row":25,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_3","row":29,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":18,"column":6,"name":"chart_1","row":13,"rowspan":19,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":25,"name":"text_6","row":17,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#7D98B3","borderEdges":["left"],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":26,"name":"number_3","row":19,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":26,"name":"text_5","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}}]},{"label":"Accounts - Over Time","name":"4f00f7b0-9462-42dc-b4f9-9cda24f3a7fb","navigationHidden":true,"widgets":[{"colspan":10,"column":0,"name":"container_3","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_2","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":3,"name":"text_1","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":40,"column":10,"name":"container_1","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":19,"name":"listselector_3","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":8,"column":1,"name":"listselector_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":8,"column":10,"name":"listselector_2","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":17,"column":32,"name":"chart_3","row":9,"rowspan":22,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"container_4","row":34,"rowspan":122,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_13","row":39,"rowspan":117,"widgetStyle":{"backgroundColor":"rgb(255, 255, 255)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"navigation_1","row":35,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"container_7","row":34,"rowspan":122,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_8","row":156,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":5,"name":"pillbox_4","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(255, 255, 255)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_7","row":46,"rowspan":29,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":32,"name":"chart_8","row":120,"rowspan":35,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":32,"name":"text_12","row":115,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":39,"name":"pillbox_3","row":116,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["right"],"borderRadius":0,"borderWidth":2}},{"colspan":46,"column":2,"name":"text_15","row":76,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"text_16","row":114,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":28,"column":2,"name":"chart_10","row":119,"rowspan":36,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":29,"column":2,"name":"text_20","row":115,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":11,"name":"link_7","row":77,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"rgb(0, 112, 210)","borderEdges":[],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":3,"name":"link_8","row":77,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(198, 211, 224)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_12","row":81,"rowspan":32,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":2,"name":"text_22","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":41,"name":"text_24","row":4,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":18,"name":"listselector_6","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":5,"column":24,"name":"listselector_7","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":5,"column":30,"name":"listselector_8","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":5,"column":36,"name":"listselector_9","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":5,"column":42,"name":"listselector_10","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":48,"column":1,"name":"text_25","row":34,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"text_30","row":45,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_1","row":17,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_2","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_2","row":25,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_3","row":29,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":18,"column":6,"name":"chart_1","row":13,"rowspan":19,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":25,"name":"text_6","row":17,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#7D98B3","borderEdges":["left"],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":26,"name":"number_3","row":19,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":26,"name":"text_5","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}}]},{"label":"Products","name":"38689fed-7c12-4666-a08a-df870974b3f7","navigationHidden":false,"widgets":[{"colspan":10,"column":0,"name":"container_3","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_2","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":3,"name":"text_1","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":40,"column":10,"name":"container_1","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":19,"name":"listselector_3","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":8,"column":1,"name":"listselector_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":8,"column":10,"name":"listselector_2","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":17,"column":32,"name":"chart_3","row":9,"rowspan":22,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"container_4","row":34,"rowspan":79,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_13","row":39,"rowspan":74,"widgetStyle":{"backgroundColor":"rgb(255, 255, 255)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"navigation_1","row":35,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"text_15","row":75,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"container_7","row":34,"rowspan":79,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_8","row":113,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":5,"name":"pillbox_5","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_14","row":46,"rowspan":28,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":3,"name":"link_9","row":76,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"rgb(0, 112, 210)","borderEdges":[],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":11,"name":"link_10","row":76,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(198, 211, 224)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_9","row":80,"rowspan":32,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":2,"name":"text_21","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":41,"name":"text_24","row":4,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":10,"column":23,"name":"pillbox_6","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":35,"name":"listselector_4","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":6,"column":42,"name":"listselector_5","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":48,"column":1,"name":"text_25","row":34,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":17,"name":"text_27","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"text_29","row":45,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_1","row":17,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_2","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_2","row":25,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_3","row":29,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":18,"column":6,"name":"chart_1","row":13,"rowspan":19,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":25,"name":"text_6","row":17,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#7D98B3","borderEdges":["left"],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":26,"name":"number_3","row":19,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":26,"name":"text_5","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}}]},{"label":"Products - Over Time","name":"e8582d73-ddb9-4a8c-af09-ae0bcd9d4e6b","navigationHidden":true,"widgets":[{"colspan":10,"column":0,"name":"container_3","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_2","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":3,"name":"text_1","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":40,"column":10,"name":"container_1","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":19,"name":"listselector_3","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":8,"column":1,"name":"listselector_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":8,"column":10,"name":"listselector_2","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"rgb(22, 50, 92)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":17,"column":32,"name":"chart_3","row":9,"rowspan":22,"widgetStyle":{"backgroundColor":"rgb(22, 50, 92)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"container_4","row":34,"rowspan":79,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_13","row":39,"rowspan":74,"widgetStyle":{"backgroundColor":"rgb(255, 255, 255)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"navigation_1","row":35,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"text_15","row":75,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":49,"name":"container_7","row":34,"rowspan":79,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_8","row":113,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":5,"name":"pillbox_5","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_14","row":46,"rowspan":28,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":11,"name":"link_11","row":76,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"rgb(0, 112, 210)","borderEdges":[],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":3,"name":"link_12","row":76,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(198, 211, 224)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"chart_15","row":80,"rowspan":32,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":2,"name":"text_21","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":41,"name":"text_24","row":4,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":10,"column":23,"name":"pillbox_6","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":42,"name":"listselector_5","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":6,"column":35,"name":"listselector_4","row":40,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":48,"column":1,"name":"text_25","row":34,"rowspan":1,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":17,"name":"text_27","row":41,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":2,"name":"text_28","row":45,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C6D3E1","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_1","row":17,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_2","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":1,"name":"number_2","row":25,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":0,"name":"text_3","row":29,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":18,"column":6,"name":"chart_1","row":13,"rowspan":19,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":25,"name":"text_6","row":17,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#7D98B3","borderEdges":["left"],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":26,"name":"number_3","row":19,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":26,"name":"text_5","row":23,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}}]}],"rowHeight":"fine","selectors":[],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"rgb(4, 29, 64)","cellSpacingX":0,"cellSpacingY":0,"fit":"original","gutterColor":"#C5D3E0"},"version":1.0}],"layouts":[],"steps":{"Cumulative_Accounts__1":{"broadcastFacet":false,"groups":[],"label":"Cumulative Accounts Line Chart","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is not null && 'AcctMgrTargetDstr.ProductId' is not null;\ntargets = filter targets by {{column(Products_Analysis_1.result, [\"AcctMgrTargetDstr.Product.Name\"]).asEquality('AcctMgrTargetDstr.Product.Name')}};\n\ntargets_m1 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', 'Period.StartDate' as 'Period'  ;\ntargets_m2 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null \nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m3 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m4 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m5 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m6 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m7 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m8 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m9 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m10 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m11 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m12 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nend) as 'Period' ;\n\n\n\n\ntargets = union targets_m1, targets_m2, targets_m3, targets_m4, targets_m5, targets_m6, targets_m7, targets_m8, targets_m9, targets_m10, targets_m11, targets_m12 ;\ntargets = filter targets by 'Period' is not null ;\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\" ;\ntarget_actuals = filter target_actuals by {{column(Products_Analysis_1.result, [\"AcctMgrTargetDstr.Product.Name\"]).asEquality('Product.Name')}};\ntarget_actuals = group target_actuals by ('Product.Name', 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month') ;\ntarget_actuals = foreach target_actuals generate 'Product.Name', 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice', sum('Quantity') as 'sum_Quantity' ;\n\ntarget_attainment_1 = cogroup targets by ('AcctMgrTargetDstr.Product.Name', 'Period') left, target_actuals by ('Product.Name', 'Period') ;\ntarget_attainment_1 = foreach target_attainment_1 generate targets.'AcctMgrTargetDstr.Product.Name' as 'AcctMgrTargetDstr.Product.Name', toDate(coalesce(targets.'Period', target_actuals.'Period'), \"yyyy-MM-dd\") as 'Period', sum(target_actuals.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Actuals_Column\").asObject()}}') as 'Target_Actuals', sum(targets.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Value_Column\").asObject()}}') as 'Target_Value' ;\ntarget_attainment = group target_attainment_1 by ('Period') ;\ntarget_attainment = foreach target_attainment generate 'Period', toString(Period, \"yyyy\")+\"~~~\"+toString(Period, \"MM\") as 'Period.StartDate_Year~~~Period.StartDate_Month', toString(Period, \"yyyy\") as 'Period.StartDate_Year', toString(Period, \"MM\") as 'Period.StartDate_Month', sum('Target_Actuals') as 'Target_Actuals', sum('Target_Value') as 'Target_Value', sum('Target_Actuals')/sum('Target_Value') as 'Target_Attainment_Percentage' , (case when sum('Target_Actuals') is null then null else sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc) end)/sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Attainment_Percentage', sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Actuals', sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Value' ;\n\n\n\n\n\n                          forecasts = load \"MFG_Targets_AccountProductPeriodForecast\";\n\nforecasts = filter forecasts by 'Period.StartDate_sec_epoch' <= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' >= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\nforecasts = filter forecasts by {{column(Products_Analysis_1.result, [\"AcctMgrTargetDstr.Product.Name\"]).asEquality('AccountProductForecast.Name')}};\nforecasts = filter forecasts by {{column(Products_Analysis_1.selection, [\"AcctMgrTargetDstr.Product.Name\"]).asEquality('AccountProductForecast.Name')}};\n\nforecast_start = foreach forecasts generate 'Id' as 'Id', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month', 'ForecastedDailyRevenue' as 'ForecastedDailyRevenue',  'ForecastedDailyQuantity' as 'ForecastedDailyQuantity' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_end = foreach forecasts generate 'Id' as 'Id', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month',  'ForecastedDailyRevenue' as 'ForecastedDailyRevenue',  'ForecastedDailyQuantity' as 'ForecastedDailyQuantity' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_for_fill = union forecast_start, forecast_end;\n forecast_for_fill = group forecast_for_fill by ('Id', 'Date_Year', 'Date_Month');\n forecast_for_fill = foreach forecast_for_fill generate 'Id', 'Date_Year', 'Date_Month', first('ForecastedDailyRevenue') as 'ForecastedDailyRevenue',  first('ForecastedDailyQuantity') as 'ForecastedDailyQuantity', first('StartDate') as 'StartDate', first('EndDate') as 'EndDate';\n Forecast_Filled = fill forecast_for_fill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n Forecast_Filled = group Forecast_Filled by ('Id', 'Date_Year', 'Date_Month');\n Forecast_Filled = foreach Forecast_Filled generate 'Id', 'Date_Year', 'Date_Month', max(first('ForecastedDailyRevenue')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'ForecastedDailyRevenue', max(first('ForecastedDailyQuantity')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'ForecastedDailyQuantity', max(first('StartDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'StartDate', max(first('EndDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'EndDate', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date';\n Forecast_Filled = filter Forecast_Filled by 'Date'>='StartDate' && 'Date'<='EndDate';\n forecasts = foreach Forecast_Filled generate 'Id' as 'Id', 'Date_Year' as 'Period.EndDate_Year', 'Date_Month' as 'Period.EndDate_Month', month_days(toDate('Date'))*'ForecastedDailyRevenue' as 'ForecastedRevenueFinal', month_days(toDate('Date'))*'ForecastedDailyQuantity' as 'ForecastedQuantityFinal';\n forecasts = group forecasts by ('Period.EndDate_Year', 'Period.EndDate_Month');\nforecasts = foreach forecasts generate 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ForecastedRevenueFinal') as 'ForecastAmount', sum(sum('ForecastedRevenueFinal')) over ([..0] partition by all order by 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' asc) as 'ForecastAmount_Cumulative', sum('ForecastedQuantityFinal') as 'ForecastQuantity', sum(sum('ForecastedQuantityFinal')) over ([..0] partition by all order by 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' asc) as 'ForecastQuantity_Cumulative';                                                       \n\n\ntarget_attainment_w_forecasts = cogroup target_attainment by ('Period.StartDate_Year~~~Period.StartDate_Month') left, forecasts by  ('StartDate_Year~~~StartDate_Month');\ntarget_attainment_w_forecasts = foreach target_attainment_w_forecasts generate target_attainment.'Period.StartDate_Year~~~Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', sum(target_attainment.'cumulative_Target_Actuals') as 'cumulative_Target_Actuals', sum(target_attainment.'cumulative_Target_Value') as 'cumulative_Target_Value', sum(forecasts.'{{cell(Qty_vs_Revenue.selection, 0, \"Value_Cumulative\").asObject()}}') as 'ForecastAmount_Cumulative' ;\ntarget_attainment_w_forecasts = foreach target_attainment_w_forecasts generate 'Period.StartDate_Year~~~Period.StartDate_Month', {{cell(Qty_vs_Revenue.selection, 0, \"Products_cumulative_line_chart_generate\").asObject()}};","receiveFacetSource":{"mode":"exclude","steps":["AcctMgrTargetDstr_Ac_1","AcctMgrTargetDstr_Ac_2","AcctMgrTargetDstr_Ac_3","AcctMgrTargetDstr_Ac_4","AcctMgrTarget_Parent_1"]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":false,"predictiveLine":{"color":"#8932ED","label":"TODAY"},"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"label":{"data":"LY Target","type":"static"},"value":{"data":"undefined","type":"static"}}],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":true,"showTitle":true,"showAxis":true,"title":"Revenue","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"}},"Target_Value_and_Tar_1":{"broadcastFacet":false,"groups":[],"label":"Target Value and Target Actuals","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\ntargets = group targets by all;\ntargets = foreach targets generate \"Targets\" as 'Group', sum(targets.'PeriodTargetCurrencyValue') as 'Value';\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals = group target_actuals by all;\ntarget_actuals = foreach target_actuals generate \"Actuals\" as 'Group', sum('TotalPrice') as 'Value';\n\ntarget_value_and_actuals = union targets, target_actuals;\ntarget_value_and_actuals = group target_value_and_actuals by 'Group';\ntarget_value_and_actuals = foreach target_value_and_actuals generate 'Group', sum('Value') as 'sum_Value';\ntarget_value_and_actuals = order target_value_and_actuals by 'Group' desc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":false,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Fiscal_Year_Selection_1":{"broadcastFacet":true,"groups":[],"label":"Fiscal_Year_Selection","numbers":[],"query":"q = load \"MFG_AccountManagerPeriodicTargetDistribution\";\nq = group q by ('AcctMgrTarget.Period.FullyQualifiedLabel', 'AcctMgrTarget.Period.StartDate_Year', 'AcctMgrTarget.Period.StartDate_Month', 'AcctMgrTarget.Period.StartDate_Day', 'AcctMgrTarget.Period.EndDate_Year', 'AcctMgrTarget.Period.EndDate_Month', 'AcctMgrTarget.Period.EndDate_Day');\nq = foreach q generate 'AcctMgrTarget.Period.FullyQualifiedLabel' as 'AcctMgrTarget.Period.FullyQualifiedLabel', 'AcctMgrTarget.Period.StartDate_Year', 'AcctMgrTarget.Period.StartDate_Month', 'AcctMgrTarget.Period.StartDate_Day', 'AcctMgrTarget.Period.EndDate_Year', 'AcctMgrTarget.Period.EndDate_Month', 'AcctMgrTarget.Period.EndDate_Day', count() as 'count';\nq = order q by ('AcctMgrTarget.Period.FullyQualifiedLabel' asc, 'AcctMgrTarget.Period.StartDate_Year','AcctMgrTarget.Period.StartDate_Month','AcctMgrTarget.Period.StartDate_Day', 'AcctMgrTarget.Period.EndDate_Year','AcctMgrTarget.Period.EndDate_Month','AcctMgrTarget.Period.EndDate_Day');\nq = limit q 2000;","receiveFacetSource":{"mode":"include","steps":["AcctMgrTarget_Name_1","TargetPeriodName_1"]},"selectMode":"singlerequired","start":"[[\"FY 2020\",\"2020\",\"04\",\"01\",\"2021\",\"03\",\"31\"]]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"AcctMgrTargetDstr_Ac_2":{"broadcastFacet":true,"datasets":[{"name":"MFG_AccountManagerPeriodicTargetDistribution"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"AcctMgrTargetDstr.Account.Type\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"AcctMgrTargetDstr_Ac_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_AccountManagerPeriodicTargetDistribution"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"AcctMgrTargetDstr.Account.Parent.UniqueAccountName\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"AcctMgrTargetDstr_Ac_4":{"broadcastFacet":true,"datasets":[{"name":"MFG_AccountManagerPeriodicTargetDistribution"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"AcctMgrTargetDstr.Account.BillingCountry\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Forecast_Total":{"broadcastFacet":true,"groups":[],"label":"Forecast Trend","numbers":[],"query":"forecasts = load \"MFG_Targets_AccountProductPeriodForecast\";\nforecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current fiscal_year\"];\nforecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\nforecasts = foreach forecasts generate (case  \nwhen (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current fiscal_year\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current fiscal_year\"]) then 'ForecastedRevenueFinal' \nwhen (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current fiscal_year\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current fiscal_year\"]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Period_dates_filtered.result,0,\"Period_min_sec_epoch\"),0).asObject()}})) ) \nwhen (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current fiscal_year\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate({{coalesce(cell(Period_dates_filtered.result,0,\"Period_max_sec_epoch\"),0).asObject()}}),toDate('Period.EndDate', \"yyyy-MM-dd\")) ) \nwhen (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current fiscal_year\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-'ForecastedDailyRevenue'*( daysBetween(toDate({{coalesce(cell(Period_dates_filtered.result,0,\"Period_max_sec_epoch\"),0).asObject()}}),toDate('Period.EndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Period_dates_filtered.result,0,\"Period_min_sec_epoch\"),0).asObject()}})) )  \nelse 0 end) as 'ForecastedAmount';\nforecasts = group forecasts by all;\nforecasts = foreach forecasts generate sum(forecasts.'ForecastedAmount') as 'ForecastAmount';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Time (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{},"plots":{},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"AcctMgrTargetDstr_Ac_3":{"broadcastFacet":true,"datasets":[{"name":"MFG_AccountManagerPeriodicTargetDistribution"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"AcctMgrTargetDstr.Account.Industry\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Qty_vs_Revenue":{"broadcastFacet":false,"columns":{"Display":{"type":"string"}},"label":"Quantity vs Revenue","selectMode":"singlerequired","start":"{\"Display\":[\"Revenue\"]}","type":"staticflex","values":["{\"Display\":\"Quantity\",\"Value_Cumulative\":\"ForecastQuantity_Cumulative\",\"Value_Monthly\":\"ForecastQuantity\",\"Target_Value_Column\":\"MonthlyTargetValue\",\"Target_Actuals_Column\":\"sum_Quantity\",\"Target_Value_Column2\":\"PeriodTargetValue\",\"Target_Actuals_Column2\":\"Quantity\",\"Products_TY_generate\":\"'Target_Value' as 'Target_Quantity', 'Target_Actuals' as 'Target_Actuals_Quantity', 'Target_Attainment_Percentage', 'Projected_Target_Actuals' as 'Projected_Target_Actuals_Quantity'\",\"Products_PY_generate\":\"'Target_Value' as 'Target_Quantity', 'LY_Target_Value' as 'LY_Target_Quantity', ('Target_Value'-'LY_Target_Value')*100/'LY_Target_Value' as 'Target_Change', 'LY_Target_Actuals' as 'LY_Target_Actuals_Quantity', 'LY_Target_Attainment_Percentage'\",\"Products_cumulative_line_chart_generate\":\"'cumulative_Target_Actuals' as 'cumulative_Target_Actuals_Quantity', 'cumulative_Target_Value' as 'cumulative_Target_Quantity', 'ForecastAmount_Cumulative' as 'ForecastQuantity_Cumulative'\",\"Products_monthly_line_chart_generate\":\"'Target_Actuals' as 'Target_Actuals_Quantity','Target_Value' as 'Target_Quantity', 'ForecastAmount' as 'ForecastQuantity'\"}","{\"Display\":\"Revenue\",\"Value_Cumulative\":\"ForecastAmount_Cumulative\",\"Value_Monthly\":\"ForecastAmount\",\"Target_Value_Column\":\"MonthlyTargetCurrencyValue\",\"Target_Actuals_Column\":\"sum_TotalPrice\",\"Target_Value_Column2\":\"PeriodTargetCurrencyValue\",\"Target_Actuals_Column2\":\"TotalPrice\",\"Products_TY_generate\":\"'Target_Value', 'Target_Actuals', 'Target_Attainment_Percentage', 'Projected_Target_Actuals'\",\"Products_PY_generate\":\"'Target_Value', 'LY_Target_Value', ('Target_Value'-'LY_Target_Value')*100/'LY_Target_Value' as 'Target_Change', 'LY_Target_Actuals', 'LY_Target_Attainment_Percentage'\",\"Products_cumulative_line_chart_generate\":\"'cumulative_Target_Actuals', 'cumulative_Target_Value', 'ForecastAmount_Cumulative'\",\"Products_monthly_line_chart_generate\":\"'Target_Actuals', 'Target_Value', 'ForecastAmount'\"}"]},"Against_FY_or_LY_for_Products":{"broadcastFacet":false,"columns":{"Display":{"type":"string"}},"label":"Target Year or Previous Year for Products","selectMode":"singlerequired","start":"{\"Display\":[\"Target Year\"]}","type":"staticflex","values":["{\"Display\":\"Target Year\",\"Comment\":\"--\"}","{\"Display\":\"Previous Year\",\"Comment\":\"\"}"]},"All_Periods_1":{"broadcastFacet":true,"groups":[],"label":"All_Periods_Dates","numbers":[],"query":"periods = load \"MFG_Period\";\nperiods = group periods by 'FullyQualifiedLabel';\n\ntargets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\n targets = filter targets by date('AcctMgrTarget.Period.StartDate_Year', 'AcctMgrTarget.Period.StartDate_Month', 'AcctMgrTarget.Period.StartDate_Day') in [dateRange([{{coalesce(cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.StartDate_Year\"),1900).asObject()}}, {{coalesce(cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.StartDate_Month\"),01).asObject()}}, {{coalesce(cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.StartDate_Day\"),01).asObject()}}], [{{coalesce(cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.EndDate_Year\"),3000).asObject()}}, {{coalesce(cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.EndDate_Month\"),12).asObject()}}, {{coalesce(cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.EndDate_Day\"),31).asObject()}}])];\n targets = filter targets by 'AcctMgrTargetDstrId' is null;\nperiods_targets = cogroup periods by 'FullyQualifiedLabel', targets by 'AcctMgrTarget.Period.FullyQualifiedLabel';\nperiods_targets = foreach periods_targets generate coalesce(periods.'FullyQualifiedLabel', targets.'AcctMgrTarget.Period.FullyQualifiedLabel') as 'FullyQualifiedLabel', min(periods.'StartDate_sec_epoch') as 'Period_min_sec_epoch', max(periods.'EndDate_sec_epoch') as 'Period_max_sec_epoch', toDate(min(periods.'StartDate_sec_epoch')) as 'Period_Min', toDate(max(periods.'EndDate_sec_epoch')) as 'Period_Max';\nperiods_targets = order periods_targets by 'Period_min_sec_epoch' desc;\n\ntargets_ly = foreach periods_targets generate (case \nwhen starts_with(FullyQualifiedLabel, \"FY\") then \"FY \"+number_to_string(string_to_number(ltrim(FullyQualifiedLabel,\"FY \"))-1,\"#\")\nelse FullyQualifiedLabel\nend) as FullyQualifiedLabel;\nperiods_targets_ly = cogroup periods by 'FullyQualifiedLabel', targets_ly by 'FullyQualifiedLabel';\nperiods_targets_ly = foreach periods_targets_ly generate coalesce(periods.'FullyQualifiedLabel', targets_ly.'FullyQualifiedLabel') as 'FullyQualifiedLabel', min(periods.'StartDate_sec_epoch') as 'Period_min_sec_epoch', max(periods.'EndDate_sec_epoch') as 'Period_max_sec_epoch', toDate(min(periods.'StartDate_sec_epoch')) as 'Period_Min', toDate(max(periods.'EndDate_sec_epoch')) as 'Period_Max';\n\n\ntargets_lly = foreach periods_targets generate (case \nwhen starts_with(FullyQualifiedLabel, \"FY\") then \"FY \"+number_to_string(string_to_number(ltrim(FullyQualifiedLabel,\"FY \"))-2,\"#\")\nelse FullyQualifiedLabel\nend) as FullyQualifiedLabel;\nperiods_targets_lly = cogroup periods by 'FullyQualifiedLabel', targets_lly by 'FullyQualifiedLabel';\nperiods_targets_lly = foreach periods_targets_lly generate coalesce(periods.'FullyQualifiedLabel', targets_lly.'FullyQualifiedLabel') as 'FullyQualifiedLabel', min(periods.'StartDate_sec_epoch') as 'Period_min_sec_epoch', max(periods.'EndDate_sec_epoch') as 'Period_max_sec_epoch', toDate(min(periods.'StartDate_sec_epoch')) as 'Period_Min', toDate(max(periods.'EndDate_sec_epoch')) as 'Period_Max';\n\nperiods_targets_for_selected_till_last_2_periods = union periods_targets, periods_targets_ly, periods_targets_lly;","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"pivoted":false,"showActionMenu":true,"verticalPadding":8},"type":"table"}},"AcctMgrTargetDstr_Pr_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_AccountManagerPeriodicTargetDistribution"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"AcctMgrTargetDstr.Product.Family\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Cumulative_Accounts_Line_Chart_1":{"broadcastFacet":false,"groups":[],"label":"Cumulative Accounts Line Chart","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is not null && 'AcctMgrTargetDstr.AccountId' is not null;\ntargets = filter targets by {{column(Accounts_Analysis_1.result, [\"AcctMgrTargetDstr.Account.UniqueAccountName\"]).asEquality('AcctMgrTargetDstr.Account.UniqueAccountName')}};\n\ntargets_m1 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', 'Period.StartDate' as 'Period'  ;\ntargets_m2 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null \nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m3 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m4 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m5 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m6 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m7 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m8 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m9 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m10 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m11 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m12 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nend) as 'Period' ;\n\n\n\n\ntargets = union targets_m1, targets_m2, targets_m3, targets_m4, targets_m5, targets_m6, targets_m7, targets_m8, targets_m9, targets_m10, targets_m11, targets_m12 ;\ntargets = filter targets by 'Period' is not null ;\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\" ;\ntarget_actuals = filter target_actuals by {{column(Accounts_Analysis_1.result, [\"AcctMgrTargetDstr.Account.UniqueAccountName\"]).asEquality(\"Order.Account.UniqueAccountName\")}};\ntarget_actuals = group target_actuals by ('Order.Account.UniqueAccountName', 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month') ;\ntarget_actuals = foreach target_actuals generate 'Order.Account.UniqueAccountName', 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice' ;\n\ntarget_attainment_1 = cogroup targets by ('AcctMgrTargetDstr.Account.UniqueAccountName', 'Period') left, target_actuals by ('Order.Account.UniqueAccountName', 'Period') ;\ntarget_attainment_1 = foreach target_attainment_1 generate targets.'AcctMgrTargetDstr.Account.UniqueAccountName' as 'AcctMgrTargetDstr.Account.UniqueAccountName', toDate(coalesce(targets.'Period', target_actuals.'Period'), \"yyyy-MM-dd\") as 'Period', sum(target_actuals.'sum_TotalPrice') as 'Target_Actuals', sum(targets.'MonthlyTargetCurrencyValue') as 'Target_Value' ;\ntarget_attainment = group target_attainment_1 by ('Period') ;\ntarget_attainment = foreach target_attainment generate 'Period', toString(Period, \"yyyy\")+\"~~~\"+toString(Period, \"MM\") as 'Period.StartDate_Year~~~Period.StartDate_Month', toString(Period, \"yyyy\") as 'Period.StartDate_Year', toString(Period, \"MM\") as 'Period.StartDate_Month', sum('Target_Actuals') as 'Target_Actuals', sum('Target_Value') as 'Target_Value', sum('Target_Actuals')/sum('Target_Value') as 'Target_Attainment_Percentage' , (case when sum('Target_Actuals') is null then null else sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc) end)/sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Attainment_Percentage', sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Actuals', sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Value' ;\n\n\n\n\n\n                               forecasts = load \"MFG_Targets_AccountProductPeriodForecast\";\n\nforecasts = filter forecasts by 'Period.StartDate_sec_epoch' <= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' >= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\nforecasts = filter forecasts by {{column(Accounts_Analysis_1.result, [\"AcctMgrTargetDstr.Account.UniqueAccountName\"]).asEquality('Account.UniqueAccountName')}};\n\nforecast_start = foreach forecasts generate 'Id' as 'Id', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month', 'ForecastedDailyRevenue' as 'ForecastedDailyRevenue' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_end = foreach forecasts generate 'Id' as 'Id', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month',  'ForecastedDailyRevenue' as 'ForecastedDailyRevenue' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_for_fill = union forecast_start, forecast_end;\n forecast_for_fill = group forecast_for_fill by ('Id', 'Date_Year', 'Date_Month');\n forecast_for_fill = foreach forecast_for_fill generate 'Id', 'Date_Year', 'Date_Month', first('ForecastedDailyRevenue') as 'ForecastedDailyRevenue', first('StartDate') as 'StartDate', first('EndDate') as 'EndDate';\n Forecast_Filled = fill forecast_for_fill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n Forecast_Filled = group Forecast_Filled by ('Id', 'Date_Year', 'Date_Month');\n Forecast_Filled = foreach Forecast_Filled generate 'Id', 'Date_Year', 'Date_Month', max(first('ForecastedDailyRevenue')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'ForecastedDailyRevenue', max(first('StartDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'StartDate', max(first('EndDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'EndDate', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date';\n Forecast_Filled = filter Forecast_Filled by 'Date'>='StartDate' && 'Date'<='EndDate';\n forecasts = foreach Forecast_Filled generate 'Id' as 'Id', 'Date_Year' as 'Period.EndDate_Year', 'Date_Month' as 'Period.EndDate_Month', month_days(toDate('Date'))*'ForecastedDailyRevenue' as 'ForecastedRevenueFinal';\n forecasts = group forecasts by ('Period.EndDate_Year', 'Period.EndDate_Month');\nforecasts = foreach forecasts generate 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ForecastedRevenueFinal') as 'ForecastAmount', sum(sum('ForecastedRevenueFinal')) over ([..0] partition by all order by 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' asc) as 'ForecastAmount_Cumulative';                                                                \n\n\ntarget_attainment_w_forecasts = cogroup target_attainment by ('Period.StartDate_Year~~~Period.StartDate_Month') left, forecasts by  ('StartDate_Year~~~StartDate_Month');\ntarget_attainment_w_forecasts = foreach target_attainment_w_forecasts generate target_attainment.'Period.StartDate_Year~~~Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', sum(target_attainment.'cumulative_Target_Actuals') as 'cumulative_Target_Actuals', sum(target_attainment.'cumulative_Target_Value') as 'cumulative_Target_Value', sum(forecasts.'ForecastAmount_Cumulative') as 'ForecastAmount_Cumulative' ;","receiveFacetSource":{"mode":"exclude","steps":["AcctMgrTargetDstr_Pr_1","AcctMgrTargetDstr_Pr_2"]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":false,"predictiveLine":{"color":"#8932ED","label":"TODAY"},"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":true,"columnMap":{"split":[],"timeAxis":["Period.StartDate_Year~~~Period.StartDate_Month"],"trellis":[],"plots":["cumulative_Target_Actuals","cumulative_Target_Value","ForecastAmount_Cumulative"]},"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"label":{"data":"LY Target","type":"static"},"value":{"data":"undefined","type":"static"}}],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":true,"showTitle":true,"showAxis":true,"title":"Revenue","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"}},"AcctMgrTargetDstr_Pr_2":{"broadcastFacet":true,"datasets":[{"name":"MFG_AccountManagerPeriodicTargetDistribution"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"AcctMgrTargetDstr.Product.Name\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Attainment_KPIs_for__1":{"broadcastFacet":true,"groups":[],"label":"Attainment KPIs for FY","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by date('AcctMgrTarget.Period.StartDate_Year','AcctMgrTarget.Period.StartDate_Month','AcctMgrTarget.Period.StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [dateRange([{{cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.StartDate_Year\").asObject()}}, {{cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.StartDate_Month\").asObject()}}, {{cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.StartDate_Day\").asObject()}}], [{{cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.EndDate_Year\").asObject()}}, {{cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.EndDate_Month\").asObject()}}, {{cell(Fiscal_Year_Selection_1.selection, 0, \"AcctMgrTarget.Period.EndDate_Day\").asObject()}}])];\ntarget_actuals = filter target_actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [dateRange([{{coalesce(cell(TargetPeriodName_1.selection, 0, \"Period.StartDate_Year\"),1980).asObject()}}, {{coalesce(cell(TargetPeriodName_1.selection, 0, \"Period.StartDate_Month\"),01).asObject()}}, {{coalesce(cell(TargetPeriodName_1.selection, 0, \"Period.StartDate_Day\"),01).asObject()}}], [{{coalesce(cell(TargetPeriodName_1.selection, 0, \"Period.EndDate_Year\"),3000).asObject()}}, {{coalesce(cell(TargetPeriodName_1.selection, 0, \"Period.EndDate_Month\"),01).asObject()}}, {{coalesce(cell(TargetPeriodName_1.selection, 0, \"Period.EndDate_Day\"),01).asObject()}}])];\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\n\ntarget_attainment = cogroup targets by all, target_actuals by all;\ntarget_attainment = foreach target_attainment generate sum(target_actuals.'TotalPrice')/sum(targets.'PeriodTargetCurrencyValue') as 'Target_Attainment_Ratio',  sum(target_actuals.'TotalPrice')/sum(targets.'PeriodTargetCurrencyValue') as 'Target_Attainment_Percentage',  sum(target_actuals.'TotalPrice') as 'Target_Actuals', sum(targets.'PeriodTargetCurrencyValue') as 'Target_Value';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"View_FY_vs_LY_Toggle_1":{"broadcastFacet":false,"columns":{"Display":{"type":"string"}},"label":"Target Year or Previous Year","selectMode":"singlerequired","start":"{\"Display\":[\"Target Year\"]}","type":"staticflex","values":["{\"Display\":\"Target Year\",\"Comment\":\"--\"}","{\"Display\":\"Previous Year\",\"Comment\":\"\"}"]},"Attainment_KPI_for_LY":{"broadcastFacet":true,"groups":[],"label":"Attainment KPI for LY","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets = filter targets by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_attainment = cogroup targets by all full, target_actuals by all;\ntarget_attainment = foreach target_attainment generate sum(target_actuals.'TotalPrice')/sum(targets.'PeriodTargetCurrencyValue') as 'Target_Attainment_Ratio',  sum(target_actuals.'TotalPrice')/sum(targets.'PeriodTargetCurrencyValue') as 'Target_Attainment_Percentage',  sum(target_actuals.'TotalPrice') as 'Target_Actuals', ( case when\n \"{{cell(Show_LY_Toggle_1.selection, 0, \"Display\").asObject()}}\" == \"ON\" then sum(targets.'PeriodTargetCurrencyValue')-10000000000 end) as 'Target_Value';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Attainment_KPIs_1":{"broadcastFacet":true,"groups":[],"label":"Attainment KPIs for FY","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\n--target_actuals = filter target_actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current month\"];\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\n\ntarget_attainment = cogroup targets by all full, target_actuals by all;\ntarget_attainment = foreach target_attainment generate sum(target_actuals.'TotalPrice')/sum(targets.'PeriodTargetCurrencyValue') as 'Target_Attainment_Ratio',  sum(target_actuals.'TotalPrice')/sum(targets.'PeriodTargetCurrencyValue') as 'Target_Attainment_Percentage',  sum(target_actuals.'TotalPrice') as 'Target_Actuals', sum(targets.'PeriodTargetCurrencyValue') as 'Target_Value';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Logged_In_User":{"broadcastFacet":true,"groups":[],"label":"Logged_In_User","numbers":[],"query":"q = load \"MFG_Users\";\nq = group q by 'Id';\nq = foreach q generate 'Id' as 'Id', first('Name') as 'Name', count() as 'count';\nq = order q by 'Id' asc;\nq = limit q 1;","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"singlerequired","start":"[\"005B0000005fnp7IAA\"]","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Changed_Targets_Table_1":{"broadcastFacet":false,"groups":[],"label":"Yearly Analysis of Targets","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\n\ntargets_ly = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_ly = filter targets_ly by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\ntargets_cy = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_cy = filter targets_cy by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\ntargets_lly = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,2, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_lly = filter targets_lly by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}};\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals_ly = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_ly = filter target_actuals_ly by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_actuals_cy = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_cy = filter target_actuals_cy by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_actuals_lly = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,2, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_lly = filter target_actuals_lly by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}};\n\n targets_accounts_change = cogroup targets_cy by 'AcctMgrTargetDstr.AccountId' full, targets_ly by 'AcctMgrTargetDstr.AccountId' left, target_actuals_cy by 'Order.Account.Id';\ntargets_accounts_change = foreach targets_accounts_change generate targets_cy.'AcctMgrTargetDstr.AccountId' as 'New Id', targets_ly.'AcctMgrTargetDstr.AccountId' as 'Old Id', first(targets_cy.'AcctMgrTargetDstr.Account.UniqueAccountName') as 'New Name', first(targets_ly.'AcctMgrTargetDstr.Account.UniqueAccountName') as 'Old Name', \"Account\" as 'Type', (sum(targets_cy.'PeriodTargetCurrencyValue')-sum(targets_ly.'PeriodTargetCurrencyValue'))*100/sum(targets_ly.'PeriodTargetCurrencyValue') as 'Target_Change' , sum(target_actuals_cy.'TotalPrice')/sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Attainment_Percentage';\ntargets_accounts_new = filter targets_accounts_change by 'Old Id' is not null && 'New Id' is not null && 'Target_Change'>=30;\n targets_products_change = cogroup targets_cy by 'AcctMgrTargetDstr.ProductId' full, targets_ly by 'AcctMgrTargetDstr.ProductId' left, target_actuals_cy by 'Product2Id';\ntargets_products_change = foreach targets_products_change generate targets_cy.'AcctMgrTargetDstr.ProductId' as 'New Id', targets_ly.'AcctMgrTargetDstr.ProductId' as 'Old Id', first(targets_cy.'AcctMgrTargetDstr.Product.Name') as 'New Name', first(targets_ly.'AcctMgrTargetDstr.Product.Name') as 'Old Name', \"Product\" as 'Type', (sum(targets_cy.'PeriodTargetCurrencyValue')-sum(targets_ly.'PeriodTargetCurrencyValue'))*100/sum(targets_ly.'PeriodTargetCurrencyValue') as 'Target_Change' , sum(target_actuals_cy.'TotalPrice')/sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Attainment_Percentage';\ntargets_products_new = filter targets_products_change by 'Old Id' is not null && 'New Id' is not null && 'Target_Change'>=30;\n targets_new = union targets_accounts_new, targets_products_new;\ntargets_new = foreach targets_new generate 'New Name' as 'Name', 'Type', 'Target_Change' , 'Target_Attainment_Percentage';\n","receiveFacetSource":{"mode":"exclude","steps":["Fiscal_Year_Selection_1","TargetPeriodName_1","AcctMgrTargetDstr_Pr_1","AcctMgrTargetDstr_Pr_2","AcctMgrTargetDstr_Ac_1","AcctMgrTargetDstr_Ac_2","AcctMgrTargetDstr_Ac_4","AcctMgrTargetDstr_Ac_3","AcctMgrTarget_Parent_1"]},"selectMode":"none","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Show_LY_Toggle_1":{"broadcastFacet":false,"columns":{"Display":{"type":"string"}},"label":"Show_LY_Toggle","selectMode":"singlerequired","start":"{\"Display\":[\"OFF\"]}","type":"staticflex","values":["{\"Display\":\"ON\",\"LY_Actuals_Generate\":\", (case when \\\"{{cell(Show_LY_Toggle_1.selection, 0, \\\"Display\\\").asObject()}}\\\" == \\\"ON\\\" then {{cell(Attainment_KPI_for_LY.result, 0, \\\"Target_Actuals\\\").asObject()}} end) as 'LY_Target_Actuals'\"}","{\"Display\":\"OFF\",\"LY_Actuals_Generate\":\"\"}"]},"monthly_target_attai_1":{"broadcastFacet":true,"groups":["Period.StartDate_Year~~~Period.StartDate_Month"],"label":"monthly_target_attainment_chart","numbers":["Target_Actuals","Target_Value","Target_Attainment_Percentage","LY_Target_Actuals"],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\ntargets = filter targets by date('AcctMgrTarget.Period.StartDate_Year','AcctMgrTarget.Period.StartDate_Month','AcctMgrTarget.Period.StartDate_Day') in [\"1 fiscal_year ago\"..\"current fiscal_year\"];\ntargets = filter targets by date('AcctMgrTarget.Period.EndDate_Year','AcctMgrTarget.Period.EndDate_Month','AcctMgrTarget.Period.EndDate_Day') in [\"1 fiscal_year ago\"..\"current fiscal_year\"];\ntargets_m1 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', 'Period.StartDate' as 'Period'  ;\ntargets_m2 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null \nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m3 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m4 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m5 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m6 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m7 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m8 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m9 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m10 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m11 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m12 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nend) as 'Period' ;\n\n\n\n\ntargets = union targets_m1, targets_m2, targets_m3, targets_m4, targets_m5, targets_m6, targets_m7, targets_m8, targets_m9, targets_m10, targets_m11, targets_m12 ;\ntargets = filter targets by 'Period' is not null ;\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"12 months ago\"..\"current month\"];\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals = group target_actuals by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\ntarget_actuals = foreach target_actuals generate 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', sum('TotalPrice') as 'sum_TotalPrice';\n\n--target_attainment = cogroup targets by 'Period' left, target_actuals by 'Period';\n--target_attainment = foreach target_attainment generate toDate(coalesce(targets.'Period', target_actuals.'Period'), \"yyyy-MM-dd\") as 'Period', sum(target_actuals.'sum_TotalPrice') as 'Target_Actuals', sum(targets.'MonthlyTargetCurrencyValue') as 'Target_Value';\n--target_attainment = foreach target_attainment generate toString(Period, \"yyyy\")+\"~~~\"+toString(Period, \"MM\") as 'Period.StartDate_Year~~~Period.StartDate_Month', 'Target_Actuals', 'Target_Value', 'Target_Actuals'/'Target_Value' as 'Target_Attainment_Percentage';\n\n--new lines\ntarget_attainment_1 = cogroup targets by 'Period' left, target_actuals by 'Period';\ntarget_attainment_1 = foreach target_attainment_1 generate toDate(coalesce(targets.'Period', target_actuals.'Period'), \"yyyy-MM-dd\") as 'Period', sum(target_actuals.'sum_TotalPrice') as 'Target_Actuals', sum(targets.'MonthlyTargetCurrencyValue') as 'Target_Value';\ntarget_attainment = group target_attainment_1 by 'Period';\ntarget_attainment = foreach target_attainment generate 'Period', toString(Period, \"yyyy\")+\"~~~\"+toString(Period, \"MM\") as 'Period.StartDate_Year~~~Period.StartDate_Month', toString(Period, \"yyyy\") as 'Period.StartDate_Year', toString(Period, \"MM\") as 'Period.StartDate_Month', sum('Target_Actuals') as 'Target_Actuals', sum('Target_Value') as 'Target_Value', sum('Target_Actuals')/sum('Target_Value') as 'Target_Attainment_Percentage'\n, sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc)/sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Attainment_Percentage', sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Actuals', sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Value'\n;\n\n\ntarget_attainment = fill target_attainment by (dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"));\n\ntarget_attainment = timeseries target_attainment generate 'Target_Attainment_Percentage' as Projected_Target_Attainment_Percentage with (length=36, dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"));\ntarget_attainment = foreach target_attainment generate 'Period', {{coalesce(cell(Attainment_KPI_for_LY.result, 0, \"Target_Actuals\"),0).asObject()}} as 'LY_Target_Actuals', 'Period.StartDate_Year' + \"~~~\" + 'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', coalesce(Target_Attainment_Percentage, Projected_Target_Attainment_Percentage) as Target_Attainment_Percentage,  coalesce(Target_Attainment_Percentage, Projected_Target_Attainment_Percentage)*'Target_Value' as 'Target_Actuals', 'Target_Value' as 'Target_Value';\ntarget_attainment_fy = filter target_attainment by 'Period' in [\"current fiscal_year\"..\"current fiscal_year\"];\ntarget_attainment_till_date = foreach target_attainment_fy generate 'Period.StartDate_Year~~~Period.StartDate_Month', (case when \"{{cell(Show_LY_Toggle_1.selection, 0, \"Display\").asObject()}}\"== \"ON\" then 'LY_Target_Actuals' end) as 'LY_Target_Actuals', (case when 'Period' in [..\"current month\"] then 'Target_Actuals' end) as 'Target_Actuals', 'Target_Value', (case when 'Period' in [..\"current month\"] then  'Target_Actuals'/'Target_Value' end) as 'Target_Attainment_Percentage';\n\n\n\n\n{{cell(Show_Projections_Toggle_1.selection, 0, \"Comment\").asObject()}}target_attainment_fy = foreach target_attainment_fy generate 'Period.StartDate_Year~~~Period.StartDate_Month', 'Target_Actuals', 'Target_Value', (case when \"{{cell(Show_LY_Toggle_1.selection, 0, \"Display\").asObject()}}\"== \"ON\" then 'LY_Target_Actuals' end) as 'LY_Target_Actuals', 'Target_Actuals'/'Target_Value' as 'Target_Attainment_Percentage';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":["Period.StartDate_Year~~~Period.StartDate_Month"],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"dual","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":false,"predictiveLine":{"color":"#8932ED","label":"TODAY"},"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"plots":{"Target_Actuals":{"mark":"bar"},"Target_Attainment_Percentage":{"mark":"line"},"Target_Value":{"mark":"bar"}},"columnMap":{"timeAxis":["Period.StartDate_Year~~~Period.StartDate_Month"],"trellis":[],"plots":["Target_Attainment_Percentage","Target_Actuals","Target_Value","LY_Target_Actuals"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Attainment (%)","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"OverTime_Accounts_Line_Chart_1":{"broadcastFacet":false,"groups":[],"label":"Over Time Accounts Line Chart","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is not null && 'AcctMgrTargetDstr.AccountId' is not null;\ntargets = filter targets by {{column(Accounts_Analysis_1.result, [\"AcctMgrTargetDstr.Account.UniqueAccountName\"]).asEquality('AcctMgrTargetDstr.Account.UniqueAccountName')}};\n\ntargets_m1 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', 'Period.StartDate' as 'Period'  ;\ntargets_m2 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null \nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m3 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m4 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m5 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m6 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m7 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m8 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m9 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m10 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m11 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m12 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nend) as 'Period' ;\n\n\n\n\ntargets = union targets_m1, targets_m2, targets_m3, targets_m4, targets_m5, targets_m6, targets_m7, targets_m8, targets_m9, targets_m10, targets_m11, targets_m12 ;\ntargets = filter targets by 'Period' is not null ;\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\" ;\ntarget_actuals = filter target_actuals by {{column(Accounts_Analysis_1.result, [\"AcctMgrTargetDstr.Account.UniqueAccountName\"]).asEquality('Order.Account.UniqueAccountName')}};\ntarget_actuals = group target_actuals by ('Order.Account.UniqueAccountName', 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month') ;\ntarget_actuals = foreach target_actuals generate 'Order.Account.UniqueAccountName', 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice' ;\n\ntarget_attainment_1 = cogroup targets by ('AcctMgrTargetDstr.Account.UniqueAccountName', 'Period') left, target_actuals by ('Order.Account.UniqueAccountName', 'Period') ;\ntarget_attainment_1 = foreach target_attainment_1 generate targets.'AcctMgrTargetDstr.Account.UniqueAccountName' as 'AcctMgrTargetDstr.Account.UniqueAccountName', toDate(coalesce(targets.'Period', target_actuals.'Period'), \"yyyy-MM-dd\") as 'Period', sum(target_actuals.'sum_TotalPrice') as 'Target_Actuals', sum(targets.'MonthlyTargetCurrencyValue') as 'Target_Value' ;\ntarget_attainment = group target_attainment_1 by ('Period') ;\ntarget_attainment = foreach target_attainment generate 'Period', toString(Period, \"yyyy\")+\"~~~\"+toString(Period, \"MM\") as 'Period.StartDate_Year~~~Period.StartDate_Month', toString(Period, \"yyyy\") as 'Period.StartDate_Year', toString(Period, \"MM\") as 'Period.StartDate_Month', sum('Target_Actuals') as 'Target_Actuals', sum('Target_Value') as 'Target_Value', sum('Target_Actuals')/sum('Target_Value') as 'Target_Attainment_Percentage' , (case when sum('Target_Actuals') is null then null else sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc) end)/sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Attainment_Percentage', sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Actuals', sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Value' ;\n\n\n\n\n\n                                            forecasts = load \"MFG_Targets_AccountProductPeriodForecast\";\n\nforecasts = filter forecasts by 'Period.StartDate_sec_epoch' <= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' >= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\nforecasts = filter forecasts by {{column(Accounts_Analysis_1.result, [\"AcctMgrTargetDstr.Account.UniqueAccountName\"]).asEquality('Account.UniqueAccountName')}};\n\nforecast_start = foreach forecasts generate 'Id' as 'Id', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month', 'ForecastedDailyRevenue' as 'ForecastedDailyRevenue' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_end = foreach forecasts generate 'Id' as 'Id', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month',  'ForecastedDailyRevenue' as 'ForecastedDailyRevenue' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_for_fill = union forecast_start, forecast_end;\n forecast_for_fill = group forecast_for_fill by ('Id', 'Date_Year', 'Date_Month');\n forecast_for_fill = foreach forecast_for_fill generate 'Id', 'Date_Year', 'Date_Month', first('ForecastedDailyRevenue') as 'ForecastedDailyRevenue', first('StartDate') as 'StartDate', first('EndDate') as 'EndDate';\n Forecast_Filled = fill forecast_for_fill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n Forecast_Filled = group Forecast_Filled by ('Id', 'Date_Year', 'Date_Month');\n Forecast_Filled = foreach Forecast_Filled generate 'Id', 'Date_Year', 'Date_Month', max(first('ForecastedDailyRevenue')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'ForecastedDailyRevenue', max(first('StartDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'StartDate', max(first('EndDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'EndDate', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date';\n Forecast_Filled = filter Forecast_Filled by 'Date'>='StartDate' && 'Date'<='EndDate';\n forecasts = foreach Forecast_Filled generate 'Id' as 'Id', 'Date_Year' as 'Period.EndDate_Year', 'Date_Month' as 'Period.EndDate_Month', month_days(toDate('Date'))*'ForecastedDailyRevenue' as 'ForecastedRevenueFinal';\n forecasts = group forecasts by ('Period.EndDate_Year', 'Period.EndDate_Month');\nforecasts = foreach forecasts generate 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ForecastedRevenueFinal') as 'ForecastAmount', sum(sum('ForecastedRevenueFinal')) over ([..0] partition by all order by 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' asc) as 'ForecastAmount_Cumulative';                                                \n\n\ntarget_attainment_w_forecasts = cogroup target_attainment by ('Period.StartDate_Year~~~Period.StartDate_Month') left, forecasts by  ('StartDate_Year~~~StartDate_Month');\ntarget_attainment_w_forecasts = foreach target_attainment_w_forecasts generate target_attainment.'Period.StartDate_Year~~~Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', sum(target_attainment.'Target_Actuals') as 'Target_Actuals', sum(target_attainment.'Target_Value') as 'Target_Value', sum(forecasts.'ForecastAmount') as 'ForecastAmount' ;","receiveFacetSource":{"mode":"exclude","steps":["AcctMgrTargetDstr_Pr_1","AcctMgrTargetDstr_Pr_2"]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":false,"predictiveLine":{"color":"#8932ED","label":"TODAY"},"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":true,"columnMap":{"split":[],"timeAxis":["Period.StartDate_Year~~~Period.StartDate_Month"],"trellis":[],"plots":["Target_Actuals","Target_Value","ForecastAmount"]},"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"label":{"data":"LY Target","type":"static"},"value":{"data":"undefined","type":"static"}}],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":true,"showTitle":true,"showAxis":true,"title":"Revenue","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"}},"monthly_target_attainment_chart":{"broadcastFacet":false,"groups":["Period.StartDate_Year~~~Period.StartDate_Month"],"label":"monthly_target_attainment_chart","numbers":["Target_Actuals","Target_Value","Target_Attainment_Percentage","ForecastAmount","LY_Target_Actuals","Projections"],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null ;\n\ntargets_m1 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', 'Period.StartDate' as 'Period'  ;\ntargets_m2 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null \nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m3 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m4 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m5 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m6 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m7 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m8 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m9 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m10 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m11 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m12 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nend) as 'Period' ;\n\n\n\n\ntargets = union targets_m1, targets_m2, targets_m3, targets_m4, targets_m5, targets_m6, targets_m7, targets_m8, targets_m9, targets_m10, targets_m11, targets_m12 ;\ntargets = filter targets by 'Period' is not null ;\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\" ;\ntarget_actuals_proj = group target_actuals by ('TargetActualsOwner.Managers', 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month') ;\ntarget_actuals_proj = foreach target_actuals_proj generate 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice' ;\ntarget_actuals_proj = fill target_actuals_proj by (dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\")) ;\ntarget_actuals_proj = timeseries target_actuals_proj generate 'sum_TotalPrice' as Projected_sum_TotalPrice with (length=36, dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"), seasonality = 0, ignoreLast = false) ;\ntarget_actuals_proj = foreach target_actuals_proj generate 'Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\" as 'Period', 'Period.StartDate_Year' + \"~~~\" + 'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', 'Period.StartDate_Year' as 'Period.StartDate_Year', 'Period.StartDate_Month' as 'Period.StartDate_Month', \"01\" as 'Period.StartDate_Day', case when 'sum_TotalPrice' > coalesce('Projected_sum_TotalPrice',0) then 'sum_TotalPrice' when coalesce('Projected_sum_TotalPrice',0) >= 0 then 'Projected_sum_TotalPrice' else 0 end as 'sum_TotalPrice', month_last_day(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-27 00:00:00\",\"yyyy-MM-dd HH:mm:ss\")) as 'Month Last Day';\n target_actuals_proj = filter target_actuals_proj by 'Month Last Day' > now();\ntarget_actuals = foreach target_actuals generate 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice' ;\ntarget_actuals_ly = filter target_actuals by date_to_epoch(toDate('Period',\"yyyy-MM-dd\")) >= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}} && date_to_epoch(toDate('Period',\"yyyy-MM-dd\")) <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\n target_actuals_ly = foreach target_actuals_ly generate number_to_string(string_to_number('Period.StartDate_Year')+1, \"#\") + \"-\" + 'Period.StartDate_Month' + \"-01\" as 'Period', number_to_string(string_to_number('Period.StartDate_Year')+1, \"#\") as 'Period.StartDate_Year', 'Period.StartDate_Month', number_to_string(string_to_number('Period.StartDate_Year')+1, \"#\")+\"~~~\"+'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', 'sum_TotalPrice' as 'LY_Target_Actuals' ;\n\n\ntarget_attainment_1 = cogroup targets by 'Period' left, target_actuals by 'Period' left, target_actuals_proj by 'Period' ;\ntarget_attainment_1 = foreach target_attainment_1 generate toDate(coalesce(targets.'Period', target_actuals.'Period'), \"yyyy-MM-dd\") as 'Period', (case when sum(target_actuals.'sum_TotalPrice')<0 then 0 else sum(target_actuals.'sum_TotalPrice') end) as 'Target_Actuals', sum(targets.'MonthlyTargetCurrencyValue') as 'Target_Value', sum(target_actuals_proj.'sum_TotalPrice') as 'Projections_only', coalesce(sum(target_actuals_proj.'sum_TotalPrice'),sum(target_actuals.'sum_TotalPrice')) as 'Projections' ;\ntarget_attainment = group target_attainment_1 by 'Period' ;\ntarget_attainment = foreach target_attainment generate 'Period', toString(Period, \"yyyy\")+\"~~~\"+toString(Period, \"MM\") as 'Period.StartDate_Year~~~Period.StartDate_Month', toString(Period, \"yyyy\") as 'Period.StartDate_Year', toString(Period, \"MM\") as 'Period.StartDate_Month', sum('Target_Actuals') as 'Target_Actuals', sum('Target_Value') as 'Target_Value', sum('Target_Actuals')/sum('Target_Value') as 'Target_Attainment_Percentage' , sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc)/sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Attainment_Percentage', sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Actuals', sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Value',  {{coalesce(cell(Attainment_KPI_for_LY.result, 0, \"Target_Actuals\"),0).asObject()}} as 'LY_Target_Actuals' , sum('Projections_only') as 'Projections_only', sum(sum('Projections')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Projections';\n\ntarget_attainment_fy = foreach target_attainment generate 'Period.StartDate_Year~~~Period.StartDate_Month', 'cumulative_Target_Actuals', 'cumulative_Target_Value', (case when \"{{cell(Show_LY_Toggle_1.selection, 0, \"Display\").asObject()}}\"== \"ON\" then 'LY_Target_Actuals' end) as 'LY_Target_Actuals', 'cumulative_Target_Attainment_Percentage' ;                                                                                                                                                              \n\n\n\n\nforecasts = load \"MFG_Targets_AccountProductPeriodForecast\";\n\nforecasts = filter forecasts by 'Period.StartDate_sec_epoch' <= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' >= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\n\nforecast_start = foreach forecasts generate 'Id' as 'Id', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month', 'ForecastedDailyRevenue' as 'ForecastedDailyRevenue' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_end = foreach forecasts generate 'Id' as 'Id', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month',  'ForecastedDailyRevenue' as 'ForecastedDailyRevenue' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_for_fill = union forecast_start, forecast_end;\n forecast_for_fill = group forecast_for_fill by ('Id', 'Date_Year', 'Date_Month');\n forecast_for_fill = foreach forecast_for_fill generate 'Id', 'Date_Year', 'Date_Month', first('ForecastedDailyRevenue') as 'ForecastedDailyRevenue', first('StartDate') as 'StartDate', first('EndDate') as 'EndDate';\n Forecast_Filled = fill forecast_for_fill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n Forecast_Filled = group Forecast_Filled by ('Id', 'Date_Year', 'Date_Month');\n Forecast_Filled = foreach Forecast_Filled generate 'Id', 'Date_Year', 'Date_Month', max(first('ForecastedDailyRevenue')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'ForecastedDailyRevenue', max(first('StartDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'StartDate', max(first('EndDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'EndDate', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date';\n Forecast_Filled = filter Forecast_Filled by 'Date'>='StartDate' && 'Date'<='EndDate';\n forecasts = foreach Forecast_Filled generate 'Id' as 'Id', 'Date_Year' as 'Period.EndDate_Year', 'Date_Month' as 'Period.EndDate_Month', month_days(toDate('Date'))*'ForecastedDailyRevenue' as 'ForecastedRevenueFinal';\n forecasts = group forecasts by ('Period.EndDate_Year', 'Period.EndDate_Month');\nforecasts = foreach forecasts generate 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ForecastedRevenueFinal') as 'ForecastAmount', sum(sum('ForecastedRevenueFinal')) over ([..0] partition by all order by 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' asc) as 'ForecastAmount_Cumulative';                                                                \n\n\ntarget_attainment_w_forecasts = cogroup target_attainment by 'Period.StartDate_Year~~~Period.StartDate_Month' left, forecasts by  'StartDate_Year~~~StartDate_Month' left, target_actuals_ly by 'Period.StartDate_Year~~~Period.StartDate_Month';\ntarget_attainment_w_forecasts = foreach target_attainment_w_forecasts generate target_attainment.'Period.StartDate_Year~~~Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', sum(target_attainment.'Target_Actuals') as 'Target_Actuals', sum(target_attainment.'Target_Value') as 'Target_Value', (case when \"{{cell(Show_LY_Toggle_1.selection, 0, \"Display\").asObject()}}\"== \"ON\" then sum(target_actuals_ly.'LY_Target_Actuals') end) as 'LY_Target_Actuals', first(target_attainment.'Target_Attainment_Percentage') as 'Target_Attainment_Percentage', sum(forecasts.'ForecastAmount') as 'ForecastAmount' \n{{cell(Show_Projections_Toggle_1.selection, 0, \"Comment\").asObject()}}, sum(target_attainment.'Projections_only') as 'Projections'\n;","receiveFacetSource":{"mode":"exclude","steps":["Accounts_Analysis_1","Products_Analysis_1","AcctMgrTargetDstr_Pr_1","AcctMgrTargetDstr_Pr_2","AcctMgrTargetDstr_Ac_1","AcctMgrTargetDstr_Ac_2","AcctMgrTargetDstr_Ac_3","AcctMgrTargetDstr_Ac_4","AcctMgrTarget_Parent_1"]},"selectMode":"single","strings":["Period.StartDate_Year~~~Period.StartDate_Month"],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"dual","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":false,"predictiveLine":{"color":"#8932ED","label":"TODAY"},"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"plots":{"Target_Actuals":{"mark":"bar"},"Target_Attainment_Percentage":{"mark":"line"},"ForecastAmount":{"mark":"bar"},"LY_Target_Actuals":{"mark":"bar"},"Target_Value":{"mark":"bar"}},"columnMap":{"timeAxis":["Period.StartDate_Year~~~Period.StartDate_Month"],"trellis":[],"plots":["Target_Attainment_Percentage","Target_Actuals","Target_Value","ForecastAmount","LY_Target_Actuals","Projections"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Attainment (%)","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"cumulative_target_attainment_chart":{"broadcastFacet":false,"groups":["Period.StartDate_Year~~~Period.StartDate_Month"],"label":"monthly_target_attainment_chart","numbers":["cumulative_Target_Actuals","cumulative_Target_Value","cumulative_Target_Attainment_Percentage","ForecastAmount_Cumulative","LY_Target_Actuals","Projections"],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null ;\n\ntargets_m1 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', 'Period.StartDate' as 'Period'  ;\ntargets_m2 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null \nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m3 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m4 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m5 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m6 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m7 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m8 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m9 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m10 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m11 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m12 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nend) as 'Period' ;\n\n\n\n\ntargets = union targets_m1, targets_m2, targets_m3, targets_m4, targets_m5, targets_m6, targets_m7, targets_m8, targets_m9, targets_m10, targets_m11, targets_m12 ;\ntargets = filter targets by 'Period' is not null ;\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\" ;\ntarget_actuals_proj = group target_actuals by ('TargetActualsOwner.Managers', 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month') ;\ntarget_actuals_proj = foreach target_actuals_proj generate 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice' ;\ntarget_actuals_proj = fill target_actuals_proj by (dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\")) ;\ntarget_actuals_proj = timeseries target_actuals_proj generate 'sum_TotalPrice' as Projected_sum_TotalPrice with (length=36, dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"), seasonality = 0, ignoreLast = false) ;\ntarget_actuals_proj = foreach target_actuals_proj generate 'Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\" as 'Period', 'Period.StartDate_Year' + \"~~~\" + 'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', 'Period.StartDate_Year' as 'Period.StartDate_Year', 'Period.StartDate_Month' as 'Period.StartDate_Month', \"01\" as 'Period.StartDate_Day', case when 'sum_TotalPrice' > coalesce('Projected_sum_TotalPrice',0) then 'sum_TotalPrice' when coalesce('Projected_sum_TotalPrice',0) >= 0 then 'Projected_sum_TotalPrice' else 0 end as 'sum_TotalPrice', month_last_day(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-27 00:00:00\",\"yyyy-MM-dd HH:mm:ss\")) as 'Month Last Day';\n target_actuals_proj = filter target_actuals_proj by 'Month Last Day' > now();\ntarget_actuals = foreach target_actuals generate 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice';\ntarget_actuals_ly = filter target_actuals by date_to_epoch(toDate('Period',\"yyyy-MM-dd\")) >= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}} && date_to_epoch(toDate('Period',\"yyyy-MM-dd\")) <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\n target_actuals_ly = foreach target_actuals_ly generate number_to_string(string_to_number('Period.StartDate_Year')+1, \"#\") + \"-\" + 'Period.StartDate_Month' + \"-01\" as 'Period', number_to_string(string_to_number('Period.StartDate_Year')+1, \"#\") as 'Period.StartDate_Year', 'Period.StartDate_Month', number_to_string(string_to_number('Period.StartDate_Year')+1, \"#\")+\"~~~\"+'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', 'sum_TotalPrice' as 'LY_Target_Actuals' ;\n\ntarget_attainment_1 = cogroup targets by 'Period' left, target_actuals by 'Period' left, target_actuals_proj by 'Period' ;\ntarget_attainment_1 = foreach target_attainment_1 generate toDate(coalesce(targets.'Period', target_actuals.'Period'), \"yyyy-MM-dd\") as 'Period', (case when sum(target_actuals.'sum_TotalPrice')<0 then 0 else sum(target_actuals.'sum_TotalPrice') end) as 'Target_Actuals', sum(targets.'MonthlyTargetCurrencyValue') as 'Target_Value', sum(target_actuals_proj.'sum_TotalPrice') as 'Projections_only', coalesce(sum(target_actuals_proj.'sum_TotalPrice'),sum(target_actuals.'sum_TotalPrice')) as 'Projections' ;\ntarget_attainment = group target_attainment_1 by 'Period' ;\ntarget_attainment = foreach target_attainment generate 'Period', toString(Period, \"yyyy\")+\"~~~\"+toString(Period, \"MM\") as 'Period.StartDate_Year~~~Period.StartDate_Month', toString(Period, \"yyyy\") as 'Period.StartDate_Year', toString(Period, \"MM\") as 'Period.StartDate_Month', sum('Target_Actuals') as 'Target_Actuals', sum('Target_Value') as 'Target_Value', sum('Target_Actuals')/sum('Target_Value') as 'Target_Attainment_Percentage' , sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc)/sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Attainment_Percentage', sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Actuals', sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Value',  {{coalesce(cell(Attainment_KPI_for_LY.result, 0, \"Target_Actuals\"),0).asObject()}} as 'LY_Target_Actuals' , sum('Projections_only') as 'Projections_only', sum(sum('Projections')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Projections';\n\ntarget_attainment_fy = foreach target_attainment generate 'Period.StartDate_Year~~~Period.StartDate_Month', 'cumulative_Target_Actuals', 'cumulative_Target_Value', (case when \"{{cell(Show_LY_Toggle_1.selection, 0, \"Display\").asObject()}}\"== \"ON\" then 'LY_Target_Actuals' end) as 'LY_Target_Actuals', 'cumulative_Target_Attainment_Percentage' ;                                                                                                                                                              \n\n\n\n\nforecasts = load \"MFG_Targets_AccountProductPeriodForecast\";\n\nforecasts = filter forecasts by 'Period.StartDate_sec_epoch' <= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' >= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\n\nforecast_start = foreach forecasts generate 'Id' as 'Id', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month', 'ForecastedDailyRevenue' as 'ForecastedDailyRevenue' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_end = foreach forecasts generate 'Id' as 'Id', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month',  'ForecastedDailyRevenue' as 'ForecastedDailyRevenue' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_for_fill = union forecast_start, forecast_end;\n forecast_for_fill = group forecast_for_fill by ('Id', 'Date_Year', 'Date_Month');\n forecast_for_fill = foreach forecast_for_fill generate 'Id', 'Date_Year', 'Date_Month', first('ForecastedDailyRevenue') as 'ForecastedDailyRevenue', first('StartDate') as 'StartDate', first('EndDate') as 'EndDate';\n Forecast_Filled = fill forecast_for_fill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n Forecast_Filled = group Forecast_Filled by ('Id', 'Date_Year', 'Date_Month');\n Forecast_Filled = foreach Forecast_Filled generate 'Id', 'Date_Year', 'Date_Month', max(first('ForecastedDailyRevenue')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'ForecastedDailyRevenue', max(first('StartDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'StartDate', max(first('EndDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'EndDate', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date';\n Forecast_Filled = filter Forecast_Filled by 'Date'>='StartDate' && 'Date'<='EndDate';\n forecasts = foreach Forecast_Filled generate 'Id' as 'Id', 'Date_Year' as 'Period.EndDate_Year', 'Date_Month' as 'Period.EndDate_Month', month_days(toDate('Date'))*'ForecastedDailyRevenue' as 'ForecastedRevenueFinal';\n forecasts = group forecasts by ('Period.EndDate_Year', 'Period.EndDate_Month');\nforecasts = foreach forecasts generate 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ForecastedRevenueFinal') as 'ForecastAmount', sum(sum('ForecastedRevenueFinal')) over ([..0] partition by all order by 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' asc) as 'ForecastAmount_Cumulative';                                                                \n\n\ntarget_attainment_w_forecasts = cogroup target_attainment by 'Period.StartDate_Year~~~Period.StartDate_Month' left, forecasts by  'StartDate_Year~~~StartDate_Month' left, target_actuals_ly by 'Period.StartDate_Year~~~Period.StartDate_Month';\ntarget_attainment_w_forecasts = foreach target_attainment_w_forecasts generate target_attainment.'Period.StartDate_Year~~~Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', sum(target_attainment.'cumulative_Target_Actuals') as 'cumulative_Target_Actuals', sum(target_attainment.'cumulative_Target_Value') as 'cumulative_Target_Value', (case when \"{{cell(Show_LY_Toggle_1.selection, 0, \"Display\").asObject()}}\"== \"ON\" then sum(sum(target_actuals_ly.'LY_Target_Actuals')) over ([..0] partition by all order by target_actuals_ly.'Period.StartDate_Year~~~Period.StartDate_Month' asc) end) as 'LY_Target_Actuals', first(target_attainment.'cumulative_Target_Attainment_Percentage') as 'cumulative_Target_Attainment_Percentage', sum(forecasts.'ForecastAmount_Cumulative') as 'ForecastAmount_Cumulative' \n{{cell(Show_Projections_Toggle_1.selection, 0, \"Comment\").asObject()}},(case when sum(target_attainment.'Projections_only') is not null then sum(target_attainment.'cumulative_Projections') else null end) as 'Projections'\n;","receiveFacetSource":{"mode":"exclude","steps":["Accounts_Analysis_1","Products_Analysis_1","AcctMgrTargetDstr_Pr_2","AcctMgrTargetDstr_Pr_1","AcctMgrTargetDstr_Ac_1","AcctMgrTargetDstr_Ac_2","AcctMgrTargetDstr_Ac_3","AcctMgrTargetDstr_Ac_4","AcctMgrTarget_Parent_1"]},"selectMode":"single","strings":["Period.StartDate_Year~~~Period.StartDate_Month"],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"dual","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":false,"predictiveLine":{"color":"#8932ED","label":"TODAY"},"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"plots":{"cumulative_Target_Value":{"mark":"bar"},"cumulative_Target_Attainment_Percentage":{"mark":"line"},"Projections":{"mark":"line"},"LY_Target_Actuals":{"mark":"bar"},"cumulative_Target_Actuals":{"mark":"bar"},"ForecastAmount_Cumulative":{"mark":"bar"}},"columnMap":{"timeAxis":["Period.StartDate_Year~~~Period.StartDate_Month"],"trellis":[],"plots":["cumulative_Target_Attainment_Percentage","cumulative_Target_Actuals","cumulative_Target_Value","ForecastAmount_Cumulative","LY_Target_Actuals","Projections"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Attainment (%)","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Products_Analysis_1":{"broadcastFacet":true,"groups":[],"label":"Products Analysis","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is not null && 'AcctMgrTargetDstr.ProductId' is not null;\ntargets_cy = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_cy = filter targets_cy by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\ntargets_ly = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_ly = filter targets_ly by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals_ly = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_ly = filter target_actuals_ly by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_actuals_cy = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_cy = filter target_actuals_cy by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_actuals = group target_actuals by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Product.Name');\ntarget_actuals = foreach target_actuals generate 'Product.Name', 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice', sum('Quantity') as 'sum_Quantity';\ntarget_actuals = fill target_actuals by (dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"), partition = 'Product.Name');\ntarget_actuals = timeseries target_actuals generate 'sum_TotalPrice' as Projected_sum_TotalPrice, 'sum_Quantity' as Projected_sum_Quantity with (length=36, dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"), partition = 'Product.Name');\ntarget_actuals = foreach target_actuals generate 'Product.Name', 'Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\" as 'Period', 'Period.StartDate_Year' + \"~~~\" + 'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', date_to_epoch(toDate('Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\", \"yyyy-MM-dd\") ) as 'Period_sec_epoch', coalesce(sum_TotalPrice, Projected_sum_TotalPrice) as sum_TotalPrice, coalesce(sum_Quantity, Projected_sum_Quantity) as sum_Quantity;\ntarget_actuals = filter target_actuals by 'Period_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals = filter target_actuals by 'Period_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\n\n\n\ntarget_attainment = cogroup targets_cy by 'AcctMgrTargetDstr.Product.Name' left, target_actuals_cy by 'Product.Name' left, targets_ly by 'AcctMgrTargetDstr.Product.Name' left, target_actuals_ly by 'Product.Name' left, target_actuals by 'Product.Name';\ntarget_attainment = foreach target_attainment generate coalesce(targets_cy.'AcctMgrTargetDstr.Product.Name', target_actuals_cy.'Product.Name') as 'AcctMgrTargetDstr.Product.Name', sum(target_actuals_cy.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Actuals_Column2\").asObject()}}')/sum(targets_cy.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Value_Column2\").asObject()}}') as 'Target_Attainment_Ratio',  sum(target_actuals_cy.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Actuals_Column2\").asObject()}}')/sum(targets_cy.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Value_Column2\").asObject()}}') as 'Target_Attainment_Percentage',  sum(target_actuals_ly.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Actuals_Column2\").asObject()}}')/sum(targets_ly.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Value_Column2\").asObject()}}') as 'LY_Target_Attainment_Percentage',  sum(target_actuals_cy.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Actuals_Column2\").asObject()}}') as 'Target_Actuals', sum(targets_cy.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Value_Column2\").asObject()}}') as 'Target_Value', sum(targets_ly.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Value_Column2\").asObject()}}') as 'LY_Target_Value',  sum(target_actuals_ly.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Actuals_Column2\").asObject()}}') as 'LY_Target_Actuals',  sum(target_actuals.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Actuals_Column\").asObject()}}') as 'Projected_Target_Actuals';\n\ntarget_attainment_current_fy_view = foreach target_attainment generate 'AcctMgrTargetDstr.Product.Name', {{cell(Qty_vs_Revenue.selection, 0, \"Products_TY_generate\").asObject()}};\n{{cell(Against_FY_or_LY_for_Products.selection, 0, \"Comment\").asObject()}}target_attainment_against_ly_view = foreach target_attainment generate 'AcctMgrTargetDstr.Product.Name', {{cell(Qty_vs_Revenue.selection, 0, \"Products_PY_generate\").asObject()}};\n","receiveFacetSource":{"mode":"exclude","steps":["Fiscal_Year_Selection_1","TargetPeriodName_1","Accounts_Analysis_1","AcctMgrTargetDstr_Ac_3","AcctMgrTargetDstr_Ac_4","AcctMgrTargetDstr_Ac_2","AcctMgrTargetDstr_Ac_1","AcctMgrTarget_Parent_1"]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"New_Targets_Table_1":{"broadcastFacet":false,"groups":[],"label":"Yearly Analysis of Targets","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\n\ntargets_ly = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_ly = filter targets_ly by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\ntargets_cy = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_cy = filter targets_cy by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\ntargets_lly = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,2, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_lly = filter targets_lly by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}};\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals_ly = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_ly = filter target_actuals_ly by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_actuals_cy = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_cy = filter target_actuals_cy by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_actuals_lly = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,2, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_lly = filter target_actuals_lly by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}};\n\n targets_accounts_change = cogroup targets_cy by 'AcctMgrTargetDstr.AccountId' full, targets_ly by 'AcctMgrTargetDstr.AccountId' left, target_actuals_cy by 'Order.Account.Id';\ntargets_accounts_change = foreach targets_accounts_change generate targets_cy.'AcctMgrTargetDstr.AccountId' as 'New Id', targets_ly.'AcctMgrTargetDstr.AccountId' as 'Old Id', first(targets_cy.'AcctMgrTargetDstr.Account.UniqueAccountName') as 'New Name', first(targets_ly.'AcctMgrTargetDstr.Account.UniqueAccountName') as 'Old Name', \"Account\" as 'Type', sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Value' , sum(target_actuals_cy.'TotalPrice')/sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Attainment_Percentage';\ntargets_accounts_new = filter targets_accounts_change by 'Old Id' is null;\n targets_products_change = cogroup targets_cy by 'AcctMgrTargetDstr.ProductId' full, targets_ly by 'AcctMgrTargetDstr.ProductId' left, target_actuals_cy by 'Product2Id';\ntargets_products_change = foreach targets_products_change generate targets_cy.'AcctMgrTargetDstr.ProductId' as 'New Id', targets_ly.'AcctMgrTargetDstr.ProductId' as 'Old Id', first(targets_cy.'AcctMgrTargetDstr.Product.Name') as 'New Name', first(targets_ly.'AcctMgrTargetDstr.Product.Name') as 'Old Name', \"Product\" as 'Type', sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Value' , sum(target_actuals_cy.'TotalPrice')/sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Attainment_Percentage';\ntargets_products_new = filter targets_products_change by 'Old Id' is null;\n targets_new = union targets_accounts_new, targets_products_new;\ntargets_new = foreach targets_new generate 'New Name' as 'Name', 'Type', 'Target_Value' , 'Target_Attainment_Percentage';\n","receiveFacetSource":{"mode":"exclude","steps":["Fiscal_Year_Selection_1","TargetPeriodName_1","AcctMgrTargetDstr_Pr_1","AcctMgrTargetDstr_Pr_2","AcctMgrTargetDstr_Ac_1","AcctMgrTargetDstr_Ac_2","AcctMgrTargetDstr_Ac_3","AcctMgrTargetDstr_Ac_4","AcctMgrTarget_Parent_1"]},"selectMode":"none","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Change_of_Target_Value_from_LQ":{"broadcastFacet":true,"groups":[],"label":"Change of Target Value from LQ","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets = filter targets by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\ntargets = filter targets by 'AcctMgrTargetDstrId' is not null && 'AcctMgrTargetDstr.AccountId' is not null;\n\ntargets = foreach targets generate 'Id', 'AcctMgrTargetId', 'Period.Type', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'Period.Number', 'PeriodTargetCurrencyValue', date_diff(\"quarter\", toDate({{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), now() )+1 as 'CQ';\n\ntargets_pq = foreach targets generate 'Id', 'AcctMgrTargetDstr.Account.UniqueAccountName', 'Period.Type' as 'Period.Type', 'PeriodTargetCurrencyValue', \n( case \nwhen 'Period.Type' == \"Year\" then true\nwhen 'Period.Type' == \"Quarter\" && 'Period.Number' == CQ-1 then true\nwhen 'Period.Type' == \"Month\" && ('Period.Number' <= ('CQ'-1)*3 && 'Period.Number' >= ('CQ'-1)*3-2 ) then true\nelse false\nend ) as 'is_LQ_record', \n( case \nwhen 'Period.Type' == \"Year\" && 'CQ' != 1 then 'PeriodTargetCurrencyValue'/4\nwhen 'Period.Type' == \"Quarter\" && 'Period.Number' == CQ-1 then 'PeriodTargetCurrencyValue'\nwhen 'Period.Type' == \"Month\" && ('Period.Number' <= ('CQ'-1)*3 && 'Period.Number' >= ('CQ'-1)*3-2 ) then 'PeriodTargetCurrencyValue'\nelse 0\nend ) as 'LQ_Target_value', \n( case \nwhen 'Period.Type' == \"Year\" then true\nwhen 'Period.Type' == \"Quarter\" && 'Period.Number' == CQ then true\nwhen 'Period.Type' == \"Month\" && ('Period.Number' <= 'CQ'*3 && 'Period.Number' >= ('CQ'*3)-2 ) then true\nelse false\nend ) as 'is_CQ_record', \n( case \nwhen 'Period.Type' == \"Year\" then 'PeriodTargetCurrencyValue'/4\nwhen 'Period.Type' == \"Quarter\" && 'Period.Number' == CQ then 'PeriodTargetCurrencyValue'\nwhen 'Period.Type' == \"Month\" && ('Period.Number' <= ('CQ'*3) && 'Period.Number' >= ('CQ'*3)-2 ) then 'PeriodTargetCurrencyValue'\nelse 0\nend ) as 'CQ_Target_value';;\n\ntargets_pq = filter targets_pq by 'is_LQ_record' == true || 'is_CQ_record' == true;\n\ntargets_pq = group targets_pq by 'AcctMgrTargetDstr.Account.UniqueAccountName';\n\ntargets_pq = foreach targets_pq generate 'AcctMgrTargetDstr.Account.UniqueAccountName', sum('LQ_Target_value') as 'LQ_Target_value', sum('CQ_Target_value') as 'CQ_Target_value';\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Products_Over_Time_For_Accounts_1":{"broadcastFacet":true,"groups":[],"label":"Products Over Time For Accounts","numbers":[],"query":"target_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals = group target_actuals by ('Product.Name', 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\ntarget_actuals = foreach target_actuals generate 'Product.Name' as 'Product.Name', 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' as 'Order.EffectiveDate_Year~~~Order.EffectiveDate_Month', sum('TotalPrice') as 'sum_TotalPrice';\ntarget_actuals = order target_actuals by ('Product.Name' asc, 'Order.EffectiveDate_Year~~~Order.EffectiveDate_Month' asc);\ntarget_actuals = limit target_actuals 2000;","receiveFacetSource":{"mode":"exclude","steps":["AcctMgrTargetDstr_Pr_1","AcctMgrTargetDstr_Pr_2"]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"none","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":true,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"highColor":"#009DDF","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"lowColor":"#E2F4FC","visualizationType":"heatmap","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"showActionMenu":true,"x":{"showTitle":true,"showAxis":true,"title":""},"y":{"showTitle":false,"showAxis":true,"title":""},"theme":"wave","applyConditionalFormatting":true},"type":"chart"}},"TODAY_reference_line_1":{"broadcastFacet":true,"groups":[],"label":"TODAY_reference_line","numbers":[],"query":"q = load \"MFG_AccountManagerPeriodicTargetDistribution\";\nq = foreach q generate date_diff(\"week\", toDate(toString(now(), \"yyyy\")+\"-01-01 00:00:00\"), now()) as 'CurrentWeek';\nq = group q by all;\nq = foreach q generate first('CurrentWeek') as 'CurrentWeek', \"W\"+number_to_string(first('CurrentWeek'), \"#00\") as 'CurrentWeek_label', toString(now(),\"yyyy\")+\"~~~\"+toString(now(),\"MM\") as 'Current_Year~~~Current_Month';\nq = limit q 1;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Show_Projections_Toggle_1":{"broadcastFacet":false,"columns":{"Display":{"type":"string"}},"label":"Show_Projections_Toggle","selectMode":"singlerequired","start":"{\"Display\":[\"OFF\"]}","type":"staticflex","values":["{\"Display\":\"ON\",\"Comment\":\"\"}","{\"Display\":\"OFF\",\"Comment\":\"--\"}"]},"AcctMgrTarget_Name_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_AccountManagerPeriodicTargetDistribution"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"AcctMgrTarget.Name\"]}","version":-1.0},"receiveFacetSource":{"mode":"include","steps":["Fiscal_Year_Selection_1","TargetPeriodName_1"]},"selectMode":"multi","start":"[]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Forecast_Trend_1":{"broadcastFacet":true,"groups":[],"label":"Forecast Trend","numbers":[],"query":"forecasts = load \"MFG_Targets_AccountProductPeriodForecast\";\nforecasts = filter forecasts by 'Period.StartDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\nforecasts = filter forecasts by 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\nforecasts = foreach forecasts generate (case  \nwhen ('Period.StartDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal' \nwhen ('Period.StartDate_sec_epoch'  < {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(All_Periods_1.result,0,\"Period_min_sec_epoch\"),0).asObject()}})) ) \nwhen ('Period.StartDate_sec_epoch'  >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch'  > {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate({{coalesce(cell(All_Periods_1.result,0,\"Period_max_sec_epoch\"),0).asObject()}}),toDate('Period.EndDate', \"yyyy-MM-dd\")) ) \nwhen ('Period.StartDate_sec_epoch' < {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' > {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-'ForecastedDailyRevenue'*( daysBetween(toDate({{coalesce(cell(All_Periods_1.result,0,\"Period_max_sec_epoch\"),0).asObject()}}),toDate('Period.EndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(All_Periods_1.result,0,\"Period_min_sec_epoch\"),0).asObject()}})) )  \nelse 0 end) as 'ForecastedAmount';\nforecasts = group forecasts by all;\nforecasts = foreach forecasts generate sum(forecasts.'ForecastedAmount') as 'ForecastAmount';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Time (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{},"plots":{},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Yearly_Analysis_of_Targets_1":{"broadcastFacet":false,"groups":[],"label":"Yearly Analysis of Targets","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\n\ntargets_ly = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_ly = filter targets_ly by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\ntargets_cy = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_cy = filter targets_cy by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\ntargets_lly = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,2, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_lly = filter targets_lly by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}};\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals_ly = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_ly = filter target_actuals_ly by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_actuals_cy = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_cy = filter target_actuals_cy by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_actuals_lly = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,2, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_lly = filter target_actuals_lly by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}};\n\n forecasts = load \"MFG_Targets_AccountProductPeriodForecast\";\nforecasts_cy = filter forecasts by 'Period.StartDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\nforecasts_cy = filter forecasts_cy by 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\nforecasts_cy = foreach forecasts_cy generate (case  \nwhen ('Period.StartDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal' \nwhen ('Period.StartDate_sec_epoch'  < {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(All_Periods_1.result,0,\"Period_min_sec_epoch\"),0).asObject()}})) ) \nwhen ('Period.StartDate_sec_epoch'  >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch'  > {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate({{coalesce(cell(All_Periods_1.result,0,\"Period_max_sec_epoch\"),0).asObject()}}),toDate('Period.EndDate', \"yyyy-MM-dd\")) ) \nwhen ('Period.StartDate_sec_epoch' < {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' > {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-'ForecastedDailyRevenue'*( daysBetween(toDate({{coalesce(cell(All_Periods_1.result,0,\"Period_max_sec_epoch\"),0).asObject()}}),toDate('Period.EndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(All_Periods_1.result,0,\"Period_min_sec_epoch\"),0).asObject()}})) )  \nelse 0 end) as 'ForecastedAmount';\nforecasts_ly = filter forecasts by 'Period.StartDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\nforecasts_ly = filter forecasts_ly by 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\nforecasts_ly = foreach forecasts_ly generate (case  \nwhen ('Period.StartDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal' \nwhen ('Period.StartDate_sec_epoch'  < {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(All_Periods_1.result,1,\"Period_min_sec_epoch\"),0).asObject()}})) ) \nwhen ('Period.StartDate_sec_epoch'  >= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch'  > {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate({{coalesce(cell(All_Periods_1.result,1,\"Period_max_sec_epoch\"),0).asObject()}}),toDate('Period.EndDate', \"yyyy-MM-dd\")) ) \nwhen ('Period.StartDate_sec_epoch' < {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' > {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-'ForecastedDailyRevenue'*( daysBetween(toDate({{coalesce(cell(All_Periods_1.result,1,\"Period_max_sec_epoch\"),0).asObject()}}),toDate('Period.EndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(All_Periods_1.result,1,\"Period_min_sec_epoch\"),0).asObject()}})) )  \nelse 0 end) as 'ForecastedAmount';\nforecasts_lly = filter forecasts by 'Period.StartDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,2, \"Period_min_sec_epoch\"),0).asObject()}};\nforecasts_lly = filter forecasts_lly by 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}};\nforecasts_lly = foreach forecasts_lly generate (case  \nwhen ('Period.StartDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,2, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal' \nwhen ('Period.StartDate_sec_epoch'  < {{coalesce(cell( All_Periods_1.result,2, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(All_Periods_1.result,2,\"Period_min_sec_epoch\"),0).asObject()}})) ) \nwhen ('Period.StartDate_sec_epoch'  >= {{coalesce(cell( All_Periods_1.result,2, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch'  > {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate({{coalesce(cell(All_Periods_1.result,2,\"Period_max_sec_epoch\"),0).asObject()}}),toDate('Period.EndDate', \"yyyy-MM-dd\")) ) \nwhen ('Period.StartDate_sec_epoch' < {{coalesce(cell( All_Periods_1.result,2, \"Period_min_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' > {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}}) then 'ForecastedRevenueFinal'-'ForecastedDailyRevenue'*( daysBetween(toDate({{coalesce(cell(All_Periods_1.result,2,\"Period_max_sec_epoch\"),0).asObject()}}),toDate('Period.EndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(All_Periods_1.result,2,\"Period_min_sec_epoch\"),0).asObject()}})) )  \nelse 0 end) as 'ForecastedAmount';\n --insert here\n\n\n accounts = load \"MFG_Target_Accounts\";\naccounts_cy = filter accounts by 'CreatedDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\n\naccounts_ly = filter accounts by 'CreatedDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\n\naccounts_lly = filter accounts by 'CreatedDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,2, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_attainment_cy = cogroup targets_cy by all full, target_actuals_cy by all full, accounts_cy by all full, forecasts_cy by all;\ntarget_attainment_cy = foreach target_attainment_cy generate \"FY\" as 'Year_Label', unique(accounts_cy.'Id') as 'Accounts_count',  sum(target_actuals_cy.'TotalPrice') as 'Target_Actuals', sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Value', sum(forecasts_cy.'ForecastedAmount') as 'ForecastAmount';\ntarget_attainment_ly = cogroup targets_ly by all full, target_actuals_ly by all full, accounts_ly by all full, forecasts_ly by all;\ntarget_attainment_ly = foreach target_attainment_ly generate \"LY\" as 'Year_Label',  unique(accounts_ly.'Id') as 'Accounts_count', sum(target_actuals_ly.'TotalPrice') as 'Target_Actuals', sum(targets_ly.'PeriodTargetCurrencyValue') as 'Target_Value', sum(forecasts_ly.'ForecastedAmount') as 'ForecastAmount';\ntarget_attainment_lly = cogroup targets_lly by all full, target_actuals_lly by all full, accounts_lly by all full, forecasts_lly by all;\ntarget_attainment_lly = foreach target_attainment_lly generate \"LLY\" as 'Year_Label', unique(accounts_lly.'Id') as 'Accounts_count',  sum(target_actuals_lly.'TotalPrice') as 'Target_Actuals', sum(targets_lly.'PeriodTargetCurrencyValue') as 'Target_Value', sum(forecasts_lly.'ForecastedAmount') as 'ForecastAmount';\ntarget_attainment_yearly = union target_attainment_lly, target_attainment_ly, target_attainment_cy;\n","receiveFacetSource":{"mode":"exclude","steps":["Fiscal_Year_Selection_1","Period_dates_filtered","TargetPeriodName_1","Accounts_Analysis_1","Products_Analysis_1","AcctMgrTargetDstr_Pr_1","AcctMgrTargetDstr_Pr_2","AcctMgrTargetDstr_Ac_1","AcctMgrTargetDstr_Ac_2","AcctMgrTargetDstr_Ac_3","AcctMgrTargetDstr_Ac_4","AcctMgrTarget_Parent_1"]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Geography_actuals_vs_attainment_1":{"broadcastFacet":false,"columns":{"Display":{"type":"string"}},"label":"Geography actuals vs attainment","selectMode":"singlerequired","start":"{\"Display\":[\"Revenue\"]}","type":"staticflex","values":["{\"Display\":\"Revenue\",\"Value\":\"Target_Actuals\"}","{\"Display\":\"Attainment\",\"Value\":\"Target_Attainment_Percentage\"}"]},"Attainments_Guage_KP_1":{"broadcastFacet":false,"groups":[],"label":"Attainments_Guage_KPI","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\ntargets_m1 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', 'Period.StartDate' as 'Period' ;\ntargets_m2 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null \nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m3 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m4 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m5 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m6 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m7 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m8 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m9 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m10 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m11 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m12 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nend) as 'Period';\n\n\n\n\ntargets = union targets_m1, targets_m2, targets_m3, targets_m4, targets_m5, targets_m6, targets_m7, targets_m8, targets_m9, targets_m10, targets_m11, targets_m12;\ntargets = filter targets by 'Period' is not null;\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals_proj = group target_actuals by ('TargetActualsOwner.Managers', 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\ntarget_actuals_proj = foreach target_actuals_proj generate 'TargetActualsOwner.Managers', 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice';\n\ntarget_actuals_proj = fill target_actuals_proj by (dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"), partition='TargetActualsOwner.Managers');\ntarget_actuals_proj = timeseries target_actuals_proj generate 'sum_TotalPrice' as Projected_sum_TotalPrice with (partition='TargetActualsOwner.Managers', length=36, dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"), seasonality = 0, ignoreLast = false);\ntarget_actuals_proj = foreach target_actuals_proj generate 'TargetActualsOwner.Managers', 'Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\" as 'Period', 'Period.StartDate_Year' + \"~~~\" + 'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', case when 'sum_TotalPrice' > coalesce('Projected_sum_TotalPrice',0) then 'sum_TotalPrice' when coalesce('Projected_sum_TotalPrice',0) >= 0 then 'Projected_sum_TotalPrice' else 0 end as 'sum_TotalPrice', month_last_day(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-27 00:00:00\",\"yyyy-MM-dd HH:mm:ss\")) as 'Month Last Day';\n target_actuals_proj = filter target_actuals_proj by 'Month Last Day' > now();\ntarget_actuals = foreach target_actuals generate 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice' ;\n\ntarget_attainment = cogroup targets by 'Period' left, target_actuals by 'Period'left , target_actuals_proj by 'Period';\ntarget_attainment = foreach target_attainment generate toDate(coalesce(targets.'Period', target_actuals.'Period'), \"yyyy-MM-dd\") as 'Period', (case when sum(target_actuals.'sum_TotalPrice')<0 then 0 else sum(target_actuals.'sum_TotalPrice') end) as 'Target_Actuals', sum(targets.'MonthlyTargetCurrencyValue') as 'Target_Value', sum(target_actuals_proj.'sum_TotalPrice') as 'Projections_only', coalesce(sum(target_actuals_proj.'sum_TotalPrice'),sum(target_actuals.'sum_TotalPrice')) as 'Projections';\ntarget_attainment = group target_attainment by 'Period';\ntarget_attainment = foreach target_attainment generate 'Period', \"Projected Attainment\" as 'Attainment Type', toString(Period, \"yyyy\")+\"~~~\"+toString(Period, \"MM\") as 'Period.StartDate_Year~~~Period.StartDate_Month', toString(Period, \"yyyy\") as 'Period.StartDate_Year', toString(Period, \"MM\") as 'Period.StartDate_Month', sum('Projections') as 'Target_Actuals', sum('Target_Value') as 'Target_Value', sum('Projections')/sum('Target_Value') as 'Target_Attainment_Percentage'\n, sum(sum('Projections')) over ([..0] partition by all order by 'Period' asc)*100/sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Attainment_Percent', sum(sum('Projections')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Actuals', sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Value';\n\ntarget_attainment_fy = group target_attainment by all;\ntarget_attainment_fy = foreach target_attainment_fy generate \"Projected Attainment\" as 'Attainment Type', sum('Target_Actuals')*100/sum('Target_Value') as 'cumulative_Target_Attainment_Percent';\ntarget_attainment_fy = limit target_attainment_fy  1;\n\ntarget_attainment_cm = filter target_attainment by 'Period' in [..\"current month\"];\ntarget_attainment_cm = group target_attainment_cm by all;\ntarget_attainment_cm = foreach target_attainment_cm generate \"Prorated Attainment\" as 'Attainment Type', sum('Target_Actuals')*100/sum('Target_Value') as 'cumulative_Target_Attainment_Percent';\n\ntarget_attainment_final = union target_attainment_fy, target_attainment_cm;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["cumulative_Target_Attainment_Percent"],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":["Period","Period.StartDate_Year~~~Period.StartDate_Month","Attainment Type"]}}},"visualizationType":"polargauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":false,"size":[100,20],"enable":true,"type":"x","chartsPerLine":4},"icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"Attainment Type"}},"inner":80,"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Accounts_Analysis_1":{"broadcastFacet":true,"groups":[],"label":"Accounts Analysis","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is not null && 'AcctMgrTargetDstr.AccountId' is not null;\ntargets_cy = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_cy = filter targets_cy by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\ntargets_ly = filter targets by 'AcctMgrTarget.Period.StartDate_sec_epoch'>= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntargets_ly = filter targets_ly by 'AcctMgrTarget.Period.EndDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals_ly = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,1, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_ly = filter target_actuals_ly by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,1, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_actuals_cy = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals_cy = filter target_actuals_cy by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\n\ntarget_actuals = group target_actuals by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.Account.UniqueAccountName');\ntarget_actuals = foreach target_actuals generate 'Order.Account.UniqueAccountName', 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice';\ntarget_actuals = fill target_actuals by (dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"), partition = 'Order.Account.UniqueAccountName');\ntarget_actuals = timeseries target_actuals generate 'sum_TotalPrice' as Projected_sum_TotalPrice with (length=36, dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"), partition = 'Order.Account.UniqueAccountName');\ntarget_actuals = foreach target_actuals generate 'Order.Account.UniqueAccountName', 'Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\" as 'Period', 'Period.StartDate_Year' + \"~~~\" + 'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', date_to_epoch(toDate('Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\", \"yyyy-MM-dd\") ) as 'Period_sec_epoch', coalesce(sum_TotalPrice, Projected_sum_TotalPrice) as sum_TotalPrice;\ntarget_actuals = filter target_actuals by 'Period_sec_epoch' >= {{coalesce(cell( All_Periods_1.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals = filter target_actuals by 'Period_sec_epoch' <= {{coalesce(cell( All_Periods_1.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\n\n\n\ntarget_attainment = cogroup targets_cy by 'AcctMgrTargetDstr.Account.UniqueAccountName' left, target_actuals_cy by 'Order.Account.UniqueAccountName' left, targets_ly by 'AcctMgrTargetDstr.Account.UniqueAccountName' left, target_actuals_ly by 'Order.Account.UniqueAccountName' left, target_actuals by 'Order.Account.UniqueAccountName';\ntarget_attainment = foreach target_attainment generate coalesce(targets_cy.'AcctMgrTargetDstr.Account.UniqueAccountName', target_actuals_cy.'Order.Account.UniqueAccountName') as 'AcctMgrTargetDstr.Account.UniqueAccountName', sum(target_actuals_cy.'TotalPrice')/sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Attainment_Ratio',  sum(target_actuals_cy.'TotalPrice')/sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Attainment_Percentage',  sum(target_actuals_ly.'TotalPrice')/sum(targets_ly.'PeriodTargetCurrencyValue') as 'LY_Target_Attainment_Percentage',  sum(target_actuals_cy.'TotalPrice') as 'Target_Actuals', sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Value', sum(targets_ly.'PeriodTargetCurrencyValue') as 'LY_Target_Value',  sum(target_actuals_ly.'TotalPrice') as 'LY_Target_Actuals',  sum(target_actuals.'sum_TotalPrice') as 'Projected_Target_Actuals';\n\ntarget_attainment_current_fy_view = foreach target_attainment generate 'AcctMgrTargetDstr.Account.UniqueAccountName', 'Target_Value', 'Target_Actuals', 'Target_Attainment_Percentage', 'Projected_Target_Actuals';\n{{cell(View_FY_vs_LY_Toggle_1.selection, 0, \"Comment\").asObject()}}target_attainment_against_ly_view = foreach target_attainment generate 'AcctMgrTargetDstr.Account.UniqueAccountName', 'Target_Value', 'LY_Target_Value', ('Target_Value'-'LY_Target_Value')*100/'LY_Target_Value' as 'Target_Change', 'LY_Target_Actuals', 'LY_Target_Attainment_Percentage';\n","receiveFacetSource":{"mode":"exclude","steps":["Fiscal_Year_Selection_1","TargetPeriodName_1","Products_Analysis_1","AcctMgrTargetDstr_Pr_1","AcctMgrTargetDstr_Pr_2"]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Period_dates_filtere_1":{"broadcastFacet":true,"groups":[],"label":"Actuals_Id_filtered","numbers":[],"query":"target_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Period_dates_filtered.result,0,\"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Period_dates_filtered.result,0,\"Period_max_sec_epoch\"),0).asObject()}};\ntarget_actuals = group target_actuals by Id;\ntarget_actuals = foreach target_actuals generate Id;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":false,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Geographical_Accounts_Dstr_1":{"broadcastFacet":true,"groups":[],"label":"Geographical Accounts Distr","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is not null && 'AcctMgrTargetDstr.AccountId' is not null;\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}};\ntarget_actuals = filter target_actuals by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\n\ntarget_attainment = cogroup targets by 'AcctMgrTargetDstr.Account.BillingState' left, target_actuals by 'Order.Account.BillingState';\ntarget_attainment = foreach target_attainment generate coalesce(targets.'AcctMgrTargetDstr.Account.BillingState', target_actuals.'Order.Account.BillingState') as 'AcctMgrTargetDstr.Account.BillingState', sum(target_actuals.'TotalPrice')/sum(targets.'PeriodTargetCurrencyValue') as 'Target_Attainment_Ratio',  sum(target_actuals.'TotalPrice')/sum(targets.'PeriodTargetCurrencyValue') as 'Target_Attainment_Percentage',  sum(target_actuals.'TotalPrice') as 'Target_Actuals', sum(targets.'PeriodTargetCurrencyValue') as 'Target_Value';\ntarget_attainment = foreach target_attainment generate 'AcctMgrTargetDstr.Account.BillingState', '{{cell(Geography_actuals_vs_attainment_1.selection, 0, \"Value\").asObject()}}';","receiveFacetSource":{"mode":"exclude","steps":["AcctMgrTargetDstr_Pr_1","AcctMgrTargetDstr_Pr_2"]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Period_dates_filtered":{"broadcastFacet":true,"groups":[],"label":"Period_dates_filtered","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\ntargets = group targets by 'AcctMgrTarget.Period.FullyQualifiedLabel';\ntargets = foreach targets generate 'AcctMgrTarget.Period.FullyQualifiedLabel', min('Period.StartDate_sec_epoch') as 'Period_min_sec_epoch', max('Period.EndDate_sec_epoch') as 'Period_max_sec_epoch', toDate(min('Period.StartDate_sec_epoch')) as 'Period_Min', toDate(max('Period.EndDate_sec_epoch')) as 'Period_Max';\ntargets = order targets by 'Period_min_sec_epoch' desc;","receiveFacetSource":{"mode":"exclude","steps":["Accounts_Analysis_1","Products_Analysis_1","Geographical_Accounts_Dstr_1","AcctMgrTargetDstr_Pr_1","AcctMgrTargetDstr_Pr_2"]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"AcctMgrTarget_Parent_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_AccountManagerPeriodicTargetDistribution"}],"isGlobal":false,"label":"AcctMgrTarget_Parent_1","query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"AcctMgrTargetDstr.Account.UniqueAccountName\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":["AcctMgrTargetDstr.Account.UniqueAccountName"],"plots":["count"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"TargetPeriodName_1":{"broadcastFacet":true,"groups":[],"label":"TargetPeriodName_1","numbers":[],"query":"q = load \"MFG_AccountManagerPeriodicTargetDistribution\";\nq = group q by ('TargetPeriodName', 'Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day', 'Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day');\nq = foreach q generate 'TargetPeriodName' as 'TargetPeriodName', 'Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day', 'Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day', count() as 'count';\nq = order q by ('TargetPeriodName', 'Period.StartDate_Year','Period.StartDate_Month','Period.StartDate_Day', 'Period.EndDate_Year','Period.EndDate_Month','Period.EndDate_Day');","receiveFacetSource":{"mode":"include","steps":["Fiscal_Year_Selection_1","AcctMgrTarget_Name_1"]},"selectMode":"multi","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Cumulative_Accounts__2":{"broadcastFacet":false,"groups":[],"label":"Cumulative Accounts Line Chart","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is not null && 'AcctMgrTargetDstr.ProductId' is not null;\ntargets = filter targets by {{column(Products_Analysis_1.result, [\"AcctMgrTargetDstr.Product.Name\"]).asEquality('AcctMgrTargetDstr.Product.Name')}};\n\ntargets_m1 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', 'Period.StartDate' as 'Period'  ;\ntargets_m2 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null \nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m3 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m4 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m5 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m6 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m7 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m8 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m9 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m10 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m11 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#\")+\"-\"+\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period' ;\ntargets_m12 = foreach targets generate 'Name', 'AcctMgrTargetDstr.Product.Name', 'MonthlyTargetCurrencyValue', 'MonthlyTargetValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nend) as 'Period' ;\n\n\n\n\ntargets = union targets_m1, targets_m2, targets_m3, targets_m4, targets_m5, targets_m6, targets_m7, targets_m8, targets_m9, targets_m10, targets_m11, targets_m12 ;\ntargets = filter targets by 'Period' is not null ;\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\" ;\ntarget_actuals = filter target_actuals by {{column(Products_Analysis_1.result, [\"AcctMgrTargetDstr.Product.Name\"]).asEquality('Product.Name')}};\ntarget_actuals = group target_actuals by ('Product.Name', 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month') ;\ntarget_actuals = foreach target_actuals generate 'Product.Name', 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice', sum('Quantity') as 'sum_Quantity' ;\n\ntarget_attainment_1 = cogroup targets by ('AcctMgrTargetDstr.Product.Name', 'Period') left, target_actuals by ('Product.Name', 'Period') ;\ntarget_attainment_1 = foreach target_attainment_1 generate targets.'AcctMgrTargetDstr.Product.Name' as 'AcctMgrTargetDstr.Product.Name', toDate(coalesce(targets.'Period', target_actuals.'Period'), \"yyyy-MM-dd\") as 'Period', sum(target_actuals.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Actuals_Column\").asObject()}}') as 'Target_Actuals', sum(targets.'{{cell(Qty_vs_Revenue.selection, 0, \"Target_Value_Column\").asObject()}}') as 'Target_Value' ;\ntarget_attainment = group target_attainment_1 by ('Period') ;\ntarget_attainment = foreach target_attainment generate 'Period', toString(Period, \"yyyy\")+\"~~~\"+toString(Period, \"MM\") as 'Period.StartDate_Year~~~Period.StartDate_Month', toString(Period, \"yyyy\") as 'Period.StartDate_Year', toString(Period, \"MM\") as 'Period.StartDate_Month', sum('Target_Actuals') as 'Target_Actuals', sum('Target_Value') as 'Target_Value', sum('Target_Actuals')/sum('Target_Value') as 'Target_Attainment_Percentage' , (case when sum('Target_Actuals') is null then null else sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc) end)/sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Attainment_Percentage', sum(sum('Target_Actuals')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Actuals', sum(sum('Target_Value')) over ([..0] partition by all order by 'Period' asc) as 'cumulative_Target_Value' ;\n\n\n\n\n\n                                         forecasts = load \"MFG_Targets_AccountProductPeriodForecast\";\n\nforecasts = filter forecasts by 'Period.StartDate_sec_epoch' <= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} && 'Period.EndDate_sec_epoch' >= {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}};\nforecasts = filter forecasts by {{column(Products_Analysis_1.result, [\"AcctMgrTargetDstr.Product.Name\"]).asEquality('AccountProductForecast.Name')}};\nforecasts = filter forecasts by {{column(Products_Analysis_1.selection, [\"AcctMgrTargetDstr.Product.Name\"]).asEquality('AccountProductForecast.Name')}};\n\nforecast_start = foreach forecasts generate 'Id' as 'Id', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.StartDate_sec_epoch' > {{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}} then 'Period.StartDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_min_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month', 'ForecastedDailyRevenue' as 'ForecastedDailyRevenue',  'ForecastedDailyQuantity' as 'ForecastedDailyQuantity' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_end = foreach forecasts generate 'Id' as 'Id', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Year' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"yyyy\") end as 'Date_Year', case when 'Period.EndDate_sec_epoch' < {{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}} then 'Period.EndDate_Month' else toString(toDate({{coalesce(cell( Period_dates_filtered.result,0, \"Period_max_sec_epoch\"),0).asObject()}}), \"MM\") end as 'Date_Month',  'ForecastedDailyRevenue' as 'ForecastedDailyRevenue',  'ForecastedDailyQuantity' as 'ForecastedDailyQuantity' , date_to_epoch(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-\"+'Period.StartDate_Day',\"yyyy-MM-dd\")) as 'StartDate', date_to_epoch(toDate('Period.EndDate_Year'+\"-\"+'Period.EndDate_Month'+\"-\"+'Period.EndDate_Day',\"yyyy-MM-dd\")) as 'EndDate';\n forecast_for_fill = union forecast_start, forecast_end;\n forecast_for_fill = group forecast_for_fill by ('Id', 'Date_Year', 'Date_Month');\n forecast_for_fill = foreach forecast_for_fill generate 'Id', 'Date_Year', 'Date_Month', first('ForecastedDailyRevenue') as 'ForecastedDailyRevenue',  first('ForecastedDailyQuantity') as 'ForecastedDailyQuantity', first('StartDate') as 'StartDate', first('EndDate') as 'EndDate';\n Forecast_Filled = fill forecast_for_fill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n Forecast_Filled = group Forecast_Filled by ('Id', 'Date_Year', 'Date_Month');\n Forecast_Filled = foreach Forecast_Filled generate 'Id', 'Date_Year', 'Date_Month', max(first('ForecastedDailyRevenue')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'ForecastedDailyRevenue', max(first('ForecastedDailyQuantity')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'ForecastedDailyQuantity', max(first('StartDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'StartDate', max(first('EndDate')) over ([..0] partition by 'Id' order by ('Date_Year' asc, 'Date_Month' asc)) as 'EndDate', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date';\n Forecast_Filled = filter Forecast_Filled by 'Date'>='StartDate' && 'Date'<='EndDate';\n forecasts = foreach Forecast_Filled generate 'Id' as 'Id', 'Date_Year' as 'Period.EndDate_Year', 'Date_Month' as 'Period.EndDate_Month', month_days(toDate('Date'))*'ForecastedDailyRevenue' as 'ForecastedRevenueFinal', month_days(toDate('Date'))*'ForecastedDailyQuantity' as 'ForecastedQuantityFinal';\n forecasts = group forecasts by ('Period.EndDate_Year', 'Period.EndDate_Month');\nforecasts = foreach forecasts generate 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ForecastedRevenueFinal') as 'ForecastAmount', sum(sum('ForecastedRevenueFinal')) over ([..0] partition by all order by 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' asc) as 'ForecastAmount_Cumulative', sum('ForecastedQuantityFinal') as 'ForecastQuantity', sum(sum('ForecastedQuantityFinal')) over ([..0] partition by all order by 'Period.EndDate_Year'+\"~~~\"+'Period.EndDate_Month' asc) as 'ForecastQuantity_Cumulative';                                                                \n\n\ntarget_attainment_w_forecasts = cogroup target_attainment by ('Period.StartDate_Year~~~Period.StartDate_Month') left, forecasts by  ('StartDate_Year~~~StartDate_Month');\ntarget_attainment_w_forecasts = foreach target_attainment_w_forecasts generate target_attainment.'Period.StartDate_Year~~~Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', sum(target_attainment.'Target_Actuals') as 'Target_Actuals', sum(target_attainment.'Target_Value') as 'Target_Value', sum(forecasts.'{{cell(Qty_vs_Revenue.selection, 0, \"Value_Monthly\").asObject()}}') as 'ForecastAmount' ;\ntarget_attainment_w_forecasts = foreach target_attainment_w_forecasts generate 'Period.StartDate_Year~~~Period.StartDate_Month', {{cell(Qty_vs_Revenue.selection, 0, \"Products_monthly_line_chart_generate\").asObject()}};","receiveFacetSource":{"mode":"exclude","steps":["AcctMgrTargetDstr_Ac_1","AcctMgrTargetDstr_Ac_2","AcctMgrTargetDstr_Ac_3","AcctMgrTargetDstr_Ac_4","AcctMgrTarget_Parent_1"]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":false,"predictiveLine":{"color":"#8932ED","label":"TODAY"},"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"label":{"data":"LY Target","type":"static"},"value":{"data":"undefined","type":"static"}}],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":true,"showTitle":true,"showAxis":true,"title":"Revenue","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"}}},"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1},"widgets":{"text_18":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#FFFFFF","align":"center"},"insert":"Choose KPI:"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_19":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#FFFFFF","align":"center"},"insert":"Group by:"}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_13":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"link_12":{"parameters":{"destinationLink":{"name":"38689fed-7c12-4666-a08a-df870974b3f7"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Cumulative","textAlignment":"center","textColor":"#335779"},"type":"link"},"text_16":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_10":{"parameters":{"destinationLink":{"name":"e8582d73-ddb9-4a8c-af09-ae0bcd9d4e6b"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Month over Month","textAlignment":"center","textColor":"#335779"},"type":"link"},"text_15":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_11":{"parameters":{"destinationLink":{"name":"38689fed-7c12-4666-a08a-df870974b3f7"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Month over Month","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"text_10":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"left"},"insert":"Target Increase > 30%"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_12":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#335779","align":"left"},"insert":"Revenue Distribution"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_11":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"left"},"insert":"New Targets"}]},"interactions":[],"showActionMenu":false},"type":"text"},"table_10":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"showActionMenu":true,"showRowIndexColumn":false,"step":"New_Targets_Table_1","subtotals":true,"verticalPadding":8},"type":"table"},"container_1":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_3":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"chart_9":{"parameters":{"autoFitMode":"keepLabels","showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["cumulative_Target_Actuals_Quantity","cumulative_Target_Quantity","ForecastQuantity_Cumulative"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["Period.StartDate_Year~~~Period.StartDate_Month"]},"description":"Date (Year - Month) : [Period.StartDate_Year~~~Period.StartDate_Month]"}},"missingValue":"connect","visualizationType":"time","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":false,"showAxis":true,"referenceLines":[{"time":{"data":"{{cell(TODAY_reference_line_1.result, 0, \"Current_Year~~~Current_Month\").asObject()}}","type":"static"},"label":{"data":"TODAY","type":"static"}}],"title":""},"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"label":{"data":"LY Target","type":"static"},"value":{"data":"undefined","type":"static"}}],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"Revenue","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","step":"Cumulative_Accounts__1","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"container_4":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_3":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"right"},"insert":"Actual Revenue"}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_6":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"dual","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Target_Actuals","Target_Value","Target_Attainment_Percentage","ForecastAmount","LY_Target_Actuals","Projections"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["Period.StartDate_Year~~~Period.StartDate_Month"]},"description":"Date (Year - Month) : [Period.StartDate_Year~~~Period.StartDate_Month]"}},"missingValue":"connect","visualizationType":"time-combo","timeAxis":{"showTitle":false,"predictiveLine":{"color":"#8932ED","label":"TODAY"},"showAxis":true,"title":""},"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"plots":{"Target_Actuals":{"mark":"bar"},"Target_Attainment_Percentage":{"mark":"line"},"Projections":{"mark":"line"},"ForecastAmount":{"mark":"bar"},"LY_Target_Actuals":{"mark":"bar"},"Target_Value":{"mark":"bar"}},"columnMap":{"timeAxis":["Period.StartDate_Year~~~Period.StartDate_Month"],"trellis":[],"plots":["Target_Attainment_Percentage","Target_Actuals","Target_Value","ForecastAmount","LY_Target_Actuals","Projections"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":false,"showAxis":true,"referenceLines":[{"label":{"data":"Target","type":"static"},"value":{"data":{"field":"Target_Value","sourceType":"result","step":"Attainment_KPIs_1"},"type":"dynamic"}},{"label":{"data":"LY Target","type":"static"},"value":{"data":{"field":"Target_Value","sourceType":"result","step":"Attainment_KPI_for_LY"},"type":"dynamic"}}],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"Attainment (%)","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"light","step":"monthly_target_attainment_chart","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"text_2":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"right"},"insert":"Target Revenue"}]},"interactions":[],"showActionMenu":false},"type":"text"},"container_7":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_5":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Current Attainment"}]},"interactions":[],"showActionMenu":false},"type":"text"},"container_8":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"chart_8":{"parameters":{"bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"autoZoom":true,"highColor":"#1674D9","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Target_Actuals"],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["AcctMgrTargetDstr.Account.BillingState"]},"description":"State: [AcctMgrTargetDstr.Account.BillingState]"}},"projectionType":"AlbersUSA","lowColor":"#C5DBF7","visualizationType":"choropleth","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"showActionMenu":true,"theme":"wave","step":"Geographical_Accounts_Dstr_1","map":"US States","applyConditionalFormatting":true},"type":"chart"},"chart_7":{"parameters":{"autoFitMode":"none","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Target_Value","Target_Actuals","Target_Attainment_Percentage","Projected_Target_Actuals"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["AcctMgrTargetDstr.Account.UniqueAccountName"]},"description":"Account :  [AcctMgrTargetDstr.Account.UniqueAccountName]"}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"light","step":"Accounts_Analysis_1","compactDecimalDigits":-1,"applyConditionalFormatting":true,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"text_4":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#335779","align":"left"},"insert":"Overview"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_7":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"right"},"insert":"Previous Year Targets"}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_2":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"dual","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["cumulative_Target_Actuals","cumulative_Target_Value","cumulative_Target_Attainment_Percentage","ForecastAmount_Cumulative","LY_Target_Actuals","Projections"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["Period.StartDate_Year~~~Period.StartDate_Month"]},"description":"Date (Year - Month) : [Period.StartDate_Year~~~Period.StartDate_Month]"}},"missingValue":"connect","visualizationType":"time-combo","timeAxis":{"showTitle":false,"predictiveLine":{"color":"#8932ED","label":"TODAY"},"showAxis":true,"title":""},"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"plots":{"cumulative_Target_Value":{"mark":"bar"},"cumulative_Target_Attainment_Percentage":{"mark":"line"},"Projections":{"mark":"line"},"LY_Target_Actuals":{"mark":"bar"},"cumulative_Target_Actuals":{"mark":"bar"},"ForecastAmount_Cumulative":{"mark":"bar"}},"columnMap":{"timeAxis":["Period.StartDate_Year~~~Period.StartDate_Month"],"trellis":[],"plots":["cumulative_Target_Attainment_Percentage","cumulative_Target_Actuals","cumulative_Target_Value","ForecastAmount_Cumulative","LY_Target_Actuals","Projections"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":false,"showAxis":true,"referenceLines":[{"label":{"data":"Target","type":"static"},"value":{"data":{"field":"Target_Value","sourceType":"result","step":"Attainment_KPIs_1"},"type":"dynamic"}},{"label":{"data":"LY Target","type":"static"},"value":{"data":{"field":"Target_Value","sourceType":"result","step":"Attainment_KPI_for_LY"},"type":"dynamic"}}],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"Attainment (%)","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"light","step":"cumulative_target_attainment_chart","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"chart_1":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["sum_Value"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":true,"showMeasures":false,"dimensions":["Group"]},"description":"Revenue: [sum_Value]"}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"dark","step":"Target_Value_and_Tar_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":false,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"text_6":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"48px","color":"#E6ECF2","align":"center"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_4":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"dual","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"vbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Number of Accounts","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"light","step":"Yearly_Analysis_of_Targets_1","compactDecimalDigits":-1,"applyConditionalFormatting":true,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"text_9":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#335779","align":"left"},"insert":" Highlights"}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_3":{"parameters":{"autoFitMode":"keepLabels","max":100,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["cumulative_Target_Attainment_Percent"],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":["Period","Period.StartDate_Year~~~Period.StartDate_Month","Attainment Type"]}}},"visualizationType":"polargauge","medium":33,"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":false,"size":[100,20],"enable":true,"type":"x","parameters":{},"chartsPerLine":4},"icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"Attainment Type"}},"inner":80,"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"dark","step":"Attainments_Guage_KP_1","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"text_8":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"right"},"insert":"Projection"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_1":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":"My Targets"}]},"interactions":[],"showActionMenu":false},"type":"text"},"number_3":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Target_Attainment_Percentage","numberColor":"#FFFFFF","numberSize":32,"showActionMenu":true,"step":"Attainment_KPIs_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_2":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Target_Actuals","numberColor":"#FFFFFF","numberSize":32,"showActionMenu":true,"step":"Attainment_KPIs_1","textAlignment":"right","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_1":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Target_Value","numberColor":"#FFFFFF","numberSize":32,"showActionMenu":true,"step":"Attainment_KPIs_1","textAlignment":"right","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"chart_15":{"parameters":{"autoFitMode":"keepLabels","showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Target_Actuals","Target_Value","ForecastAmount"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["Period.StartDate_Year~~~Period.StartDate_Month"]},"description":"Date (Year - Month) : [Period.StartDate_Year~~~Period.StartDate_Month]"}},"missingValue":"connect","visualizationType":"time","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":false,"showAxis":true,"referenceLines":[{"time":{"data":"{{cell(TODAY_reference_line_1.result, 0, \"Current_Year~~~Current_Month\").asObject()}}","type":"static"},"label":{"data":"TODAY","type":"static"}}],"title":""},"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"label":{"data":"LY Target","type":"static"},"value":{"data":"undefined","type":"static"}}],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"Revenue","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","step":"Cumulative_Accounts__2","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"listselector_10":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"measureField":"none","showActionMenu":true,"step":"AcctMgrTargetDstr_Ac_4","title":"Geo"},"type":"listselector"},"image_2":{"parameters":{"alignmentX":"center","alignmentY":"center","fit":"fitwidth","image":{"name":"manufacturing_app_iconpng114","namespace":""},"interactions":[]},"type":"image"},"chart_14":{"parameters":{"autoFitMode":"none","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Target_Value","Target_Actuals","Target_Attainment_Percentage","Projected_Target_Actuals"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["AcctMgrTargetDstr.Product.Name"]},"description":"Product :  [AcctMgrTargetDstr.Product.Name]"}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","step":"Products_Analysis_1","compactDecimalDigits":-1,"applyConditionalFormatting":true,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"chart_12":{"parameters":{"autoFitMode":"keepLabels","showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Target_Actuals","Target_Value","ForecastAmount"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["Period.StartDate_Year~~~Period.StartDate_Month"]},"description":"Date (Year - Month) : [Period.StartDate_Year~~~Period.StartDate_Month]"}},"missingValue":"connect","visualizationType":"time","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":false,"showAxis":true,"referenceLines":[{"time":{"data":"{{cell(TODAY_reference_line_1.result, 0, \"Current_Year~~~Current_Month\").asObject()}}","type":"static"},"label":{"data":"TODAY","type":"static"}}],"title":""},"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":true,"columnMap":{"split":[],"timeAxis":["Period.StartDate_Year~~~Period.StartDate_Month"],"trellis":[],"plots":["Target_Actuals","Target_Value","ForecastAmount"]},"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"label":{"data":"LY Target","type":"static"},"value":{"data":"undefined","type":"static"}}],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"Revenue","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","step":"OverTime_Accounts_Line_Chart_1","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"chart_11":{"parameters":{"autoFitMode":"keepLabels","showPoints":true,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["cumulative_Target_Actuals","cumulative_Target_Value","ForecastAmount_Cumulative"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["Period.StartDate_Year~~~Period.StartDate_Month"]},"description":"Date (Year - Month) : [Period.StartDate_Year~~~Period.StartDate_Month]"}},"missingValue":"connect","visualizationType":"time","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":false,"showAxis":true,"referenceLines":[{"time":{"data":"{{cell(TODAY_reference_line_1.result, 0, \"Current_Year~~~Current_Month\").asObject()}}","type":"static"},"label":{"data":"TODAY","type":"static"}}],"title":""},"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":true,"columnMap":{"split":[],"timeAxis":["Period.StartDate_Year~~~Period.StartDate_Month"],"trellis":[],"plots":["cumulative_Target_Actuals","cumulative_Target_Value","ForecastAmount_Cumulative"]},"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"referenceLines":[{"label":{"data":"LY Target","type":"static"},"value":{"data":"undefined","type":"static"}}],"title":"Revenue","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"Revenue","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","step":"Cumulative_Accounts_Line_Chart_1","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"chart_10":{"parameters":{"autoFitMode":"none","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":true,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"highColor":"#009DDF","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["sum_TotalPrice"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":false,"dimensions":["Product.Name","Order.EffectiveDate_Year~~~Order.EffectiveDate_Month"]},"description":"Order Date : [Order.EffectiveDate_Year~~~Order.EffectiveDate_Month]\n\nProduct :  [Product.Name]\n\nRevenue : [sum_TotalPrice]"}},"lowColor":"#E2F4FC","visualizationType":"heatmap","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"showActionMenu":true,"x":{"showTitle":true,"showAxis":true,"title":"Date (Year - Month)"},"y":{"showTitle":false,"showAxis":true,"title":""},"theme":"wave","step":"Products_Over_Time_For_Accounts_1","applyConditionalFormatting":true},"type":"chart"},"text_32":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_31":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_33":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#335779","align":"left"},"insert":"Year-Over-Year Targets"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_30":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"listselector_7":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"measureField":"count","showActionMenu":true,"step":"AcctMgrTarget_Parent_1","title":"Account"},"type":"listselector"},"listselector_6":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"measureField":"none","showActionMenu":true,"step":"AcctMgrTargetDstr_Ac_1","title":"Parent Account"},"type":"listselector"},"listselector_9":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"measureField":"none","showActionMenu":true,"step":"AcctMgrTargetDstr_Ac_3","title":"Industry"},"type":"listselector"},"listselector_8":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"measureField":"none","showActionMenu":true,"step":"AcctMgrTargetDstr_Ac_2","title":"Account Type"},"type":"listselector"},"listselector_3":{"parameters":{"compact":false,"displayMode":"filter","displayTemplate":"[AcctMgrTarget.Period.FullyQualifiedLabel]","exploreLink":false,"filterStyle":{"titleColor":"#C6D3E1","valueColor":"#FFFFFF"},"instant":true,"measureField":"none","showActionMenu":true,"step":"Fiscal_Year_Selection_1","title":"Fiscal Year"},"type":"listselector"},"text_29":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"listselector_2":{"parameters":{"compact":false,"displayMode":"filter","displayTemplate":"[TargetPeriodName]","exploreLink":false,"filterStyle":{"titleColor":"#C6D3E1","valueColor":"#FFFFFF"},"instant":false,"measureField":"none","showActionMenu":true,"step":"TargetPeriodName_1","title":"Target Period"},"type":"listselector"},"text_28":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"listselector_5":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"measureField":"none","showActionMenu":true,"step":"AcctMgrTargetDstr_Pr_2","title":"Product Name"},"type":"listselector"},"listselector_4":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"measureField":"none","showActionMenu":true,"step":"AcctMgrTargetDstr_Pr_1","title":"Product Family"},"type":"listselector"},"link_3":{"parameters":{"destinationLink":{"name":"c0dee536-d646-423b-b2ab-986e9a4672ee"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Month over Month","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"text_25":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_4":{"parameters":{"destinationLink":{"name":"96fb1d7e-ae0d-4b51-bd1b-46fee7880e63"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Cumulative","textAlignment":"center","textColor":"#335779"},"type":"link"},"text_24":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"10px","color":"#091A3E","align":"right"},"insert":"Logged In: [Full_Name]"}],"values":{"Full_Name":{"field":"Name","sourceType":"result","step":"Logged_In_User"}}},"interactions":[],"showActionMenu":true},"type":"text"},"link_1":{"parameters":{"destinationLink":{"name":"96fb1d7e-ae0d-4b51-bd1b-46fee7880e63"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Cumulative","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"text_27":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#335779","align":"right"},"insert":"Product Targets"}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_2":{"parameters":{"destinationLink":{"name":"c0dee536-d646-423b-b2ab-986e9a4672ee"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Month over Month","textAlignment":"center","textColor":"#335779"},"type":"link"},"text_21":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#335779","align":"right"},"insert":"View"}]},"interactions":[],"showActionMenu":false},"type":"text"},"navigation_1":{"parameters":{"fontSize":16,"selectedTab":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderWidth":2,"textColor":"rgb(52, 127, 219)"},"tabCount":20,"textColor":"#335779"},"type":"navigation"},"text_20":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#335779","align":"left"},"insert":"    Product Performance"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_22":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#335779","align":"right"},"insert":"View"}]},"interactions":[],"showActionMenu":false},"type":"text"},"link_9":{"parameters":{"destinationLink":{"name":"38689fed-7c12-4666-a08a-df870974b3f7"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Cumulative","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"pillbox_2":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"#C6D3E1","borderEdges":[],"borderWidth":1,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"Show_Projections_Toggle_1","textColor":"rgb(51, 87, 121)"},"type":"pillbox"},"link_7":{"parameters":{"destinationLink":{"name":"4f00f7b0-9462-42dc-b4f9-9cda24f3a7fb"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Month over Month","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"pillbox_1":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"#C6D3E1","borderEdges":[],"borderWidth":1,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"Show_LY_Toggle_1","textColor":"rgb(51, 87, 121)"},"type":"pillbox"},"table_6":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"showActionMenu":true,"showRowIndexColumn":false,"step":"Changed_Targets_Table_1","subtotals":true,"verticalPadding":8},"type":"table"},"link_8":{"parameters":{"destinationLink":{"name":"d958f6e8-eb02-468f-87e9-84563865def4"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Cumulative","textAlignment":"center","textColor":"#335779"},"type":"link"},"pillbox_4":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"#C6D3E1","borderEdges":[],"borderWidth":1,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"View_FY_vs_LY_Toggle_1","textColor":"rgb(51, 87, 121)"},"type":"pillbox"},"link_5":{"parameters":{"destinationLink":{"name":"4f00f7b0-9462-42dc-b4f9-9cda24f3a7fb"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Month over Month","textAlignment":"center","textColor":"#335779"},"type":"link"},"link_6":{"parameters":{"destinationLink":{"name":"d958f6e8-eb02-468f-87e9-84563865def4"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Cumulative","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"pillbox_3":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"#C6D3E1","borderEdges":[],"borderWidth":1,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"Geography_actuals_vs_attainment_1","textColor":"rgb(51, 87, 121)"},"type":"pillbox"},"pillbox_6":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"#C6D3E1","borderEdges":[],"borderWidth":1,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"Qty_vs_Revenue","textColor":"rgb(51, 87, 121)"},"type":"pillbox"},"pillbox_5":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"rgb(52, 127, 219)","borderColor":"#C6D3E1","borderEdges":[],"borderWidth":1,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"Against_FY_or_LY_for_Products","textColor":"rgb(51, 87, 121)"},"type":"pillbox"},"listselector_1":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#C6D3E1","valueColor":"#FFFFFF"},"instant":false,"measureField":"none","showActionMenu":false,"step":"AcctMgrTarget_Name_1","title":"Target"},"type":"listselector"}}}