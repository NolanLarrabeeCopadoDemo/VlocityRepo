{"dataSourceLinksInfo":{"enableAutomaticLinking":false,"excludeRelationships":[],"links":[{"fields":[{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Owner.Name"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Owner.Name"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Owner.Name"},{"dataSourceName":"MFG_OpportunityLineItem2","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Opportunity.Owner.Name"},{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Owner.Name"}],"label":"Owner Name","name":"Link_3050"},{"fields":[{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Parent"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Parent"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Parent"},{"dataSourceName":"MFG_OpportunityLineItem2","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Parent"},{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Parent"}],"label":"Account Parent","name":"Link_13044"},{"fields":[{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"AccountProductForecast.Name"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Product.Name"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.Product.Name"},{"dataSourceName":"MFG_Product2","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Name"},{"dataSourceName":"MFG_OpportunityLineItem2","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Product.Name"}],"label":"Product Name","name":"Link_3313"},{"fields":[{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Product.Family"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Product.Family"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.Product.Family"},{"dataSourceName":"MFG_OpportunityLineItem2","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Product.Family"},{"dataSourceName":"MFG_Product2","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Family"}],"label":"Product Family","name":"Link_1299"},{"fields":[{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Name"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.SalesAgreement.Name"}],"label":"Sales Agreement","name":"Link_7609"},{"fields":[{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Name"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Name"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Name"},{"dataSourceName":"MFG_OpportunityLineItem2","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Name"},{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Name"}],"label":"Account Name","name":"Link_4710"}]},"filters":[{"dataset":{"name":"MFG_SalesAgreementProductSchedule"},"dependent":true,"fields":["SalesAgreementProduct.SalesAgreement.Account.Type"],"locked":false,"operator":"in"},{"dataset":{"name":"MFG_SalesAgreementProductSchedule"},"dependent":true,"fields":["SalesAgreementProduct.SalesAgreement.Account.Name"],"locked":false,"operator":"in"},{"dataset":{"name":"MFG_SalesAgreementProductSchedule"},"dependent":true,"fields":["SalesAgreementProduct.Product.Name"],"locked":false,"operator":"in"},{"dataset":{"name":"MFG_SalesAgreementProductSchedule"},"dependent":true,"fields":["SalesAgreementProduct.Product.Family"],"locked":false,"operator":"in"},{"dataset":{"name":"MFG_SalesAgreementProductSchedule"},"dependent":true,"fields":["SalesAgreementProduct.SalesAgreement.Account.Parent"],"locked":false,"operator":"in"}],"gridLayouts":[{"maxWidth":1500,"name":"Default","numColumns":46,"pages":[{"label":"Forecast Performance","name":"dcc70e5d-3908-4426-8ac5-f99fe142f5c1","navigationHidden":false,"widgets":[{"colspan":9,"column":0,"name":"container_3","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_1","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":3,"name":"text_1","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#FFFFFF","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":9,"column":9,"name":"link_5","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":9,"column":18,"name":"link_4","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":7,"column":27,"name":"link_3","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":34,"name":"link_2","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":4,"column":42,"name":"container_1","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":46,"column":0,"name":"container_12","row":7,"rowspan":6,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":31,"name":"listselector_7","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["bottom"],"borderRadius":4,"borderWidth":2}},{"colspan":4,"column":36,"name":"listselector_12","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":2}},{"colspan":46,"column":0,"name":"container_11","row":13,"rowspan":7,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":1,"name":"text_10","row":14,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":8,"name":"text_13","row":14,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":15,"name":"text_15","row":14,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":22,"name":"text_7","row":14,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":1,"name":"number_6","row":16,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":8,"name":"number_10","row":16,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":15,"name":"number_3","row":16,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":22,"name":"number_4","row":16,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":39,"name":"pillbox_2","row":15,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":2}},{"colspan":7,"column":31,"name":"link_1","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":7,"column":38,"name":"link_6","row":21,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":44,"column":1,"name":"container_4","row":24,"rowspan":45,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":34,"name":"pillbox_4","row":25,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":42,"column":2,"name":"chart_3","row":29,"rowspan":15,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":42,"column":2,"name":"chart_2","row":45,"rowspan":23,"widgetStyle":{"borderEdges":[]}},{"colspan":44,"column":1,"name":"container_2","row":74,"rowspan":43,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(4, 29, 64)","borderEdges":[],"borderRadius":0,"borderWidth":8}},{"colspan":18,"column":2,"name":"text_2","row":75,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":33,"name":"pillbox_1","row":75,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":2}},{"colspan":23,"column":2,"name":"text_3","row":78,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":5,"name":"listselector_9","row":81,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":9,"column":32,"name":"listselector_10","row":81,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":42,"column":2,"name":"chart_4","row":84,"rowspan":32,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":0,"name":"container_13","row":120,"rowspan":44,"widgetStyle":{"backgroundColor":"rgb(255, 255, 255)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":1,"name":"text_40","row":121,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":17,"column":1,"name":"text_6","row":124,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":44,"column":1,"name":"table_4","row":126,"rowspan":37,"widgetStyle":{"borderEdges":[]}},{"colspan":46,"column":0,"name":"container_7","row":71,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":0,"name":"container_8","row":117,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"container_9","row":74,"rowspan":43,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":45,"name":"container_10","row":74,"rowspan":43,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":23,"column":2,"name":"text_12","row":25,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":41,"name":"dateselector_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":1,"name":"listselector_8","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":6,"name":"listselector_11","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":11,"name":"listselector_13","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":16,"name":"listselector_14","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":21,"name":"listselector_15","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":26,"name":"listselector_16","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}}]},{"label":"Forecast Composition","name":"bbb4a1b6-dcd5-4dda-ae27-534ca9e32ded","navigationHidden":false,"widgets":[{"colspan":9,"column":0,"name":"container_3","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_1","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":3,"name":"text_1","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#FFFFFF","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":9,"column":9,"name":"link_5","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":9,"column":18,"name":"link_4","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":7,"column":27,"name":"link_3","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":8,"column":34,"name":"link_2","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(0, 112, 210)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":4}},{"colspan":4,"column":42,"name":"container_1","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":46,"column":0,"name":"container_12","row":7,"rowspan":6,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":0,"name":"container_11","row":13,"rowspan":7,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":1,"name":"text_10","row":14,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":8,"name":"text_13","row":14,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":15,"name":"text_15","row":14,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":22,"name":"text_7","row":14,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":1,"name":"number_6","row":16,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":8,"name":"number_10","row":16,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":15,"name":"number_3","row":16,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":22,"name":"number_4","row":16,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":39,"name":"pillbox_2","row":15,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":2}},{"colspan":7,"column":31,"name":"link_8","row":21,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":38,"name":"link_7","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":44,"column":1,"name":"container_4","row":24,"rowspan":37,"widgetStyle":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":33,"name":"pillbox_1","row":25,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":2}},{"colspan":29,"column":15,"name":"chart_5","row":29,"rowspan":31,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":2,"name":"chart_1","row":29,"rowspan":31,"widgetStyle":{"borderEdges":[]}},{"colspan":44,"column":1,"name":"container_2","row":64,"rowspan":35,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(4, 29, 64)","borderEdges":[],"borderRadius":0,"borderWidth":8}},{"colspan":12,"column":2,"name":"text_5","row":65,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":30,"column":14,"name":"chart_7","row":67,"rowspan":31,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":3,"name":"text_8","row":70,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":3,"name":"number_1","row":74,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":3,"name":"text_9","row":79,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":3,"name":"number_2","row":83,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":3,"name":"text_11","row":88,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":3,"name":"number_5","row":92,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":44,"column":1,"name":"container_5","row":102,"rowspan":35,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(4, 29, 64)","borderEdges":[],"borderRadius":0,"borderWidth":8}},{"colspan":20,"column":24,"name":"pillbox_3","row":103,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":42,"column":2,"name":"table_1","row":107,"rowspan":29,"widgetStyle":{"borderEdges":[]}},{"colspan":46,"column":0,"name":"container_13","row":140,"rowspan":44,"widgetStyle":{"backgroundColor":"rgb(255, 255, 255)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":1,"name":"text_40","row":141,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":17,"column":1,"name":"text_6","row":144,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":44,"column":1,"name":"table_4","row":146,"rowspan":37,"widgetStyle":{"borderEdges":[]}},{"colspan":1,"column":0,"name":"container_9","row":64,"rowspan":35,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":0,"name":"container_7","row":61,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":45,"name":"container_10","row":102,"rowspan":35,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":0,"name":"container_8","row":99,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":0,"name":"container_14","row":102,"rowspan":35,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":46,"column":0,"name":"container_15","row":137,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":45,"name":"container_16","row":64,"rowspan":35,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":23,"column":2,"name":"text_14","row":25,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":41,"name":"dateselector_3","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":1,"name":"listselector_8","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":6,"name":"listselector_11","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":11,"name":"listselector_13","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":16,"name":"listselector_14","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":21,"name":"listselector_15","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":26,"name":"listselector_16","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":4,"column":31,"name":"listselector_7","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["bottom"],"borderRadius":4,"borderWidth":2}},{"colspan":4,"column":36,"name":"listselector_12","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":2}}]}],"rowHeight":"fine","selectors":[],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"rgb(4, 29, 64)","cellSpacingX":0,"cellSpacingY":0,"fit":"original","gutterColor":"#C5D3E0"},"version":1.0}],"layouts":[],"steps":{"Owner_Name_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_Account4"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Owner.Name\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"static_measure_2":{"broadcastFacet":true,"columns":{"Display":{"type":"string"}},"label":"","selectMode":"singlerequired","start":"{\"Display\":[\"FORECAST\"]}","type":"staticflex","values":["{\"Display\":\"ACTUALS (ORDERS)\",\"Amount\":\"ActualAmount\",\"Quantity\":\"ActualQuantity\"}","{\"Display\":\"FORECAST\",\"Amount\":\"ForecastAmount\",\"Quantity\":\"ForecastQuantity\"}","{\"Display\":\"ACTUALS VS FORECAST\",\"Amount\":\"ForecastAmountGap\",\"Quantity\":\"ForecastQuantityGap\"}","{\"Display\":\"ATTAINMENT\",\"Amount\":\"ForecastAmountAttainment\",\"Quantity\":\"ForecastQuantityAttainment\"}"]},"MoM_vs_Cumulative":{"broadcastFacet":true,"columns":{"Display":{"type":"string"}},"label":"MoM vs Cumulative","selectMode":"singlerequired","start":"{\"display\":[\"Monthly\"]}","type":"staticflex","values":["{\"display\":\"Monthly\",\"projection_amounts\":\"'ActualAmount' as 'DerivedActualAmountOrders', 'PlannedAmount' as 'PlannedAmount', 'ForecastAmount' as 'ForecastAmount'\",\"projection_forecastamountgap\":\"'ForecastAmountGap_MoM'\",\"projection_quantity\":\"'ActualQuantity' as 'ActualQuantityOrders', 'PlannedQuantity' as 'PlannedQuantity', 'ForecastQuantity' as 'ForecastQuantity'\",\"projection_forecastquantitygap\":\"'ForecastQuantityGap_MoM'\"}","{\"display\":\"Cumulative\",\"projection_amounts\":\"'ActualAmount_Cumulative' as 'DerivedActualAmountOrders_Cumulative', 'PlannedAmount_Cumulative' as 'PlannedAmount_Cumulative', 'ForecastAmount_Cumulative' as 'ForecastAmount_Cumulative'\",\"projection_forecastamountgap\":\"'ForecastAmountGap_Cumulative'\",\"projection_quantity\":\"'ActualQuantity_Cumulative' as 'ActualQuantityOrders_Cumulative', 'PlannedQuantity_Cumulative' as 'PlannedQuantity_Cumulative', 'ForecastQuantity_Cumulative' as 'ForecastQuantity_Cumulative'\",\"projection_forecastquantitygap\":\"'ForecastQuantityGap_Cumulative'\"}"]},"Date_Selector_1":{"broadcastFacet":false,"datasets":[{"name":"MFG_AccountProductPeriodForecast1"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"StartDate\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","start":"[[[\"fiscal_year\",0],[\"fiscal_year\",0]]]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Forecast_Trend":{"broadcastFacet":true,"groups":[],"label":"Forecast Trend","numbers":[],"query":"all_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'Forecasted Amount'/'SalesPrice' as 'Forecasted Quantity';\nresult = group FilledData by ('Id','Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year', 'Date_Month', sum('Forecasted Amount') as 'Forecasted Revenue', sum('Forecasted Quantity') as 'Forecasted Quantity';\nresult = group result by ('Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', sum('Forecasted Revenue') as 'ForecastAmount', sum(sum('Forecasted Revenue')) over ([..0] partition by all order by 'Date_Year'+\"~~~\"+'Date_Month' asc) as 'ForecastAmount_Cumulative', sum('Forecasted Quantity') as 'ForecastQuantity', sum(sum('Forecasted Quantity')) over ([..0] partition by all order by 'Date_Year'+\"~~~\"+'Date_Month' asc) as 'ForecastQuantity_Cumulative';\nresult = foreach result generate 'StartDate_Year~~~StartDate_Month', {{column(Qty_vs_Amount_1.selection, [\"cumulative_forecast_col\"]).asObject()}} as {{column(Qty_vs_Amount_1.selection, [\"cumulative_forecast_col\"]).asObject()}}, {{column(Qty_vs_Amount_1.selection, [\"forecast_col\"]).asObject()}} as {{column(Qty_vs_Amount_1.selection, [\"forecast_col\"]).asObject()}};","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Time (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"plots":{"cumm_Amount":{"mark":"line"},"cumm_Amount_low_95":{"mark":"line"},"Amount":{"mark":"bar"},"cumm_Planned_Revenue":{"mark":"line"},"cumm_Amount_high_95":{"mark":"line"}},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Actual_Forecast_Planned":{"broadcastFacet":true,"groups":[],"label":"Actual vs Forecast vs Planned","numbers":[],"query":"all_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_schedule = load \"MFG_SalesAgreementProductSchedule\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_schedule = filter all_slaps_schedule by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nall_slaps_schedule = filter all_slaps_schedule by 'isValidProductSchedule' == \"true\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_schedule = filter all_slaps_schedule by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_schedule = filter all_slaps_schedule by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount', 1 as 'Type';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 2 as 'Type';\nall_slaps_schedule = foreach all_slaps_schedule generate 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'SalesPrice' as 'SalesPrice', 'DiscountPercentage' as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'PlannedAmountFinal' as 'ForecastedAmountFinal', 'PlannedDailyAmount' as 'ForecastedDailyAmount', 3 as 'Type';\nvalid_slaps = union all_slaps_order, all_slaps_forecast, all_slaps_schedule;\nall_slaps_forecast = union all_slaps_forecast, all_slaps_schedule;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'Type' as 'Type',  'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'Type' as 'Type', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', 'Type' as 'Type', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Type' as 'Type', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', min(first('Type')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Type', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Type' as 'Type', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nFilledData = foreach FilledData generate 'Id' as 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', case when 'Type' == 2 then 'Forecasted Amount' else 0 end as 'Forecasted Amount', case when 'Type' == 3 then 'Forecasted Amount' else 0 end as 'Planned Amount';\nFilledData = foreach FilledData generate 'Id' as 'Id', 'Date_Year', 'Date_Month', 'Actual Amount' as 'Actual Amount', 'Actual Amount'/'SalesPrice' as 'ActualQuantity', 'Forecasted Amount' as 'Forecasted Amount', 'Forecasted Amount'/'SalesPrice' as 'ForecastQuantity', 'Planned Amount' as 'Planned Amount', 'Planned Amount'/'SalesPrice' as 'PlannedQuantity';\nresult = group FilledData by ('Id','Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actual Amount') as 'ActualAmount', sum('Forecasted Amount') as 'ForecastAmount', sum('Planned Amount') as 'PlannedAmount', sum('ActualQuantity') as 'ActualQuantity', sum('PlannedQuantity') as 'PlannedQuantity', sum('ForecastQuantity') as 'ForecastQuantity';\nresult = group result by ('StartDate_Year~~~StartDate_Month');\nresult = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount') as 'PlannedAmount', sum('ForecastAmount') as 'ForecastAmount', sum(sum('ActualAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualAmount_Cumulative', sum(sum('PlannedAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedAmount_Cumulative', sum(sum('ForecastAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastAmount_Cumulative', sum('ActualQuantity') as 'ActualQuantity', sum('PlannedQuantity') as 'PlannedQuantity', sum('ForecastQuantity') as 'ForecastQuantity', sum(sum('ActualQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualQuantity_Cumulative', sum(sum('PlannedQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedQuantity_Cumulative', sum(sum('ForecastQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastQuantity_Cumulative';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', {{column(MoM_vs_Cumulative.selection, column(Qty_vs_Amount_1.selection, [\"measure_MoM_Cumulative\"])).asObject()}};\n result = order result by 'StartDate_Year~~~StartDate_Month' asc;\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Time (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"plots":{"cumm_Amount":{"mark":"line"},"cumm_Amount_low_95":{"mark":"line"},"Amount":{"mark":"bar"},"cumm_Planned_Revenue":{"mark":"line"},"cumm_Amount_high_95":{"mark":"line"}},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Qty_vs_Amount_1":{"broadcastFacet":false,"columns":{"Display":{"type":"string"}},"label":"Qty vs Amount","selectMode":"singlerequired","start":"{\"display\":[\"Quantity\"]}","type":"staticflex","values":["{\"display\":\"Quantity\",\"time_toggle_actuals\":\"actuals_quantity_cal\",\"time_toggle_planned\":\"planned_quantity_cal\",\"realization_col\":\"Quantity_Demand_Realisation\",\"actuals_col\":\"ActualQuantity\",\"planned_col\":\"PlannedQuantity\",\"forecast_col\":\"ForecastQuantity\",\"opportunity_col\":\"OpportunityQuantity\",\"cumulative_forecast_col\":\"ForecastQuantity_Cumulative\",\"static_measure\":\"Quantity\",\"measure_MoM_Cumulative\":\"projection_quantity\",\"forecastgap_MoM_Cumulative\":\"projection_forecastquantitygap\"}","{\"display\":\"Revenue\",\"time_toggle_actuals\":\"actuals_cal\",\"time_toggle_planned\":\"planned_cal\",\"realization_col\":\"Revenue_Demand_Realisation\",\"actuals_col\":\"ActualAmount\",\"planned_col\":\"PlannedAmount\",\"forecast_col\":\"ForecastAmount\",\"opportunity_col\":\"OpportunityAmount\",\"cumulative_forecast_col\":\"ForecastAmount_Cumulative\",\"static_measure\":\"Amount\",\"measure_MoM_Cumulative\":\"projection_amounts\",\"forecastgap_MoM_Cumulative\":\"projection_forecastamountgap\"}"]},"Forecast_Status_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_AccountProductPeriodForecast1"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Forecast.Status\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Parent_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_Account4"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Parent\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"singlerequired","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Composition_Toggle_1":{"broadcastFacet":false,"columns":{"Display":{"type":"string"}},"label":"Composition_Toggle","selectMode":"singlerequired","type":"staticflex","values":["{\"Display\":\"Sales Agreements\",\"Type\":\"Agreement\",\"Projection\":\"'SalesAgreementProduct.Product.Name' as 'Product Name', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.StartDate' as 'Start Date ', 'SalesAgreementProduct.SalesAgreement.EndDate' as 'End Date ', 'Amount' as 'Amount', 'Quantity' as 'Quantity'\"}","{\"Display\":\"Orders\",\"Type\":\"Order\",\"Projection\":\"'Product.Name' as 'Product Name', 'Order.OrderNumber' as 'Order Number', 'Order.EffectiveDate' as 'Order Start Date', 'Amount' as 'Amount', 'Quantity' as 'Quantity'\"}","{\"Display\":\"Opportunities\",\"Type\":\"Opportunity\",\"Projection\":\"'Product.Name' as 'Product Name', 'Opportunity.Name' as 'Opportunity Name', 'Opportunity.CloseDate' as 'Close Date', 'Amount' as 'Amount', 'Quantity' as 'Quantity'\"}"]},"Forecast_Composition":{"broadcastFacet":true,"groups":[],"label":"Forecast Composition","numbers":[],"query":"agreements = load \"MFG_SalesAgreementProductSchedule\";\nagreements = filter agreements by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nagreements = filter agreements by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nagreements = filter agreements by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nagreements = filter agreements by 'isValidProductSchedule' == \"true\";\nStart = foreach agreements generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value = foreach agreements generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nDataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Planned Amount') as 'Planned Amount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount';\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', 'Planned Amount' as 'Planned Amount', 'Planned Amount'/'SalesPrice' as 'Planned Quantity';\nagreement_results = group FilledData by ('Id','Date_Year', 'Date_Month');\nagreement_results = foreach agreement_results generate 'Date_Year', 'Date_Month', sum('Planned Amount') as 'Planned Revenue', sum('Planned Quantity') as 'Planned Quantity';\nagreement_results = group agreement_results by ('Date_Year', 'Date_Month');\nagreement_results = foreach agreement_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', first('Date_Year') as 'StartDate_Year', first('Date_Month') as 'StartDate_Month', sum('Planned Revenue') as 'Amount', sum(sum('Planned Revenue')) over ([..0] partition by all order by 'Date_Year'+\"~~~\"+'Date_Month' asc) as 'cumm_Amount', sum('Planned Quantity') as 'Quantity', sum(sum('Planned Quantity')) over ([..0] partition by all order by 'Date_Year'+\"~~~\"+'Date_Month' asc) as 'cumm_Quantity';\nagreement_results = order agreement_results by 'StartDate_Year~~~StartDate_Month' asc;\norders = load \"MFG_OrderProduct4\";\norders = filter orders by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\norders = filter orders by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\norders = foreach orders generate 'Order.EffectiveDate_Year' as 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month' as 'Order.EffectiveDate_Month', 'TotalPrice' as 'TotalPrice', 'Quantity' as 'Quantity', 'Product.Name' as 'Filter';\norders = group orders by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\norder_results = foreach orders generate 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Quantity';\norder_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\nopportunities = load \"MFG_OpportunityLineItem2\";\nopportunities = filter opportunities by 'Opportunity.CloseDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nopportunities = filter opportunities by 'Opportunity.CloseDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nopportunities = foreach opportunities generate 'Opportunity.CloseDate_Year' as 'Opportunity.CloseDate_Year', 'Opportunity.CloseDate_Month' as 'Opportunity.CloseDate_Month', 'TotalPrice' as 'TotalPrice', 'Quantity' as 'Quantity', 'Product.Name' as 'Filter';\nopportunities = group opportunities by ('Opportunity.CloseDate_Year', 'Opportunity.CloseDate_Month');\nopportunity_results = foreach opportunities generate 'Opportunity.CloseDate_Year' + \"~~~\" + 'Opportunity.CloseDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'Opportunity.CloseDate_Year' + \"~~~\" + 'Opportunity.CloseDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'Opportunity.CloseDate_Year' + \"~~~\" + 'Opportunity.CloseDate_Month' asc) as 'cumm_Quantity';\nopportunity_results = order opportunity_results by 'StartDate_Year~~~StartDate_Month' asc;\nresult = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, agreement_results by 'StartDate_Year~~~StartDate_Month' full, opportunity_results by 'StartDate_Year~~~StartDate_Month';\nresult = foreach result generate coalesce(coalesce(order_results.'StartDate_Year~~~StartDate_Month', agreement_results.'StartDate_Year~~~StartDate_Month'), opportunity_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(order_results.'cumm_Amount'),0) as 'Actuals_Cumulative', coalesce(sum(agreement_results.'Amount'),0) as 'Planned', coalesce(sum(agreement_results.'cumm_Amount'),0) as 'Planned_Cumulative', coalesce(sum(opportunity_results.'Amount'),0) as 'OpportunityAmount', coalesce(sum(opportunity_results.'cumm_Amount'),0) as 'OpportunityAmount_Cumulative', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(order_results.'cumm_Quantity'),0) as 'ActualQuantity_Cumulative', coalesce(sum(agreement_results.'Quantity'),0) as 'PlannedQuantity', coalesce(sum(agreement_results.'cumm_Quantity'),0) as 'PlannedQuantity_Cumulative', coalesce(sum(opportunity_results.'Quantity'),0) as 'OpportunityQuantity', coalesce(sum(opportunity_results.'cumm_Quantity'),0) as 'OpportunityQuantity_Cumulative';\nresult = group result by 'StartDate_Year~~~StartDate_Month';\nresult = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'ActualAmount', sum('Planned') as 'PlannedAmount', sum('OpportunityAmount') as 'OpportunityAmount', sum(sum('Actuals')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualAmount_Cumulative', sum(sum('Planned')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedAmount_Cumulative', sum(sum('OpportunityAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'OpportunityAmount_Cumulative', sum('ActualQuantity') as 'ActualQuantity', sum('PlannedQuantity') as 'PlannedQuantity', sum('OpportunityQuantity') as 'OpportunityQuantity', sum(sum('ActualQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualQuantity_Cumulative', sum(sum('PlannedQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedQuantity_Cumulative', sum(sum('OpportunityQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'OpportunityQuantity_Cumulative';\nresult = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', {{column(Qty_vs_Amount_1.selection, [\"actuals_col\"]).asObject()}} as {{column(Qty_vs_Amount_1.selection, [\"actuals_col\"]).asObject()}}, {{column(Qty_vs_Amount_1.selection, [\"planned_col\"]).asObject()}} as {{column(Qty_vs_Amount_1.selection, [\"planned_col\"]).asObject()}}, {{column(Qty_vs_Amount_1.selection, [\"opportunity_col\"]).asObject()}} as {{column(Qty_vs_Amount_1.selection, [\"opportunity_col\"]).asObject()}};\n result1 = filter result by {{column(Qty_vs_Amount_1.selection, [\"planned_col\"]).asObject()}} is not null;\n result1 = foreach result1 generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', \"Planned\" as 'Amount Type', {{column(Qty_vs_Amount_1.selection, [\"planned_col\"]).asObject()}} as 'Value';\n result2 = filter result by {{column(Qty_vs_Amount_1.selection, [\"actuals_col\"]).asObject()}} is not null;\n result2 = foreach result2 generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', \"Orders\" as 'Amount Type', {{column(Qty_vs_Amount_1.selection, [\"actuals_col\"]).asObject()}} as 'Value';\n result3 = filter result by {{column(Qty_vs_Amount_1.selection, [\"opportunity_col\"]).asObject()}} is not null;\n result3 = foreach result3 generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', \"Opportunity\" as 'Amount Type', {{column(Qty_vs_Amount_1.selection, [\"opportunity_col\"]).asObject()}} as 'Value';\n result = union result1, result2, result3;\n result = order result by 'StartDate_Year~~~StartDate_Month' asc;\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Time (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Planned_Revenue_1":{"broadcastFacet":true,"groups":[],"label":"Planned_Revenue","numbers":[],"query":"all_slaps_schedule = load \"MFG_SalesAgreementProductSchedule\";\nall_slaps_schedule = filter all_slaps_schedule by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nall_slaps_schedule = filter all_slaps_schedule by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_schedule = filter all_slaps_schedule by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_schedule = filter all_slaps_schedule by 'isValidProductSchedule' == \"true\";\nStart = foreach all_slaps_schedule generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_Planned = foreach all_slaps_schedule generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nDataForFill_Planned = union Start, End_Value_Planned;\nDataForFill_Planned = foreach DataForFill_Planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_Planned = fill DataForFill_Planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Planned = group FilledData_Planned by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Planned = foreach FilledData_Planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Planned Amount') as 'Planned Amount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Planned = filter FilledData_Planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData_Planned generate 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount';\nresult = group FilledData by ('Id','Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year', 'Date_Month', sum('Planned Amount') as 'Plan';\nresult = group result by all;\nresult = foreach result generate sum('Plan') as 'Planned_Revenue';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Order_Amount_1":{"broadcastFacet":true,"groups":[],"label":"Order_Amount","numbers":[],"query":"orders = load \"MFG_OrderProduct4\";\norders = filter orders by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\norders = filter orders by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\norders = foreach orders generate 'Order.EffectiveDate_Year' as 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month' as 'Order.EffectiveDate_Month', 'TotalPrice' as 'TotalPrice', 'Quantity' as 'Quantity';\n orders = group orders by all;\n order_results = foreach orders generate sum('TotalPrice') as 'sum_TotalPrice';\n\n ","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Date_Filter_1":{"broadcastFacet":true,"groups":[],"label":"Date_Filter","numbers":[],"query":"q = load \"MFG_AccountProductPeriodForecast1\";\nq = foreach q generate \"1970\" as 'Date_Year', \"01\" as 'Date_Month', \"01\" as 'Date_Day';\nq = group q by ('Date_Year', 'Date_Month', 'Date_Day');\nq = foreach q generate 'Date_Year', 'Date_Month', 'Date_Day', count() as 'sum';\n-- use fill() to generate null rows for any missing dates. Then you can use timeseries().\nq = fill q by (dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = timeseries q generate 'sum' as 'cnt' with (length=60000,  dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = foreach q generate 'Date_Year' + \"-\" + 'Date_Month' + \"-\" + 'Date_Day'+ \" 00:00:00\" as 'Date','Date_Year', 'Date_Month', 'Date_Day';\nq = filter q by {{row(Date_Selector_1.selection, [0], [\"min\", \"max\"]).asDateRange(\"date('Date_Year', 'Date_Month', 'Date_Day')\")}};\nq = foreach q generate toDate('Date') as 'Date', date_to_epoch(toDate('Date')) as 'Date_sec_epoch';\nq = group q by all;\nq = foreach q generate min('Date') as 'Min Date', toDate(max('Date_sec_epoch')+86399) as 'Max Date', min('Date_sec_epoch')*1000 as 'Min', (max('Date_sec_epoch')+86399)*1000 as 'Max',           date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))*1000 as 'Prev_Min', (date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))+86399)*1000 as 'Prev_Max';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Product_Actual_vs_Forecast":{"broadcastFacet":true,"groups":[],"label":"Product level Actual vs Forecast","numbers":[],"query":"all_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.Account.Name' as 'Order.Account.Name', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Account.Name' as 'Order.Account.Name', 'AccountProductForecast.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_forecast;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nFilledData = foreach FilledData generate 'Id' as 'Id', 'Date_Year', 'Date_Month', 'Actual Amount' as 'Actual Amount', 'Actual Amount'/'SalesPrice' as 'ActualQuantity', 'Forecasted Amount' as 'Forecasted Amount', 'Forecasted Amount'/'SalesPrice' as 'ForecastQuantity';\nresult = group FilledData by 'Id' left, valid_slaps by 'Id';\nresult = foreach result generate first(valid_slaps.'Product.Name') as 'Product.Name', first(valid_slaps.'Product.Family') as 'Product.Family', coalesce(sum(FilledData.'Actual Amount'),0) as 'ActualAmount', coalesce(sum(FilledData.'Forecasted Amount'),0) as 'ForecastAmount', coalesce(sum(FilledData.'Actual Amount'),0)*100/coalesce(sum(FilledData.'Forecasted Amount'),0) as 'ForecastAmountAttainment', coalesce(sum(FilledData.'Forecasted Amount'),0)-coalesce(sum(FilledData.'Actual Amount'),0) as 'ForecastAmountGap', coalesce(sum(FilledData.'ActualQuantity'),0) as 'ActualQuantity', coalesce(sum(FilledData.'ForecastQuantity'),0) as 'ForecastQuantity', coalesce(sum(FilledData.'ActualQuantity'),0)*100/coalesce(sum(FilledData.'ForecastQuantity'),0) as 'ForecastQuantityAttainment', coalesce(sum(FilledData.'ForecastQuantity'),0)-coalesce(sum(FilledData.'ActualQuantity'),0) as 'ForecastQuantityGap';\nresult = group result by {{column(Prod_vs_Prod_Family_1.selection, [\"grouping\"]).asGrouping()}};\n result = foreach result generate '{{column(Prod_vs_Prod_Family_1.selection, [\"grouping\"]).asObject()}}' as '{{column(Prod_vs_Prod_Family_1.selection, [\"grouping\"]).asObject()}}', sum('ActualAmount') as 'ActualAmount', sum('ForecastAmount') as 'ForecastAmount', coalesce(sum('ActualAmount'),0)*100/coalesce(sum('ForecastAmount'),0) as 'ForecastAmountAttainment', coalesce(sum('ForecastAmount'),0)-coalesce(sum('ActualAmount'),0) as 'ForecastAmountGap', sum('ActualQuantity') as 'ActualQuantity', sum('ForecastQuantity') as 'ForecastQuantity', coalesce(sum('ActualQuantity'),0)*100/coalesce(sum('ForecastQuantity'),0) as 'ForecastQuantityAttainment', coalesce(sum('ForecastQuantity'),0)-coalesce(sum('ActualQuantity'),0) as 'ForecastQuantityGap';\n result = foreach result generate '{{column(Prod_vs_Prod_Family_1.selection, [\"grouping\"]).asObject()}}' as '{{column(Prod_vs_Prod_Family_1.selection, [\"forecasts_col\"]).asObject()}}', '{{column(static_measure_1.selection, column(Qty_vs_Amount_1.selection, [\"static_measure\"])).asObject()}}' as '{{column(static_measure_1.selection, column(Qty_vs_Amount_1.selection, [\"static_measure\"])).asObject()}}', '{{column(static_measure_2.selection, column(Qty_vs_Amount_1.selection, [\"static_measure\"])).asObject()}}' as '{{column(static_measure_2.selection, column(Qty_vs_Amount_1.selection, [\"static_measure\"])).asObject()}}';\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Time (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"plots":{"cumm_Amount":{"mark":"line"},"cumm_Amount_low_95":{"mark":"line"},"Amount":{"mark":"bar"},"cumm_Planned_Revenue":{"mark":"line"},"cumm_Amount_high_95":{"mark":"line"}},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Actual_vs_Forecast_v_1":{"broadcastFacet":true,"groups":[],"label":"Actual vs Forecast vs Planned","numbers":[],"query":"all_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_forecast;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter', min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', 'Actual Amount', 'SalesPrice', 'Forecasted Amount', \n'Actual Amount'/'SalesPrice' as 'ActualQuantity', 'Forecasted Amount'/'SalesPrice' as 'ForecastQuantity';\nresult = group FilledData by ('Id','Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', coalesce(sum('Actual Amount'),0)\nas 'Actuals', coalesce(sum('Forecasted Amount'),0) as 'Forecast', coalesce(sum('ActualQuantity'),0)\nas 'ActualQuantity', coalesce(sum('ForecastQuantity'),0) as 'ForecastQuantity';\nresult = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals')-sum('Forecast') as 'ForecastAmountGap_MoM', sum(sum('Actuals')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) - sum(sum('Forecast')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastAmountGap_Cumulative', sum('ActualQuantity')-sum('ForecastQuantity') as 'ForecastQuantityGap_MoM', sum(sum('ActualQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) - sum(sum('ForecastQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastQuantityGap_Cumulative';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', {{column(MoM_vs_Cumulative.selection, column(Qty_vs_Amount_1.selection, [\"forecastgap_MoM_Cumulative\"])).asObject()}} as {{column(MoM_vs_Cumulative.selection, column(Qty_vs_Amount_1.selection, [\"forecastgap_MoM_Cumulative\"])).asObject()}}, (case when {{column(MoM_vs_Cumulative.selection, column(Qty_vs_Amount_1.selection, [\"forecastgap_MoM_Cumulative\"])).asObject()}}>0 then \"Green\" else \"Red\" end) as 'Gap_Color';\n result = order result by 'StartDate_Year~~~StartDate_Month' asc;\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Time (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"plots":{"cumm_Amount":{"mark":"line"},"cumm_Amount_low_95":{"mark":"line"},"Amount":{"mark":"bar"},"cumm_Planned_Revenue":{"mark":"line"},"cumm_Amount_high_95":{"mark":"line"}},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Forecast_Product_Composition":{"broadcastFacet":true,"groups":[],"label":"Forecast Product Composition","numbers":[],"query":"all_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'Forecasted Amount'/'SalesPrice' as 'Forecasted Quantity';\nresult = group FilledData by 'Id' left, all_slaps_forecast by 'Id';\nresult = foreach result generate  first(all_slaps_forecast.'AccountProductForecast.Name') as 'AccountProductForecast.Name', first(all_slaps_forecast.'Product.Family') as 'Product.Family', sum(FilledData.'Forecasted Quantity') as 'ForecastQuantity', sum(FilledData.'Forecasted Amount') as 'ForecastAmount';\nresult = group result by {{column(Prod_vs_Prod_Family_1.selection, [\"forecasts_col\"]).asGrouping()}};\nresult = foreach result generate '{{column(Prod_vs_Prod_Family_1.selection, [\"forecasts_col\"]).asObject()}}' as '{{column(Prod_vs_Prod_Family_1.selection, [\"forecasts_col\"]).asObject()}}', sum('{{column(Qty_vs_Amount_1.selection, [\"forecast_col\"]).asObject()}}') as '{{column(Qty_vs_Amount_1.selection, [\"forecast_col\"]).asObject()}}';\nresult = order result by '{{column(Qty_vs_Amount_1.selection, [\"forecast_col\"]).asObject()}}' desc nulls last;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Time (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"plots":{"cumm_Amount":{"mark":"line"},"cumm_Amount_low_95":{"mark":"line"},"Amount":{"mark":"bar"},"cumm_Planned_Revenue":{"mark":"line"},"cumm_Amount_high_95":{"mark":"line"}},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Forecast_Composition_Table":{"broadcastFacet":true,"groups":[],"label":"Forecast Composition","numbers":[],"query":"agreements = load \"MFG_SalesAgreementProductSchedule\";\nagreements = filter agreements by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nagreements = filter agreements by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nagreements = filter agreements by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nagreements = filter agreements by 'isValidProductSchedule' == \"true\";\nStart = foreach agreements generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value = foreach agreements generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nDataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Planned Amount') as 'Planned Amount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount';\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', 'Planned Amount' as 'Planned Amount', 'Planned Amount'/'SalesPrice' as 'Planned Quantity';\nagreement_results = group FilledData by 'Id' left, agreements by 'Id';\nagreement_results = foreach agreement_results generate  first(agreements.'SalesAgreementProduct.Product.Name') as 'SalesAgreementProduct.Product.Name', first(agreements.'SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name', first(agreements.'SalesAgreementProduct.SalesAgreement.StartDate') as 'SalesAgreementProduct.SalesAgreement.StartDate', first(agreements.'SalesAgreementProduct.SalesAgreement.EndDate') as 'SalesAgreementProduct.SalesAgreement.EndDate', \"Agreement\" as 'Type', sum(FilledData.'Planned Amount') as 'Amount', sum(FilledData.'Planned Quantity') as 'Quantity';\nagreement_results = group agreement_results by ('SalesAgreementProduct.Product.Name', 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.StartDate', 'SalesAgreementProduct.SalesAgreement.EndDate', 'Type');\nagreement_results = foreach agreement_results generate  'SalesAgreementProduct.Product.Name' as 'SalesAgreementProduct.Product.Name', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.StartDate' as 'SalesAgreementProduct.SalesAgreement.StartDate', 'SalesAgreementProduct.SalesAgreement.EndDate' as 'SalesAgreementProduct.SalesAgreement.EndDate', 'Type' as 'Type', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\nagreement_results = order agreement_results by ('Amount' desc, 'SalesAgreementProduct.SalesAgreement.Name' asc);\norders = load \"MFG_OrderProduct4\";\norders = filter orders by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\norders = filter orders by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\norder_results = foreach orders generate 'Product.Name' as 'Product.Name', 'Order.OrderNumber' as 'Order.OrderNumber', 'Order.EffectiveDate' as 'Order.EffectiveDate', \"Order\" as 'Type', sum('TotalPrice') as 'Amount', sum('Quantity') as 'Quantity';\norder_results = order order_results by ('Amount' desc, 'Product.Name' desc);\nopportunities = load \"MFG_OpportunityLineItem2\";\nopportunities = filter opportunities by 'Opportunity.CloseDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nopportunities = filter opportunities by 'Opportunity.CloseDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nopportunity_results = foreach opportunities generate 'Product.Name' as 'Product.Name', 'Opportunity.Name' as 'Opportunity.Name', 'Opportunity.CloseDate' as 'Opportunity.CloseDate', \"Opportunity\" as 'Type', sum('TotalPrice') as 'Amount', sum('Quantity') as 'Quantity';\nopportunity_results = order opportunity_results by ('Amount' desc, 'Opportunity.Name' asc);\nresult = union agreement_results, order_results, opportunity_results;\n result = filter result by 'Type'== \"{{cell(Composition_Toggle_1.selection, 0, \"Type\").asString()}}\";\n\n  result = foreach result generate {{cell(Composition_Toggle_1.selection, 0, \"Projection\").asObject()}};\n\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Time (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Forecast_Amount_Fina_1":{"broadcastFacet":true,"groups":[],"label":"Forecast Amount Final","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.Account.Name' as 'Order.Account.Name', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Account.Name' as 'Order.Account.Name', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_forecast;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nresult = group FilledData by ('Id','Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Forecasted Amount') as 'Forecast', (sum('Forecasted Amount')-sum('Actual Amount')) as 'Demand Shortfall';\nresult = group result by all;\nresult = foreach result generate sum('Forecast') as 'DerivedForecastedAmount', sum('Actual') as 'ActualRevenue', sum('Actual') - sum('Forecast') as 'Actual Forecast Difference', sum('Actual')/sum('Forecast') as 'Attainment';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"TotalPrice_1":{"broadcastFacet":true,"groups":[],"label":"TotalPrice_1","numbers":[],"query":"q = load \"MFG_OpportunityLineItem2\";\nq = filter q by 'Opportunity.CloseDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nq = filter q by 'Opportunity.CloseDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nq = foreach q generate 'Opportunity.CloseDate_Year' as 'Opportunity.CloseDate_Year', 'Opportunity.CloseDate_Month' as 'Opportunity.CloseDate_Month', 'TotalPrice' as 'TotalPrice', 'Quantity' as 'Quantity';\n  q = group q by all;\nq = foreach q generate sum('TotalPrice') as 'sum_TotalPrice';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Prod_vs_Prod_Family_1":{"broadcastFacet":false,"columns":{"Display":{"type":"string"}},"label":"Prod vs Prod Family","selectMode":"singlerequired","start":"{\"display\":[\"Product\"]}","type":"staticflex","values":["{\"display\":\"Product\",\"keyword\":\"Product\",\"grouping\":\"Product.Name\",\"agreements_col\":\"SalesAgreementProduct.Name\",\"forecasts_col\":\"AccountProductForecast.Name\",\"orders_col\":\"Product.Name\",\"opportunities_col\":\"Product.Name\"}","{\"display\":\"Product Category\",\"keyword\":\"Product Family\",\"grouping\":\"Product.Family\",\"agreements_col\":\"SalesAgreementProduct.Product.Family\",\"forecasts_col\":\"Product.Family\",\"orders_col\":\"Product.Family\",\"opportunities_col\":\"Product.Family\"}"]},"Product_details":{"broadcastFacet":true,"groups":[],"label":"Forecast Product Schedule Details","numbers":[],"query":"all_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_schedule = load \"MFG_SalesAgreementProductSchedule\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_schedule = filter all_slaps_schedule by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nall_slaps_schedule = filter all_slaps_schedule by 'isValidProductSchedule' == \"true\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_schedule = filter all_slaps_schedule by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_schedule = filter all_slaps_schedule by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount', 1 as 'Type';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'AccountProductForecast.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 2 as 'Type';\nall_slaps_schedule = foreach all_slaps_schedule generate 'Id' as 'Id', 'SalesAgreementProduct.Name' as 'Product.Name', 'SalesAgreementProduct.Product.Family' as 'Product.Family', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'SalesPrice' as 'SalesPrice', 'DiscountPercentage' as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'PlannedAmountFinal' as 'ForecastedAmountFinal', 'PlannedDailyAmount' as 'ForecastedDailyAmount', 3 as 'Type';\nvalid_slaps = union all_slaps_order, all_slaps_forecast, all_slaps_schedule;\nall_slaps_forecast = union all_slaps_forecast, all_slaps_schedule;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Type' as 'Type',  'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Type' as 'Type', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', 'Type' as 'Type', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family','Type' as 'Type', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', first('Product.Name') as 'Product.Name', first('Product.Family') as 'Product.Family', min(first('Type')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Type', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Type' as 'Type', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nFilledData = foreach FilledData generate 'Id' as 'Id', 'Date_Year', 'Date_Month', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', case when 'Type' == 2 then 'Forecasted Amount' else 0 end as 'Forecasted Amount', case when 'Type' == 3 then 'Forecasted Amount' else 0 end as 'Planned Amount';\nFilledData = foreach FilledData generate 'Id' as 'Id', 'Date_Year', 'Date_Month', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Actual Amount' as 'Actual Amount', 'Actual Amount'/'SalesPrice' as 'ActualQuantity', 'Forecasted Amount' as 'Forecasted Amount', 'Forecasted Amount'/'SalesPrice' as 'ForecastQuantity', 'Planned Amount' as 'Planned Amount', 'Planned Amount'/'SalesPrice' as 'PlannedQuantity';\nFilledData = group FilledData by ('Id','Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', 'Date_Year'+\"~~~\"+'Date_Month' as 'Period', first('Product.Name') as 'Product.Name', first('Product.Family') as 'Product.Family',sum('Actual Amount') as 'ActualAmount', sum('Forecasted Amount') as 'ForecastAmount', sum('Planned Amount') as 'PlannedAmount', sum('ActualQuantity') as 'ActualQuantity', sum('PlannedQuantity') as 'PlannedQuantity', sum('ForecastQuantity') as 'ForecastQuantity';\nresult = group FilledData by ('Product.Name', 'Period', 'Product.Family');\nresult = foreach result generate 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Period' as 'Period', coalesce(sum('ForecastAmount'),0) as 'ForecastAmount', coalesce(sum('ForecastQuantity'),0) as 'ForecastQuantity', coalesce(sum('ActualAmount'),0) as 'DerivedActualAmountOrders', coalesce(sum('ActualQuantity'),0) as 'ActualQuantityOrders', coalesce(sum('PlannedAmount'),0) as 'PlannedAmount', coalesce(sum('PlannedQuantity'),0) as 'PlannedQuantity';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Time (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"plots":{"cumm_Amount":{"mark":"line"},"cumm_Amount_low_95":{"mark":"line"},"Amount":{"mark":"bar"},"cumm_Planned_Revenue":{"mark":"line"},"cumm_Amount_high_95":{"mark":"line"}},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Type_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_Account4"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Type\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"SalesAgreementProduc_8":{"broadcastFacet":true,"datasets":[{"name":"MFG_SalesAgreementProductSchedule"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"SalesAgreementProduct.SalesAgreement.Name\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","start":"[]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"static_measure_1":{"broadcastFacet":true,"columns":{"Display":{"type":"string"}},"label":"","selectMode":"singlerequired","start":"{\"Display\":[\"ACTUALS (ORDERS)\"]}","type":"staticflex","values":["{\"Display\":\"ACTUALS (ORDERS)\",\"Amount\":\"ActualAmount\",\"Quantity\":\"ActualQuantity\"}","{\"Display\":\"FORECAST\",\"Amount\":\"ForecastAmount\",\"Quantity\":\"ForecastQuantity\"}","{\"Display\":\"ACTUALS VS FORECAST\",\"Amount\":\"ForecastAmountGap\",\"Quantity\":\"ForecastQuantityGap\"}","{\"Display\":\"ATTAINMENT\",\"Amount\":\"ForecastAmountAttainment\",\"Quantity\":\"ForecastQuantityAttainment\"}"]},"Name_2":{"broadcastFacet":true,"datasets":[{"name":"MFG_Product2"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Name\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Name_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_Account4"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Name\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Family_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_Product2"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Family\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}}},"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1},"widgets":{"number_10":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"ActualRevenue","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Forecast_Amount_Fina_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_18":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#FFFFFF","align":"center"},"insert":"Choose KPI:"}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_16":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_15":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_14":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_19":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#FFFFFF","align":"center"},"insert":"Group by:"}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_13":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_14":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#FFFFFF","align":"left"},"insert":"What’s the product-wise forecast for my account?"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_13":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Actual Revenue (Orders)"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_15":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Revenue Attainment"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_10":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Forecasted Revenue"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_12":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#FFFFFF","align":"left"},"insert":"How's my account performing against forecast?"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_11":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"left"},"insert":"Revenue from Opportunities"}]},"interactions":[],"showActionMenu":false},"type":"text"},"container_1":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_2":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_3":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_4":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_5":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_3":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"left"},"insert":"How are this accounts’ products performing against forecast?"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_2":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":"Product Sales and Realization"}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_5":{"parameters":{"stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["ForecastQuantity_Cumulative","ForecastQuantity"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date: [StartDate_Year~~~StartDate_Month]"}},"missingValue":"connect","visualizationType":"time-combo","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showZero":true,"valueType":"compactNumber","theme":"dark","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""},"autoFitMode":"keepLabels","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Period"},"plots":{"ForecastAmount":{"mark":"bar"},"ForecastQuantity":{"mark":"bar"},"ForecastAmount_Cumulative":{"mark":"line"},"ForecastQuantity_Cumulative":{"mark":"line"}},"fillArea":true,"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueTypeOnLine":"none","step":"Forecast_Trend","compactDecimalDigits":-1},"type":"chart"},"container_7":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_5":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#091A3E","align":"left"},"insert":"What's in the forecast?"}]},"interactions":[],"showActionMenu":false},"type":"text"},"container_8":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"chart_7":{"parameters":{"autoFitMode":"keepLabels","legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","totalSumMode":"none","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Value"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month","Amount Type"]},"description":"Date: [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"stackvbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"columnMap":{"split":["Amount Type"],"trellis":[],"dimensionAxis":["StartDate_Year~~~StartDate_Month"],"plots":["Value"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"{{cell(Qty_vs_Amount_1.selection, 0, \"static_measure\").asObject()}}","customDomain":{"showDomain":false}},"normalize":false,"valueType":"compactNumber","theme":"wave","step":"Forecast_Composition","compactDecimalDigits":-1,"applyConditionalFormatting":true,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"Period","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"container_9":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_7":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Actual vs. Forecasted Revenue"}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_2":{"parameters":{"autoFitMode":"keepLabels","showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["ActualQuantityOrders","PlannedQuantity","ForecastQuantity"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date: [StartDate_Year~~~StartDate_Month]"}},"missingValue":"connect","visualizationType":"time","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":true,"showAxis":true,"referenceLines":[],"title":"Period"},"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Amount","customDomain":{"showDomain":false}},"valueType":"none","theme":"dark","step":"Actual_Forecast_Planned","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"text_6":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"left"},"insert":"Metrics are calculated for the specified period."}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_1":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"dark","step":"Forecast_Product_Composition","compactDecimalDigits":-1,"applyConditionalFormatting":true,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"chart_4":{"parameters":{"autoFitMode":"keepLabels","legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"showMeasureTitle":true,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"pyramid","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showMeasure":true,"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"title":" ","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"title":" ","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","step":"Product_Actual_vs_Forecast","rightColor":"#e16032","leftColor":"#52b7d8","compactDecimalDigits":-1,"applyConditionalFormatting":true,"dimensionAxis":{"customSize":"auto","showAxis":true}},"type":"chart"},"text_9":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"left"},"insert":"Revenue from Orders"}]},"interactions":[],"showActionMenu":false},"type":"text"},"chart_3":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["ForecastQuantityGap_MoM"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["Gap_Color"]},"description":"Date: [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"vbar","dashLine":{"measures":"","showDashLine":false},"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Actual vs Forecast","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"dark","step":"Actual_vs_Forecast_v_1","compactDecimalDigits":-1,"applyConditionalFormatting":true,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":false,"title":"Period","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"text_8":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"left"},"insert":"Planned Revenue"}]},"interactions":[],"showActionMenu":false},"type":"text"},"dateselector_1":{"parameters":{"absoluteModeEnabled":true,"calendarTypeSwitchingAllowed":true,"defaultFiscalMode":false,"displayMode":"filter","filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"presetsEnabled":true,"relativeModeEnabled":true,"showActionMenu":false,"step":"Date_Selector_1","title":"Time Period"},"type":"dateselector"},"text_1":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":"Account Insights"}]},"interactions":[],"showActionMenu":true},"type":"text"},"number_5":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_TotalPrice","numberColor":"#091A3E","numberSize":24,"showActionMenu":true,"step":"TotalPrice_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_4":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Actual Forecast Difference","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Forecast_Amount_Fina_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_3":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Attainment","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Forecast_Amount_Fina_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_40":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":"Details"}]},"interactions":[],"showActionMenu":false},"type":"text"},"number_2":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_TotalPrice","numberColor":"#091A3E","numberSize":24,"showActionMenu":true,"step":"Order_Amount_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_1":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Planned_Revenue","numberColor":"#091A3E","numberSize":24,"showActionMenu":true,"step":"Planned_Revenue_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"image_1":{"parameters":{"alignmentX":"center","alignmentY":"center","fit":"original","image":{"name":"manufacturing_app_iconpng114","namespace":""},"interactions":[]},"type":"image"},"container_12":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"listselector_12":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":true,"step":"Forecast_Status_1","title":"Forecast Status"},"type":"listselector"},"container_11":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"listselector_11":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":false,"step":"Type_1","title":"Account Type"},"type":"listselector"},"listselector_10":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"showActionMenu":true,"step":"static_measure_2","title":""},"type":"listselector"},"container_10":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"listselector_16":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":false,"step":"Family_1","title":"Product Family"},"type":"listselector"},"listselector_15":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":false,"step":"Name_2","title":"Product Name"},"type":"listselector"},"listselector_14":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":false,"step":"Parent_1","title":"Parent Account"},"type":"listselector"},"listselector_13":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":false,"step":"Name_1","title":"Account Name"},"type":"listselector"},"number_6":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"DerivedForecastedAmount","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Forecast_Amount_Fina_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"dateselector_3":{"parameters":{"absoluteModeEnabled":true,"calendarTypeSwitchingAllowed":true,"defaultFiscalMode":false,"displayMode":"filter","filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"presetsEnabled":true,"relativeModeEnabled":true,"showActionMenu":false,"step":"Date_Selector_1","title":"Time Period"},"type":"dateselector"},"listselector_7":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"measureField":"none","showActionMenu":false,"step":"SalesAgreementProduc_8","title":"Sales Agreement"},"type":"listselector"},"listselector_9":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"showActionMenu":true,"step":"static_measure_1","title":""},"type":"listselector"},"listselector_8":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":true,"measureField":"count","showActionMenu":false,"step":"Owner_Name_1","title":"Owner Name"},"type":"listselector"},"link_3":{"parameters":{"destinationLink":{"name":"Account_Insights_Order_Status","namespace":""},"destinationType":"dashboard","fontSize":14,"includeState":true,"text":"Order Status","textAlignment":"center","textColor":"rgb(84, 105, 141)"},"type":"link"},"link_4":{"parameters":{"destinationLink":{"name":"Account_Insights_Product_Sales_Pricing","namespace":""},"destinationType":"dashboard","fontSize":14,"includeState":true,"text":"Product Sales & Pricing","textAlignment":"center","textColor":"rgb(84, 105, 141)"},"type":"link"},"link_1":{"parameters":{"destinationLink":{"name":"dcc70e5d-3908-4426-8ac5-f99fe142f5c1"},"destinationType":"page","fontSize":18,"includeState":true,"text":"Performance","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"link_2":{"parameters":{"destinationLink":{"name":"dcc70e5d-3908-4426-8ac5-f99fe142f5c1"},"destinationType":"page","fontSize":14,"includeState":false,"text":"Sales Forecast","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"table_1":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"showRowIndexColumn":false,"step":"Forecast_Composition_Table","verticalPadding":8},"type":"table"},"table_4":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"step":"Product_details","verticalPadding":8},"type":"table"},"pillbox_2":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"rgb(51, 87, 121)","borderColor":"#C6D3E1","borderEdges":[],"borderWidth":0,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"Qty_vs_Amount_1","textColor":"rgb(125, 152, 179)"},"type":"pillbox"},"link_7":{"parameters":{"destinationLink":{"name":"bbb4a1b6-dcd5-4dda-ae27-534ca9e32ded"},"destinationType":"page","fontSize":16,"includeState":true,"text":"COMPOSITION","textAlignment":"center","textColor":"#FFFFFF"},"type":"link"},"pillbox_1":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"rgb(51, 87, 121)","borderColor":"#C6D3E1","borderEdges":[],"borderWidth":0,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"Prod_vs_Prod_Family_1","textColor":"rgb(125, 152, 178)"},"type":"pillbox"},"link_8":{"parameters":{"destinationLink":{"name":"dcc70e5d-3908-4426-8ac5-f99fe142f5c1"},"destinationType":"page","fontSize":16,"includeState":false,"text":"PERFORMANCE","textAlignment":"center","textColor":"#C6D3E1"},"type":"link"},"link_5":{"parameters":{"destinationLink":{"name":"Account_Insights_Agreements_Performance","namespace":""},"destinationType":"dashboard","fontSize":14,"includeState":true,"text":"Agreements Performance","textAlignment":"center","textColor":"rgb(84, 105, 141)"},"type":"link"},"pillbox_4":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"#335779","borderColor":"#C6D3E1","borderEdges":["all"],"borderWidth":0,"textColor":"#FFFFFF"},"showActionMenu":false,"step":"MoM_vs_Cumulative","textColor":"rgb(125, 152, 178)"},"type":"pillbox"},"link_6":{"parameters":{"destinationLink":{"name":"bbb4a1b6-dcd5-4dda-ae27-534ca9e32ded"},"destinationType":"page","fontSize":18,"includeState":false,"text":"Composition","textAlignment":"center","textColor":"#C6D3E1"},"type":"link"},"pillbox_3":{"parameters":{"compact":false,"exploreLink":false,"fontSize":10,"selectedTab":{"backgroundColor":"#335779","borderColor":"#C6D3E1","borderEdges":["all"],"borderWidth":1,"textColor":"rgb(255, 255, 255)"},"showActionMenu":false,"step":"Composition_Toggle_1","textColor":"rgb(51, 87, 121)"},"type":"pillbox"}}}