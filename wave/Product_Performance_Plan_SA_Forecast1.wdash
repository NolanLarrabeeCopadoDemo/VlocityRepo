{"dataSourceLinksInfo":{"enableAutomaticLinking":false,"excludeRelationships":[],"links":[{"fields":[{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Type"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Type"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Type"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Type"}],"label":"Account_Type","name":"Link_3202"},{"fields":[{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Name"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Name"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Name"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Name"}],"label":"Account_Name","name":"Link_3245"},{"fields":[{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Owner.Name"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Owner.Name"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Owner.Name"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Owner.Name"}],"label":"Account_Owner_Name","name":"Link_3187"},{"fields":[{"dataSourceName":"MFG_Product2","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Family"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Product.Family"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Product.Family"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.Product.Family"}],"label":"Product_Family","name":"Link_3319"},{"fields":[{"dataSourceName":"MFG_Product2","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Name"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"AccountProductForecast.Name"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Product.Name"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.Name"}],"label":"Product","name":"Link_3614"},{"fields":[{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Industry"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Industry"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Industry"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Industry"}],"label":"Industry","name":"Link_3267"},{"fields":[{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"BillingCountry"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.BillingCountry"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.BillingCountry"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.BillingCountry"}],"label":"Account_Country","name":"Link_3294"},{"fields":[{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.SalesAgreement.Name"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Name"}],"label":"Sales_Agreement","name":"Link_276"},{"fields":[{"dataSourceName":"MFG_Account4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Parent"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Parent"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Parent"},{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Parent"}],"label":"Parent_Account_Name","name":"Link_3220"}]},"filters":[{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["Owner.Name"],"label":"Account Owner Name","locked":false,"operator":"in"},{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["Type"],"locked":false,"operator":"in"},{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["Name"],"locked":false,"operator":"in"},{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["Parent"],"label":"Parent Account Name","locked":false,"operator":"in"},{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["Industry"],"locked":false,"operator":"in"},{"dataset":{"name":"MFG_Account4"},"dependent":true,"fields":["BillingCountry"],"label":"Account Country","locked":false,"operator":"in"},{"dataset":{"name":"MFG_Product2"},"dependent":true,"fields":["Family"],"locked":false,"operator":"in","value":"[\"Attachments\",\"Equipment\"]"},{"dataset":{"name":"MFG_SalesAgreementProductSchedule"},"dependent":true,"fields":["SalesAgreementProduct.SalesAgreement.Name"],"locked":false,"operator":"in"}],"gridLayouts":[{"maxWidth":1500,"name":"Default","numColumns":50,"pages":[{"label":"Sales Trends","name":"bdfe8489-27a5-4488-8357-f9e4415f3972","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_1","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_3","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":3,"name":"text_1","row":2,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":19,"column":11,"name":"navigation_1","row":0,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":49,"column":1,"name":"filterpanel_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(230, 236, 242, 0)","borderColor":"rgba(255, 255, 255, 0)","borderEdges":["right"],"borderRadius":4,"borderWidth":8}},{"colspan":50,"column":0,"name":"container_2","row":13,"rowspan":7,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":8,"name":"text_2","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":1,"name":"text_3","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":16,"name":"text_4","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":8,"name":"number_1","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":1,"name":"number_2","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":34,"name":"text_6","row":15,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["right"],"borderRadius":0,"borderWidth":8}},{"colspan":11,"column":1,"name":"pillbox_1","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"pillbox_3","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(9, 26, 62)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":1,"name":"chart_1","row":32,"rowspan":32,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["left","bottom"],"borderRadius":0,"borderWidth":8}},{"colspan":32,"column":17,"name":"chart_4","row":32,"rowspan":32,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":8}},{"colspan":50,"column":0,"name":"container_4","row":66,"rowspan":37,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderEdges":[]}},{"colspan":24,"column":1,"name":"chart_2","row":68,"rowspan":33,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["all"],"borderRadius":0,"borderWidth":8}},{"colspan":23,"column":26,"name":"chart_3","row":68,"rowspan":33,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["all"],"borderRadius":0,"borderWidth":8}},{"colspan":50,"column":0,"name":"container_5","row":103,"rowspan":39,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_7","row":7,"rowspan":6,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":2,"name":"text_9","row":30,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_9","row":25,"rowspan":7,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":24,"column":2,"name":"text_10","row":26,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":18,"name":"text_14","row":30,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":17,"column":1,"name":"text_17","row":107,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":16,"name":"number_13","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"table_3","row":109,"rowspan":31,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":1,"name":"text_25","row":105,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":10,"column":39,"name":"dateselector_2","row":15,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0.4)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}}]},{"label":"Actual vs. Planned","name":"bca1ea04-1c73-40d9-9d58-c80ae08f53cb","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_1","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_3","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":3,"name":"text_1","row":2,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":19,"column":11,"name":"navigation_1","row":0,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":49,"column":1,"name":"filterpanel_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(230, 236, 242, 0)","borderColor":"rgba(255, 255, 255, 0)","borderEdges":["right"],"borderRadius":4,"borderWidth":8}},{"colspan":50,"column":0,"name":"container_2","row":13,"rowspan":7,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":8,"name":"text_2","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":1,"name":"text_3","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":34,"name":"text_6","row":15,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["right"],"borderRadius":0,"borderWidth":8}},{"colspan":10,"column":39,"name":"dateselector_2","row":15,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0.4)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":11,"column":1,"name":"pillbox_1","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"pillbox_3","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(9, 26, 62)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_5","row":108,"rowspan":39,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":1,"name":"text_5","row":110,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":48,"column":1,"name":"table_1","row":114,"rowspan":31,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_7","row":7,"rowspan":6,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":23,"column":2,"name":"text_8","row":26,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_9","row":25,"rowspan":7,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":17,"column":1,"name":"chart_5","row":32,"rowspan":32,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["all"],"borderRadius":4,"borderWidth":8}},{"colspan":31,"column":18,"name":"chart_6","row":32,"rowspan":32,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["all"],"borderRadius":4,"borderWidth":8}},{"colspan":32,"column":2,"name":"text_7","row":70,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":4,"borderWidth":1}},{"colspan":7,"column":2,"name":"number_4","row":79,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":2,"name":"number_5","row":87,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":2,"name":"number_6","row":95,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":39,"column":9,"name":"chart_8","row":74,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#FFFFFF","borderEdges":["all"],"borderRadius":0,"borderWidth":8}},{"colspan":39,"column":9,"name":"chart_7","row":86,"rowspan":19,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#FFFFFF","borderEdges":["all"],"borderRadius":0,"borderWidth":8}},{"colspan":48,"column":1,"name":"container_11","row":66,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#FFFFFF","borderEdges":["bottom"],"borderRadius":0,"borderWidth":8}},{"colspan":48,"column":1,"name":"container_12","row":69,"rowspan":36,"widgetStyle":{"borderEdges":[]}},{"colspan":1,"column":0,"name":"container_13","row":66,"rowspan":42,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":8}},{"colspan":1,"column":49,"name":"container_14","row":66,"rowspan":42,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":8}},{"colspan":48,"column":1,"name":"container_15","row":105,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#FFFFFF","borderEdges":["top"],"borderRadius":0,"borderWidth":8}},{"colspan":6,"column":2,"name":"text_11","row":75,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":2,"name":"text_12","row":85,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":2,"name":"text_13","row":93,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":2,"name":"text_15","row":30,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":23,"column":20,"name":"text_16","row":30,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":17,"column":1,"name":"text_17","row":112,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":1,"name":"number_3","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":8,"name":"number_7","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":16,"name":"number_9","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":16,"name":"text_23","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}}]},{"label":"Actual vs. Forecast","name":"2b3bd4c1-0619-4a97-9670-970926576486","navigationHidden":false,"widgets":[{"colspan":50,"column":0,"name":"container_1","row":0,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#7D98B3","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":2,"column":1,"name":"image_3","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":3,"name":"text_1","row":2,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":19,"column":11,"name":"navigation_1","row":0,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_2","row":13,"rowspan":7,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":8,"name":"text_2","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":1,"name":"text_3","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":16,"name":"text_4","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":34,"name":"text_6","row":15,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["right"],"borderRadius":0,"borderWidth":8}},{"colspan":10,"column":39,"name":"dateselector_2","row":15,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(51, 87, 121, 0.4)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":11,"column":1,"name":"pillbox_1","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":40,"name":"pillbox_3","row":21,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(9, 26, 62)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":50,"column":0,"name":"container_5","row":108,"rowspan":39,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":1,"name":"text_5","row":110,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":48,"column":1,"name":"container_9","row":25,"rowspan":7,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":1,"name":"container_11","row":66,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#FFFFFF","borderEdges":["bottom"],"borderRadius":0,"borderWidth":8}},{"colspan":48,"column":1,"name":"container_12","row":69,"rowspan":36,"widgetStyle":{"borderEdges":[]}},{"colspan":1,"column":0,"name":"container_13","row":66,"rowspan":42,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":8}},{"colspan":1,"column":49,"name":"container_14","row":66,"rowspan":42,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":8}},{"colspan":48,"column":1,"name":"container_15","row":105,"rowspan":3,"widgetStyle":{"backgroundColor":"rgb(220, 228, 239)","borderColor":"#FFFFFF","borderEdges":["top"],"borderRadius":0,"borderWidth":8}},{"colspan":15,"column":2,"name":"text_15","row":30,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":17,"column":1,"name":"text_17","row":112,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":8,"name":"number_8","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":23,"column":2,"name":"text_18","row":26,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":23,"column":20,"name":"text_19","row":30,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":31,"column":18,"name":"chart_10","row":32,"rowspan":32,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["all"],"borderRadius":4,"borderWidth":8}},{"colspan":50,"column":0,"name":"container_3","row":7,"rowspan":6,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":32,"column":2,"name":"text_20","row":70,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":4,"borderWidth":1}},{"colspan":6,"column":2,"name":"text_21","row":75,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":2,"name":"text_22","row":85,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":2,"name":"number_10","row":79,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":2,"name":"number_11","row":87,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":2,"name":"number_12","row":95,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":39,"column":9,"name":"chart_11","row":74,"rowspan":12,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#FFFFFF","borderEdges":["all"],"borderRadius":0,"borderWidth":8}},{"colspan":39,"column":9,"name":"chart_12","row":86,"rowspan":19,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#FFFFFF","borderEdges":["all"],"borderRadius":0,"borderWidth":8}},{"colspan":48,"column":1,"name":"table_2","row":114,"rowspan":31,"widgetStyle":{"borderEdges":[]}},{"colspan":17,"column":1,"name":"chart_13","row":32,"rowspan":32,"widgetStyle":{"backgroundColor":"rgb(18, 37, 76)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["all"],"borderRadius":4,"borderWidth":8}},{"colspan":4,"column":16,"name":"number_13","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":1,"name":"number_14","row":16,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":42,"column":1,"name":"filterpanel_3","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(230, 236, 242, 0)","borderColor":"rgba(255, 255, 255, 0)","borderEdges":["right"],"borderRadius":0,"borderWidth":8}},{"colspan":7,"column":2,"name":"text_24","row":93,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":43,"name":"listselector_1","row":8,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":1}}]}],"rowHeight":"fine","selectors":[],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"rgb(4, 29, 64)","cellSpacingX":0,"cellSpacingY":0,"fit":"original","gutterColor":"rgb(197, 211, 224)"},"version":1.0}],"layouts":[],"steps":{"Revenue___Quantity_1":{"broadcastFacet":true,"columns":{"label":{"type":"string"},"multiplyBy":{"type":"string"},"value":{"type":"string"},"Display":{"type":"string"}},"label":"Revenue / Quantity","selectMode":"singlerequired","start":"{\"display\":[\"Revenue\"]}","type":"staticflex","values":["{\"display\":\"Quantity\",\"value\":\"'Quantity'\",\"label\":\"Quantity\",\"multiplyBy\":\"first(FilledData.'SalesPrice')\"}","{\"display\":\"Revenue\",\"value\":\"'Revenue'\",\"label\":\"Revenue\",\"multiplyBy\":\"1\"}"]},"Details_table_with_f_1":{"broadcastFacet":true,"groups":["Product.Family","Product.Name","Order.Account.Name"],"label":"Details table for Forecast","numbers":["ForecastedQuantity","ActualQuantity","ForecastedAmount","DerivedActualAmount"],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.Account.Name' as 'Order.Account.Name', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Account.Name' as 'Order.Account.Name', 'AccountProductForecast.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_forecast;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nresult = group FilledData by 'Id' left, valid_slaps by 'Id'; result = foreach result generate  first(valid_slaps.'Product.Family') as 'Product.Family', first(valid_slaps.'Product.Name') as 'Product.Name', first(valid_slaps.'Order.Account.Name') as 'Order.Account.Name', sum(FilledData.'Actual Amount') as 'Actual Amount', sum(FilledData.'Actual Amount')/first(FilledData.'SalesPrice') as 'Actual Quantity', sum(FilledData.'Forecasted Amount') as 'Forecasted Amount', sum(FilledData.'Forecasted Amount')/first(FilledData.'SalesPrice') as 'Forecasted Quantity'; result = group result by ('Product.Family', 'Product.Name', 'Order.Account.Name'); result = foreach result generate 'Product.Family' as 'Product.Family', 'Product.Name' as 'Product.Name', 'Order.Account.Name' as 'Order.Account.Name', sum('Forecasted Quantity') as 'ForecastedQuantity', sum('Actual Quantity') as 'ActualQuantity', sum('Forecasted Amount') as 'ForecastedAmount', sum('Actual Amount') as 'DerivedActualAmount'; result = limit result 200;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","strings":["Product.Family","Product.Name","Order.Account.Name"],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"Total_Revenue_1":{"broadcastFacet":true,"groups":[],"label":"Total Revenue","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; all_slaps = filter all_slaps by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]); valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount'; End_Value = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount'; DataForFill = union Start, End_Value; DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Amount' as 'Amount', 'ActualDailyAmount' as 'ActualDailyAmount'; FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month'); FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Amount') as 'Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Amount' end as 'Amount', 'SalesPrice' as 'SalesPrice', (case when 'Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Amount' end) / 'SalesPrice' as 'Quantity'; result = group FilledData by all; result = foreach result generate  sum('Quantity') as 'Quantity', sum('Amount') as 'Revenue';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Total___Product_Fami_1":{"broadcastFacet":false,"datasets":[{"name":"MFG_SalesAgreementProductSchedule"}],"isGlobal":false,"label":"Total # Product Families, Products, Revenue","query":{"query":"{\"measures\":[[\"unique\",\"SalesAgreementProduct.Product.Family\"],[\"unique\",\"SalesAgreementProduct.ProductId\"],[\"sum\",\"DerivedActualAmount\"]]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":[],"plots":["unique_SalesAgreementProduct.Product.Family","unique_SalesAgreementProduct.ProductId","sum_DerivedActualAmount"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Total___Product_Fami_2":{"broadcastFacet":false,"groups":[],"label":"Total # Product Families, Products, Revenue including Forecast","numbers":["unique_Product.Family","unique_ProductId"],"query":"q = load \"MFG_OrderProduct4\";\nq_f = load \"MFG_AccountProductPeriodForecast1\";\nq = foreach q generate 'Product2Id' as 'ProductId', 'Product.Family' as 'ProductFamily';\nq_f = foreach q_f generate 'AccountProductForecast.ProductId' as 'ProductId', 'Product.Family' as 'ProductFamily';\nq_all = union q, q_f;\nq_all = group q_all by all;\nq_all = foreach q_all generate unique('ProductFamily') as 'unique_Product.Family', unique('ProductId') as 'unique_ProductId';\nq_all = limit q_all 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Demand_shortfall_ove_1":{"broadcastFacet":true,"groups":[],"label":"Actual vs Planned Difference over time","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; all_slaps = filter all_slaps by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]); valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Planned Amount') as 'Plan', (sum('Actual Amount') - sum('Planned Amount')) as 'Actual vs Planned Difference'; result = group result by ('Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', sum('Plan') as 'Planned Demand', sum('Actual') as 'Actual Demand', sum('Actual vs Planned Difference') as 'Actual vs Planned Difference';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Planned Demand","Actual Demand"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date:  [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"title":"Date (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"timeAxis":["StartDate_Year~~~StartDate_Month"],"trellis":[],"plots":["Actual vs Planned Difference","Plan","Actual"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Product_Product_Fami_1":{"broadcastFacet":true,"columns":{"order_label":{"type":"string"},"label":{"type":"string"},"value":{"type":"string"},"order_value":{"type":"string"},"Display":{"type":"string"}},"label":"Product/Product Family Selection","selectMode":"singlerequired","start":"{\"display\":[\"Product\"]}","type":"staticflex","values":["{\"display\":\"Product\",\"value\":\"'SalesAgreementProduct.Name'\",\"label\":\"SalesAgreementProduct.Name\",\"order_value\":\"'Product.Name'\",\"order_label\":\"'Product.Name'\"}","{\"display\":\"Product Category\",\"value\":\"'SalesAgreementProduct.Product.Family'\",\"label\":\"SalesAgreementProduct.Product.Family\",\"order_value\":\"'Product.Family'\",\"order_label\":\"'Product.Family'\"}"]},"Date_Selector_1":{"broadcastFacet":false,"datasets":[{"name":"MFG_SalesAgreementProductSchedule"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"StartDate\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","start":"[[1577847600000,1609372800000]]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Details_table_for_Sa_1":{"broadcastFacet":true,"groups":["SalesAgreementProduct.Product.Family","SalesAgreementProduct.Name","SalesAgreementProduct.SalesAgreement.Account.Name","SalesAgreementProduct.SalesAgreement.Name"],"label":"Details table for Sales Trends","numbers":["PlannedQuantity","ActualQuantity","DerivedPlannedAmount","DerivedActualAmount"],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; all_slaps = filter all_slaps by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]); valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by 'Id' left, valid_slaps by 'Id'; result = foreach result generate  first(valid_slaps.'SalesAgreementProduct.Product.Family') as 'SalesAgreementProduct.Product.Family', first(valid_slaps.'SalesAgreementProduct.Name') as 'SalesAgreementProduct.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.StartDate') as 'SalesAgreementProduct.SalesAgreement.StartDate', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.EndDate') as 'SalesAgreementProduct.SalesAgreement.EndDate', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.StatusCode') as 'SalesAgreementProduct.SalesAgreement.StatusCode', sum(FilledData.'Actual Amount') as 'Actual Amount', sum(FilledData.'Actual Amount')/first(FilledData.'SalesPrice') as 'Actual Quantity', sum(FilledData.'Planned Amount') as 'Planned Amount', sum(FilledData.'Planned Amount')/first(FilledData.'SalesPrice') as 'Planned Quantity'; result = group result by ('SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.Name', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'SalesAgreementProduct.SalesAgreement.Name'); result = foreach result generate 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', first('SalesAgreementProduct.SalesAgreement.StatusCode') as 'SalesAgreementProduct.SalesAgreement.StatusCode', first('SalesAgreementProduct.SalesAgreement.StartDate') as 'SalesAgreementProduct.SalesAgreement.StartDate', first('SalesAgreementProduct.SalesAgreement.EndDate') as 'SalesAgreementProduct.SalesAgreement.EndDate', sum('Planned Quantity') as 'PlannedQuantity', sum('Actual Quantity') as 'ActualQuantity', sum('Planned Amount') as 'DerivedPlannedAmount', sum('Actual Amount') as 'DerivedActualAmount'; result = limit result 200;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","strings":["SalesAgreementProduct.Product.Family","SalesAgreementProduct.Name","SalesAgreementProduct.SalesAgreement.Account.Name","SalesAgreementProduct.SalesAgreement.Name","SalesAgreementProduct.SalesAgreement.StatusCode","SalesAgreementProduct.SalesAgreement.StartDate","SalesAgreementProduct.SalesAgreement.EndDate"],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"__Demand_Shortfall_b_1":{"broadcastFacet":true,"groups":[],"label":"% Actual vs Planned Difference by product","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; all_slaps = filter all_slaps by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]); valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now())+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by 'Id' left, valid_slaps by 'Id'; result = foreach result generate first(valid_slaps.{{coalesce(cell(Product_Product_Fami_1.selection,0,\"value\"),\"NA\").asObject()}}) as {{coalesce(cell(Product_Product_Fami_1.selection,0,\"value\"),\"NA\").asObject()}}, sum(FilledData.'Actual Amount') / {{coalesce(cell(Revenue___Quantity_1.selection,0,\"multiplyBy\"),0).asObject()}} as 'Demand Met', sum(FilledData.'Planned Amount') / {{coalesce(cell(Revenue___Quantity_1.selection,0,\"multiplyBy\"),0).asObject()}} as 'Plan'; result = group result by ({{coalesce(cell(Product_Product_Fami_1.selection,0,\"value\"),\"NA\").asObject()}}); result = foreach result generate {{coalesce(cell(Product_Product_Fami_1.selection,0,\"value\"),\"NA\").asObject()}}, sum('Demand Met')/sum('Plan') as '% Demand Met'; result = order result by '% Demand Met' desc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":["{{coalesce(cell(Product_Product_Fami_1.selection,0,\"label\"),\"NA\").asObject()}}"],"plots":["% Demand Met"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Orders_Revenue_1":{"broadcastFacet":true,"groups":[],"label":"Orders Revenue","numbers":[],"query":"all_slaps = load \"MFG_OrderProduct4\";\nall_slaps = filter all_slaps by 'Order.StatusCode' == \"Activated\";\nvalid_slaps = filter all_slaps by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nvalid_slaps = filter valid_slaps by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nvalid_slaps = foreach valid_slaps generate 'Id', 'TotalPrice' as 'Amount' ;\nresult = group valid_slaps by all;\nresult = foreach result generate sum('Amount') as 'sum_TotalPrice';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Actual_vs_Forecast_D_1":{"broadcastFacet":true,"groups":[],"label":"Actual vs Forecast Difference Metric","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_forecast;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nresult = group FilledData by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Forecasted Amount') as 'Forecast', (sum('Actual Amount') - sum('Forecasted Amount')) as 'Actual vs Forecast Difference'; result = group result by all; result = foreach result generate sum('Forecast') as 'sum_Forecast Demand', sum('Actual') as 'sum_Actual Demand', sum('Actual vs Forecast Difference') as 'sum_Actual vs Forecast Difference';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":[],"plots":["sum_Forecast Demand","sum_Actual Demand","sum_Actual vs Forecast Difference"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Product_Account_Dema_1":{"broadcastFacet":true,"groups":[],"label":"Product-Account Actual vs Planned Difference","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; all_slaps = filter all_slaps by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]); valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now())+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', ('DerivedActualAmount'/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by 'Id' left, valid_slaps by 'Id'; result = foreach result generate first(valid_slaps.{{coalesce(cell(Product_Product_Fami_1.selection,0,\"value\"),\"NA\").asObject()}}) as {{coalesce(cell(Product_Product_Fami_1.selection,0,\"value\"),\"NA\").asObject()}}, first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', (sum(FilledData.'Actual Amount') - sum(FilledData.'Planned Amount')) / {{coalesce(cell(Revenue___Quantity_1.selection,0,\"multiplyBy\"),0).asObject()}} as 'Actual vs Planned Difference', sum(FilledData.'Planned Amount') as 'Plan'; result = group result by ({{coalesce(cell(Product_Product_Fami_1.selection,0,\"value\"),\"NA\").asObject()}}, 'SalesAgreementProduct.SalesAgreement.Account.Name'); result = foreach result generate {{coalesce(cell(Product_Product_Fami_1.selection,0,\"value\"),\"NA\").asObject()}}, 'SalesAgreementProduct.SalesAgreement.Account.Name', sum('Actual vs Planned Difference') as 'Actual vs Planned Difference'; result = order result by 'Actual vs Planned Difference' desc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"highColor":"#009DDF","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"lowColor":"#E2F4FC","visualizationType":"heatmap","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"columnMap":{"color":["Actual vs Planned Difference"],"x":["SalesAgreementProduct.SalesAgreement.Account.Name"],"y":["{{coalesce(cell(Product_Product_Fami_1.selection,0,\"label\"),\"NA\").asObject()}}"]},"showActionMenu":true,"x":{"showTitle":true,"showAxis":true,"title":""},"y":{"showTitle":true,"showAxis":true,"title":""},"theme":"wave","applyConditionalFormatting":true},"type":"chart"}},"Top_selling_products_1":{"broadcastFacet":true,"groups":[],"label":"Top selling products","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nresult = group all_slaps_order by ('Product.Name', 'Product.Family'); result = foreach result generate 'Product.Name', 'Product.Family', sum('Quantity') as 'Quantity', sum('TotalPrice') as 'Revenue';\nresult = group result by {{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),0).asObject()}}; result = foreach result generate {{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),0).asObject()}}, sum({{coalesce(cell(Revenue___Quantity_1.selection,0,\"value\"),0).asObject()}}) as {{coalesce(cell(Revenue___Quantity_1.selection,0,\"value\"),0).asObject()}}; result = order result by {{coalesce(cell(Revenue___Quantity_1.selection,0,\"value\"),0).asObject()}} desc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":["{{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_label\"),0).asObject()}}"],"plots":["{{coalesce(cell(Revenue___Quantity_1.selection,0,\"label\"),0).asObject()}}"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Actual_vs_Forecast_D_2":{"broadcastFacet":true,"groups":[],"label":"Actual vs Forecast Difference over time","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_forecast;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nresult = group FilledData by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Forecasted Amount') as 'Forecast', (sum('Actual Amount') - sum('Forecasted Amount')) as 'Actual vs Forecast Difference'; result = group result by ('Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'ServiceDate_Year~~~ServiceDate_Month', sum('Forecast') as 'Forecasted Demand', sum('Actual') as 'Actual Demand', sum('Actual vs Forecast Difference') as 'Actual vs Forecast Difference';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"stack":false,"showPoints":true,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Forecast Demand","Actual Demand"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["ServiceDate_Year~~~ServiceDate_Month"]},"description":"Date:  [ServiceDate_Year~~~ServiceDate_Month]"}},"visualizationType":"time-combo","missingValue":"connect","timeAxis":{"showTitle":true,"showAxis":true,"title":"Date (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"timeAxis":["ServiceDate_Year~~~ServiceDate_Month"],"trellis":[],"plots":["Actual vs Forecast Difference","Forecast","Actual"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","valueTypeOnLine":"none","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Demand_Shortfall_Met_1":{"broadcastFacet":true,"groups":[],"label":"Actual vs Planned Difference Metric","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; all_slaps = filter all_slaps by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]); valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && date_to_epoch(now())>= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(now()) && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && (date_to_epoch(now()) >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; End_Value_planned = foreach valid_slaps generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount'; DataForFill_planned = union Start, End_Value_planned; DataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; FilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount'; FilledData = union FilledData_actual, FilledData_planned; result = group FilledData by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Planned Amount') as 'Plan', (sum('Actual Amount') - sum('Planned Amount')) as 'Actual vs Planned Difference'; result = group result by all; result = foreach result generate sum('Plan') as 'sum_Planned Demand', sum('Actual') as 'sum_Actual Demand', sum('Actual vs Planned Difference') as 'sum_Actual vs Planned Difference';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":[],"plots":["sum_Planned Demand","sum_Actual Demand","sum_Actual vs Planned Difference"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Forecast_Status_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_AccountProductPeriodForecast1"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Forecast.Status\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":true,"visualizationParameters":{}},"Total_Products_Produ_1":{"broadcastFacet":true,"groups":[],"label":"Total Products Product Families Orders and SA","numbers":[],"query":"q = load \"MFG_OrderProduct4\";\nq_s = load \"MFG_SalesAgreementProductSchedule\";\nq = foreach q generate 'Product2Id' as 'ProductId', 'Product.Family' as 'ProductFamily';\nq_s = foreach q_s generate 'SalesAgreementProduct.ProductId' as 'ProductId', 'SalesAgreementProduct.Product.Family' as 'ProductFamily';\nq_all = union q, q_s;\nq_all = group q_all by all;\nq_all = foreach q_all generate unique('ProductFamily') as 'unique_Product.Family', unique('ProductId') as 'unique_ProductId';\nq_all = limit q_all 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Date_Filter_1":{"broadcastFacet":true,"groups":[],"label":"Date_Filter","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = foreach q generate \"1970\" as 'Date_Year', \"01\" as 'Date_Month', \"01\" as 'Date_Day';\nq = group q by ('Date_Year', 'Date_Month', 'Date_Day');\nq = foreach q generate 'Date_Year', 'Date_Month', 'Date_Day', count() as 'sum';\n-- use fill() to generate null rows for any missing dates. Then you can use timeseries().\nq = fill q by (dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = timeseries q generate 'sum' as 'cnt' with (length=60000,  dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = foreach q generate 'Date_Year' + \"-\" + 'Date_Month' + \"-\" + 'Date_Day'+ \" 00:00:00\" as 'Date','Date_Year', 'Date_Month', 'Date_Day';\nq = filter q by {{row(Date_Selector_1.selection, [0], [\"min\", \"max\"]).asDateRange(\"date('Date_Year', 'Date_Month', 'Date_Day')\")}};\nq = foreach q generate toDate('Date') as 'Date', date_to_epoch(toDate('Date')) as 'Date_sec_epoch';\nq = group q by all;\nq = foreach q generate min('Date') as 'Min Date', toDate(max('Date_sec_epoch')+86399) as 'Max Date', min('Date_sec_epoch')*1000 as 'Min', (max('Date_sec_epoch')+86399)*1000 as 'Max',           date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))*1000 as 'Prev_Min', (date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))+86399)*1000 as 'Prev_Max';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"ST_Details_table_for_1":{"broadcastFacet":true,"groups":["SalesAgreementProduct.Product.Family","SalesAgreementProduct.Name","SalesAgreementProduct.SalesAgreement.Account.Name","SalesAgreementProduct.SalesAgreement.Name"],"label":"Sales Trends Details Table","numbers":["PlannedQuantity","ActualQuantityOrders","DerivedPlannedAmount","DerivedActualAmountOrders"],"query":"all_slaps_schedule = load \"MFG_SalesAgreementProductSchedule\";\nall_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_schedule = filter all_slaps_schedule by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nall_slaps_schedule = filter all_slaps_schedule by 'isValidProductSchedule' == \"true\";\nall_slaps_schedule = filter all_slaps_schedule by 'StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_schedule = filter all_slaps_schedule by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Product.Name' as 'SalesAgreementProduct.Name', 'Product.Family' as 'SalesAgreementProduct.Product.Family', 'Order.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'Order.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'Order.SalesAgreement.StatusCode' as 'SalesAgreementProduct.SalesAgreement.StatusCode', 'Order.SalesAgreement.StartDate' as 'SalesAgreementProduct.SalesAgreement.StartDate', 'Order.SalesAgreement.EndDate' as 'SalesAgreementProduct.SalesAgreement.EndDate','Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'PlannedAmountFinal', 0 as 'PlannedDailyAmount';\nall_slaps_schedule = foreach all_slaps_schedule generate 'Id' as 'Id', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', 'SalesAgreementProduct.SalesAgreement.StatusCode' as 'SalesAgreementProduct.SalesAgreement.StatusCode', 'SalesAgreementProduct.SalesAgreement.StartDate' as 'SalesAgreementProduct.SalesAgreement.StartDate', 'SalesAgreementProduct.SalesAgreement.EndDate' as 'SalesAgreementProduct.SalesAgreement.EndDate', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'SalesPrice' as 'SalesPrice', DiscountPercentage as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_schedule;\nStart = foreach all_slaps_schedule generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_Planned = foreach all_slaps_schedule generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount';\nDataForFill_Planned = union Start, End_Value_Planned;\nDataForFill_Planned = foreach DataForFill_Planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_Planned = fill DataForFill_Planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Planned = group FilledData_Planned by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Planned = foreach FilledData_Planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Planned Amount') as 'Planned Amount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Planned = filter FilledData_Planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Planned = foreach FilledData_Planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount';\nFilledData = union FilledData_actual, FilledData_Planned;\nresult = group FilledData by 'Id' left, valid_slaps by 'Id'; result = foreach result generate  first(valid_slaps.'SalesAgreementProduct.Product.Family') as 'SalesAgreementProduct.Product.Family', first(valid_slaps.'SalesAgreementProduct.Name') as 'SalesAgreementProduct.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.StartDate') as 'SalesAgreementProduct.SalesAgreement.StartDate', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.EndDate') as 'SalesAgreementProduct.SalesAgreement.EndDate', first(valid_slaps.'SalesAgreementProduct.SalesAgreement.StatusCode') as 'SalesAgreementProduct.SalesAgreement.StatusCode', sum(FilledData.'Actual Amount') as 'Actual Amount', sum(FilledData.'Actual Amount')/first(FilledData.'SalesPrice') as 'Actual Quantity', sum(FilledData.'Planned Amount') as 'Planned Amount', sum(FilledData.'Planned Amount')/first(FilledData.'SalesPrice') as 'Planned Quantity'; result = group result by ('SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.Name', 'SalesAgreementProduct.SalesAgreement.Account.Name', 'SalesAgreementProduct.SalesAgreement.Name'); result = foreach result generate 'SalesAgreementProduct.Product.Family' as 'SalesAgreementProduct.Product.Family', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', first('SalesAgreementProduct.SalesAgreement.StatusCode') as 'Sales Agreement State', first('SalesAgreementProduct.SalesAgreement.StartDate') as 'SalesAgreementProduct.SalesAgreement.StartDate', first('SalesAgreementProduct.SalesAgreement.EndDate') as 'SalesAgreementProduct.SalesAgreement.EndDate', sum('Planned Quantity') as 'PlannedQuantity', sum('Actual Quantity') as 'ActualQuantityOrders', sum('Planned Amount') as 'DerivedPlannedAmount', sum('Actual Amount') as 'DerivedActualAmountOrders'; result = limit result 200;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","start":"[]","strings":["SalesAgreementProduct.Product.Family","SalesAgreementProduct.Name","SalesAgreementProduct.SalesAgreement.Account.Name","SalesAgreementProduct.SalesAgreement.Name","Sales Agreement State","SalesAgreementProduct.SalesAgreement.StartDate","SalesAgreementProduct.SalesAgreement.EndDate"],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"Top_accounts_contrib_1":{"broadcastFacet":true,"groups":[],"label":"Top accounts contributing to sales","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nresult = group all_slaps_order by 'Order.Account.Name';\nresult = foreach result generate 'Order.Account.Name', sum('Quantity') as 'Quantity', sum('TotalPrice') as 'Revenue';\nresult = order result by 'Revenue' desc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":["SalesAgreementProduct.SalesAgreement.Account.Name"],"plots":["Revenue"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Sales_Trends_by_Prod_1":{"broadcastFacet":true,"groups":[],"label":"Sales Trends by Product","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nresult = group all_slaps_order by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Product.Name', 'Product.Family'); result = foreach result generate 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Product.Name', 'Product.Family', sum('Quantity') as 'Quantity', sum('TotalPrice') as 'Revenue';\nresult = group result by ({{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),\"NA\").asObject()}}, 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\nresult = foreach result generate {{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),\"NA\").asObject()}}, 'Order.EffectiveDate_Year'+\"~~~\"+'Order.EffectiveDate_Month' as 'Order.EffectiveDate_Year~~~Order.EffectiveDate_Month', sum({{coalesce(cell(Revenue___Quantity_1.selection,0,\"value\"),0).asObject()}}) as {{coalesce(cell(Revenue___Quantity_1.selection,0,\"value\"),0).asObject()}}; result = order result by {{coalesce(cell(Revenue___Quantity_1.selection,0,\"value\"),0).asObject()}} desc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":true,"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"split":["{{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_label\"),0).asObject()}}"],"timeAxis":["Order.EffectiveDate_Year~~~Order.EffectiveDate_Month"],"trellis":[],"plots":["{{coalesce(cell(Revenue___Quantity_1.selection,0,\"label\"),0).asObject()}}"]},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"}},"Product_Account_Actu_1":{"broadcastFacet":true,"groups":[],"label":"Product-Account Actual vs Forecast Difference","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.Account.Name' as 'Order.Account.Name', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Account.Name' as 'Order.Account.Name', 'AccountProductForecast.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_forecast;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nresult = group FilledData by 'Id' left, valid_slaps by 'Id';\n result = foreach result generate first(valid_slaps.{{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),\"NA\").asObject()}}) as {{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),\"NA\").asObject()}}, first(valid_slaps.'Order.Account.Name') as 'Order.Account.Name', (sum(FilledData.'Actual Amount') - sum(FilledData.'Forecasted Amount')) / {{coalesce(cell(Revenue___Quantity_1.selection,0,\"multiplyBy\"),0).asObject()}} as 'Actual vs Forecast Difference', sum(FilledData.'Forecasted Amount') as 'Plan'; result = group result by ({{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),\"NA\").asObject()}}, 'Order.Account.Name'); result = foreach result generate {{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),\"NA\").asObject()}}, 'Order.Account.Name', sum('Actual vs Forecast Difference') as 'Actual vs Forecast Difference'; result = order result by 'Actual vs Forecast Difference' desc;","receiveFacetSource":{"mode":"exclude","steps":["Product_Account_Actu_1"]},"selectMode":"multi","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"highColor":"#009DDF","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"lowColor":"#E2F4FC","visualizationType":"heatmap","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"columnMap":{"color":["Actual vs Forecast Difference"],"x":["Order.Account.Name"],"y":["{{coalesce(cell(Product_Product_Fami_1.selection,0,\"label\"),\"NA\").asObject()}}"]},"showActionMenu":true,"x":{"showTitle":true,"showAxis":true,"title":""},"y":{"showTitle":true,"showAxis":true,"title":""},"theme":"wave","applyConditionalFormatting":true},"type":"chart"}},"__Actual_vs_Forecast_1":{"broadcastFacet":true,"groups":[],"label":"% Actual vs Forecast Difference by product","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Order.Account.Name' as 'Order.Account.Name', 'Product.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'Account.Name' as 'Order.Account.Name', 'AccountProductForecast.Name' as 'Product.Name', 'Product.Family' as 'Product.Family', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nvalid_slaps = union all_slaps_order, all_slaps_forecast;\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nresult = group FilledData by 'Id' left, valid_slaps by 'Id';\n result = foreach result generate first(valid_slaps.{{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),\"NA\").asObject()}}) as {{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),\"NA\").asObject()}}, sum(FilledData.'Actual Amount') / {{coalesce(cell(Revenue___Quantity_1.selection,0,\"multiplyBy\"),0).asObject()}} as 'Demand Met', sum(FilledData.'Forecasted Amount') / {{coalesce(cell(Revenue___Quantity_1.selection,0,\"multiplyBy\"),0).asObject()}} as 'Forecast'; result = group result by ({{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),\"NA\").asObject()}}); result = foreach result generate {{coalesce(cell(Product_Product_Fami_1.selection,0,\"order_value\"),\"NA\").asObject()}}, sum('Demand Met')/sum('Forecast') as '% Demand Met'; result = order result by '% Demand Met' desc nulls last;","receiveFacetSource":{"mode":"exclude","steps":["__Actual_vs_Forecast_1"]},"selectMode":"multi","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":["{{coalesce(cell(Product_Product_Fami_1.selection,0,\"label\"),\"NA\").asObject()}}"],"plots":["% Demand Met"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Top_agreements_contr_1":{"broadcastFacet":true,"groups":[],"label":"Top agreements contributing to sales","numbers":[],"query":"all_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nresult = group all_slaps_order by ('Order.SalesAgreement.Name', 'Order.SalesAgreement.Status');\nresult = foreach result generate 'Order.SalesAgreement.Name', 'Order.SalesAgreement.Status', sum('Quantity') as 'Quantity', coalesce(sum('TotalPrice'),0) as 'Revenue';\nresult = order result by 'Revenue' desc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","totalSumMode":"none","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"stackhbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"split":["Order.SalesAgreement.Status"],"trellis":[],"dimensionAxis":["Order.SalesAgreement.Name"],"plots":["Revenue"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"normalize":false,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}}},"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1},"widgets":{"number_12":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_Actual Demand","numberColor":"#091A3E","numberSize":24,"showActionMenu":true,"step":"Actual_vs_Forecast_D_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_11":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_Forecast Demand","numberColor":"#091A3E","numberSize":24,"showActionMenu":true,"step":"Actual_vs_Forecast_D_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_10":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_Actual vs Forecast Difference","numberColor":"#091A3E","numberSize":24,"showActionMenu":true,"step":"Actual_vs_Forecast_D_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_18":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#FFFFFF","align":"left"},"insert":"How are products performing against forecasted demand?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_15":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_17":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"10px","color":"#091A3E","align":"left"},"insert":"Metrics are calculated for the specified period."}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_14":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_13":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_19":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Which accounts have greatest variation in Actual vs. Forecasted Demand?"}]},"interactions":[],"showActionMenu":true,"tooltip":""},"type":"text"},"text_14":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"How did the product perform?"}]},"interactions":[],"showActionMenu":true,"tooltip":""},"type":"text"},"text_13":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#091A3E","align":"left"},"insert":"Actual Demand"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_16":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Which accounts have caused maximum Actual vs Planned Difference for the products?"}]},"interactions":[],"showActionMenu":true,"tooltip":""},"type":"text"},"text_15":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Products by Demand Realization\n"}]},"interactions":[],"showActionMenu":true,"tooltip":""},"type":"text"},"text_10":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#FFFFFF","align":"left"},"insert":"How are my products performing?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_12":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#091A3E","align":"left"},"insert":"Planned Demand"}]},"interactions":[],"showActionMenu":true},"type":"text"},"number_14":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"unique_ProductId","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Total___Product_Fami_2","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_11":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#091A3E","align":"left"},"insert":"Actual vs. Planned Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"number_13":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_TotalPrice","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Orders_Revenue_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"container_1":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_2":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_3":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_4":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_5":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_3":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#E6ECF2","align":"left"},"insert":"Products"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_6":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"highColor":"#009DDF","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"lowColor":"#E2F4FC","visualizationType":"heatmap","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"showActionMenu":true,"x":{"showTitle":true,"showAxis":true,"title":""},"y":{"showTitle":true,"showAxis":true,"title":""},"theme":"dark","step":"Product_Account_Dema_1","applyConditionalFormatting":true},"type":"chart"},"text_2":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#E6ECF2","align":"left"},"insert":"Product Categories"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_5":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"dark","step":"__Demand_Shortfall_b_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"container_7":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_5":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":"Details"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_8":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Planned Demand","Actual Demand"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date:  [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"vbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"columnMap":{"trellis":[],"dimensionAxis":["StartDate_Year~~~StartDate_Month"],"plots":["Actual vs Planned Difference"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"light","step":"Demand_shortfall_ove_1","compactDecimalDigits":-1,"applyConditionalFormatting":true,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":false,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"text_4":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#E6ECF2","align":"left"},"insert":"Actual Revenue (Orders)"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_7":{"parameters":{"showPoints":false,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Planned Demand","Actual Demand","Actual vs Planned Difference"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date:  [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"exploreLink":true,"timeAxis":{"showTitle":true,"showAxis":true,"title":"Date (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"columnMap":{"split":[],"timeAxis":["StartDate_Year~~~StartDate_Month"],"trellis":[],"plots":["Planned Demand","Actual Demand"]},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"light","step":"Demand_shortfall_ove_1","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"container_9":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"chart_2":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":16,"subtitleFontSize":11,"label":"Top Accounts by Revenue","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":["Order.Account.Name"],"plots":["Revenue"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"light","step":"Top_accounts_contrib_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"text_7":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"20px","color":"#091A3E","align":"left"},"insert":"When have I had the highest Actual vs Planned Difference?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_6":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#FFFFFF","align":"right"},"insert":"Date Range:"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_1":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":16,"subtitleFontSize":12,"label":"","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"dark","step":"Top_selling_products_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"chart_4":{"parameters":{"showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Revenue"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":["Product.Name","Order.EffectiveDate_Year~~~Order.EffectiveDate_Month"]}}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"exploreLink":true,"timeAxis":{"showTitle":true,"showAxis":true,"title":"Date (Year-Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Actual Revenue","customDomain":{"showDomain":false}},"valueType":"none","theme":"dark","step":"Sales_Trends_by_Prod_1","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"text_9":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#C6D3E1","align":"left"},"insert":"Select a product to view its sales trends\n"}]},"interactions":[],"showActionMenu":true,"tooltip":""},"type":"text"},"chart_3":{"parameters":{"autoFitMode":"keepLabels","legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","totalSumMode":"none","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"stackhbar","exploreLink":true,"title":{"fontSize":16,"subtitleFontSize":11,"label":"Top Agreements by Revenue","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"columnMap":{"split":["Order.SalesAgreement.Status"],"trellis":[],"dimensionAxis":["Order.SalesAgreement.Name"],"plots":["Revenue"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"normalize":false,"valueType":"compactNumber","theme":"light","step":"Top_agreements_contr_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"text_8":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#FFFFFF","align":"left"},"insert":"How are the products doing against their planned demand?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_1":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":"Product Performance"}]},"interactions":[],"showActionMenu":true},"type":"text"},"filterpanel_1":{"parameters":{"filterItemOptions":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderRadius":0,"borderWidth":0,"propertyColor":"#54698D","valueColor":"#16325C"},"filters":[],"itemsPerRow":8,"showAllFilters":true,"title":{"separatorColor":"#E6ECF2","text":{"align":"left","color":"#091A3E","fontSize":14,"label":"Filters"},"visible":false}},"type":"filterpanel"},"number_5":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_Planned Demand","numberColor":"#091A3E","numberSize":24,"showActionMenu":true,"step":"Demand_Shortfall_Met_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_4":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_Actual vs Planned Difference","numberColor":"#091A3E","numberSize":24,"showActionMenu":true,"step":"Demand_Shortfall_Met_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_3":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"unique_SalesAgreementProduct.ProductId","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Total___Product_Fami_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_2":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"unique_ProductId","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Total_Products_Produ_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_1":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"unique_Product.Family","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Total_Products_Produ_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"container_12":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_11":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"image_3":{"parameters":{"alignmentX":"center","alignmentY":"center","fit":"stretch","image":{"name":"manufacturing_app_icon2xpng8","namespace":""},"interactions":[]},"type":"image"},"chart_13":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"dark","step":"__Actual_vs_Forecast_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"chart_12":{"parameters":{"showPoints":false,"legend":{"descOrder":false,"showHeader":false,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Forecasted Demand","Actual Demand","Actual vs Forecast Difference"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["ServiceDate_Year~~~ServiceDate_Month"]},"description":"Date:  [ServiceDate_Year~~~ServiceDate_Month]"}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"exploreLink":true,"timeAxis":{"showTitle":true,"showAxis":true,"title":"Date (Year>Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"columnMap":{"split":[],"timeAxis":["ServiceDate_Year~~~ServiceDate_Month"],"trellis":[],"plots":["Forecasted Demand","Actual Demand"]},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"light","step":"Actual_vs_Forecast_D_2","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"chart_11":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Forecasted Demand","Actual Demand"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["ServiceDate_Year~~~ServiceDate_Month"]},"description":"Date:  [ServiceDate_Year~~~ServiceDate_Month]"}},"visualizationType":"vbar","missingValue":"connect","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"columnMap":{"trellis":[],"dimensionAxis":["ServiceDate_Year~~~ServiceDate_Month"],"plots":["Actual vs Forecast Difference"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"light","step":"Actual_vs_Forecast_D_2","compactDecimalDigits":-1,"applyConditionalFormatting":true,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":false,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"chart_10":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"highColor":"#009DDF","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"lowColor":"#E2F4FC","visualizationType":"heatmap","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"showActionMenu":true,"x":{"showTitle":true,"showAxis":true,"title":""},"y":{"showTitle":true,"showAxis":true,"title":""},"theme":"dark","step":"Product_Account_Actu_1","applyConditionalFormatting":true},"type":"chart"},"number_9":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Revenue","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Total_Revenue_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_8":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"unique_Product.Family","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Total___Product_Fami_2","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_7":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"unique_SalesAgreementProduct.Product.Family","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"Total___Product_Fami_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_6":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_Actual Demand","numberColor":"#091A3E","numberSize":24,"showActionMenu":true,"step":"Demand_Shortfall_Met_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"filterpanel_4":{"parameters":{"filterItemOptions":{"propertyColor":"#54698D","valueColor":"#16325C"},"filters":[],"showAllFilters":false},"type":"filterpanel"},"filterpanel_3":{"parameters":{"filterItemOptions":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderRadius":4,"borderWidth":0,"propertyColor":"#54698D","valueColor":"#16325C"},"filters":[],"itemsPerRow":8,"showAllFilters":true,"title":{"separatorColor":"#E6ECF2","text":{"align":"left","color":"#091A3E","fontSize":14,"label":"Filters"},"visible":false}},"type":"filterpanel"},"dateselector_2":{"parameters":{"absoluteModeEnabled":true,"calendarTypeSwitchingAllowed":true,"defaultFiscalMode":false,"displayMode":"filter","filterStyle":{"titleColor":"#FFFFFF","valueColor":"#FFFFFF"},"instant":false,"presetsEnabled":true,"relativeModeEnabled":true,"showActionMenu":false,"step":"Date_Selector_1","title":""},"type":"dateselector"},"text_25":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":"Details"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_24":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#091A3E","align":"left"},"insert":"Actual Demand (Orders)"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_21":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#091A3E","align":"left"},"insert":"Actual (Orders) vs. Forecasted Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"navigation_1":{"parameters":{"fontSize":14,"selectedTab":{"backgroundColor":"#FFFFFF","borderColor":"#0070D2","borderEdges":["bottom"],"borderWidth":2,"textColor":"#0070D2"},"tabCount":3,"textColor":"#54698D"},"type":"navigation"},"text_20":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"20px","color":"#091A3E","align":"left"},"insert":"When have I had the highest Actual vs Forecast Difference?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_23":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#E6ECF2","align":"left"},"insert":"Actual Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_22":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#091A3E","align":"left"},"insert":"Forecasted Demand"}]},"interactions":[],"showActionMenu":true},"type":"text"},"table_1":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12,"textWrap":false},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12,"textWrap":false},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"showRowIndexColumn":true,"step":"Details_table_for_Sa_1","verticalPadding":8},"type":"table"},"table_2":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12,"textWrap":false},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12,"textWrap":false},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"showRowIndexColumn":true,"step":"Details_table_with_f_1","verticalPadding":8},"type":"table"},"table_3":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12,"textWrap":false},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12,"textWrap":false},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"showRowIndexColumn":true,"step":"ST_Details_table_for_1","verticalPadding":8},"type":"table"},"pillbox_1":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"rgb(51, 87, 121)","borderEdges":["all"],"borderWidth":0,"textColor":"#C6D3E1"},"showActionMenu":false,"step":"Product_Product_Fami_1","textColor":"#7D98B3"},"type":"pillbox"},"pillbox_3":{"parameters":{"compact":false,"exploreLink":false,"fontSize":14,"selectedTab":{"backgroundColor":"rgb(17, 48, 91)","borderColor":"rgb(51, 87, 121)","borderEdges":[],"borderWidth":0,"textColor":"#C6D3E1"},"showActionMenu":false,"step":"Revenue___Quantity_1","textColor":"#7D98B3"},"type":"pillbox"},"listselector_1":{"parameters":{"compact":false,"displayMode":"filter","exploreLink":false,"filterStyle":{"titleColor":"#54698D","valueColor":"#16325C"},"instant":false,"measureField":"count","showActionMenu":false,"step":"Forecast_Status_1","title":"Forecast Status"},"type":"listselector"}}}