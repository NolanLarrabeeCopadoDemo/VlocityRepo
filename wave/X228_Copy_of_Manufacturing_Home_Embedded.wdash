{"dataSourceLinksInfo":{"enableAutomaticLinking":false,"excludeRelationships":[],"links":[{"fields":[{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Name"},{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Name"}],"label":"Account Name - SAPS and AccProdPeriodForecast","name":"Link_4710"},{"fields":[{"dataSourceName":"MFG_SalesAgreementProductSchedule","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"SalesAgreementProduct.SalesAgreement.Account.Name"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Name"}],"label":"Account Name - SAPS and OrderProducts","name":"Link_5435"},{"fields":[{"dataSourceName":"MFG_AccountProductPeriodForecast1","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Account.Name"},{"dataSourceName":"MFG_OrderProduct4","dataSourceNamespace":"","dataSourceType":"dataset","fieldName":"Order.Account.Name"}],"label":"Account Name - AccProdPeriodForecast and OrderProducts","name":"Link_1020"}]},"filters":[],"gridLayouts":[{"maxWidth":1500,"name":"Default","numColumns":50,"pages":[{"label":"Home","name":"4abc4029-ae63-4361-b237-670eedd7be05","navigationHidden":false,"widgets":[{"colspan":15,"column":33,"name":"container_8","row":12,"rowspan":15,"widgetStyle":{"backgroundColor":"rgba(244, 244, 244, 0.4)","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":46,"name":"link_6","row":12,"rowspan":15,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":33,"name":"number_2","row":18,"rowspan":8,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":39,"name":"chart_7","row":14,"rowspan":12,"widgetStyle":{"borderEdges":[]}},{"colspan":14,"column":18,"name":"container_9","row":12,"rowspan":15,"widgetStyle":{"backgroundColor":"rgba(244, 244, 244, 0.4)","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":18,"name":"number_4","row":18,"rowspan":8,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":30,"name":"link_8","row":12,"rowspan":15,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":24,"name":"chart_8","row":17,"rowspan":8,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":2,"name":"container_10","row":12,"rowspan":15,"widgetStyle":{"backgroundColor":"rgba(244, 244, 244, 0.4)","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":15,"name":"link_9","row":12,"rowspan":15,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":7,"name":"chart_9","row":14,"rowspan":12,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_11","row":0,"rowspan":11,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":28,"column":6,"name":"chart_10","row":1,"rowspan":8,"widgetStyle":{"backgroundColor":"rgba(244, 244, 244, 0.4)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":2,"name":"image_2","row":12,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(255, 255, 255, 0)","borderEdges":[],"borderRadius":0,"borderWidth":8}},{"colspan":2,"column":18,"name":"image_5","row":12,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":33,"name":"image_6","row":12,"rowspan":5,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":2,"name":"number_6","row":18,"rowspan":8,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":2,"name":"text_4","row":7,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":3,"name":"image_3","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":42,"name":"image_1","row":31,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":34,"name":"text_1","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":41,"name":"text_2","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":34,"name":"text_3","row":7,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":41,"name":"text_5","row":7,"rowspan":3,"widgetStyle":{"borderEdges":[]}}]},{"label":"Current Business","name":"96fb1d7e-ae0d-4b51-bd1b-46fee7880e63","navigationHidden":false,"widgets":[{"colspan":7,"column":42,"name":"image_1","row":31,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":0,"name":"container_4","row":10,"rowspan":22,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["right"],"borderRadius":0,"borderWidth":1}},{"colspan":34,"column":14,"name":"chart_1","row":10,"rowspan":21,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":14,"name":"link_7","row":31,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":2,"name":"number_8","row":18,"rowspan":6,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":2,"name":"number_9","row":11,"rowspan":6,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":2,"name":"number_10","row":25,"rowspan":6,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_11","row":0,"rowspan":10,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":28,"column":6,"name":"chart_10","row":1,"rowspan":8,"widgetStyle":{"backgroundColor":"rgba(244, 244, 244, 0.4)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":48,"name":"link_3","row":10,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":3,"name":"image_3","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":2,"name":"text_4","row":7,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":34,"name":"text_1","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":34,"name":"text_3","row":7,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":41,"name":"text_2","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":41,"name":"text_5","row":7,"rowspan":3,"widgetStyle":{"borderEdges":[]}}]},{"label":"Revenue Realization","name":"92345bd3-adbe-41eb-9ec5-04981e61717e","navigationHidden":false,"widgets":[{"colspan":9,"column":2,"name":"number_3","row":26,"rowspan":6,"widgetStyle":{"borderEdges":[]}},{"colspan":34,"column":14,"name":"chart_2","row":10,"rowspan":21,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":8,"borderWidth":2}},{"colspan":13,"column":0,"name":"container_2","row":10,"rowspan":22,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["right"],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":42,"name":"image_1","row":31,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":14,"name":"link_2","row":31,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":2,"name":"number_11","row":19,"rowspan":6,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":2,"name":"number_12","row":12,"rowspan":6,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":48,"name":"link_3","row":10,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_11","row":0,"rowspan":10,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":28,"column":6,"name":"chart_10","row":1,"rowspan":8,"widgetStyle":{"backgroundColor":"rgba(244, 244, 244, 0.4)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":3,"name":"image_3","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":2,"name":"text_4","row":7,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":34,"name":"text_1","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":34,"name":"text_3","row":7,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":41,"name":"text_2","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":41,"name":"text_5","row":7,"rowspan":3,"widgetStyle":{"borderEdges":[]}}]},{"label":"Upcoming Business","name":"53d74eb6-7714-449d-b10a-335bf96173db","navigationHidden":false,"widgets":[{"colspan":7,"column":42,"name":"image_1","row":31,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":0,"name":"container_3","row":10,"rowspan":22,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["right"],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":2,"name":"number_1","row":12,"rowspan":6,"widgetStyle":{"borderEdges":[]}},{"colspan":34,"column":14,"name":"chart_4","row":10,"rowspan":21,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":14,"name":"link_1","row":31,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":2,"name":"number_14","row":19,"rowspan":6,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":2,"name":"number_15","row":26,"rowspan":6,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":48,"name":"link_3","row":10,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":50,"column":0,"name":"container_11","row":0,"rowspan":10,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":28,"column":6,"name":"chart_10","row":1,"rowspan":8,"widgetStyle":{"backgroundColor":"rgba(244, 244, 244, 0.4)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":3,"name":"image_3","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":2,"name":"text_4","row":7,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":34,"name":"text_1","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":34,"name":"text_3","row":7,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":41,"name":"text_2","row":3,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":41,"name":"text_5","row":7,"rowspan":3,"widgetStyle":{"borderEdges":[]}}]}],"rowHeight":"fine","selectors":[],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"#FFFFFF","cellSpacingX":0,"cellSpacingY":0,"fit":"original","gutterColor":"#FFFFFF"},"version":1.0}],"layouts":[],"steps":{"Account_Actual_Reven_3":{"broadcastFacet":true,"groups":[],"label":"Account Actual Revenue","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\nforecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current fiscal_year\"];\n forecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity';\n forecasts_results = group FilledData by ('Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity';\n forecast_results = filter forecasts_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current month\"];\n forecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\nagreements = load \"MFG_SalesAgreementProductSchedule\";\nagreements = filter agreements by 'isValidProductSchedule' == \"true\";\n agreements = filter agreements by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\n agreements = filter agreements by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"current fiscal_year\"];\n agreements = filter agreements by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"current fiscal_year\"..];\n agreements = foreach agreements generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n Start = foreach agreements generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyQuantity' else 'PlannedQuantityFinal' end as 'Quantity'                , 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n End_Value = foreach agreements generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyQuantity' \n    else 0 end as 'Quantity', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', sum('Quantity') as 'Quantity', min(first('PlannedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyQuantity';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'PlannedDailyQuantity' else 'Quantity' end as 'Quantity';\n agreement_results = group FilledData by ('Date_Year', 'Date_Month');\n agreement_results = foreach agreement_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n agreement_results = foreach agreement_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity';\n agreement_results = filter agreement_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current month\"];\n agreement_results = group agreement_results by 'StartDate_Year~~~StartDate_Month';\n agreement_results = foreach agreement_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity';\n agreement_results = order agreement_results by 'StartDate_Year~~~StartDate_Month' asc;\norders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current month\"];\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..];\n orders = group orders by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\n order_results = foreach orders generate 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n result = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, agreement_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate coalesce(coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month'), agreement_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'ActualAmount', coalesce(sum(order_results.'cumm_Amount'),0) as 'ActualAmount_Cumulative', coalesce(sum(agreement_results.'Amount'),0) as 'PlannedAmount', coalesce(sum(agreement_results.'cumm_Amount'),0) as 'PlannedAmount_Cumulative', coalesce(sum(forecast_results.'Amount'),0) as 'ForecastAmount', coalesce(sum(forecast_results.'cumm_Amount'),0) as 'ForecastAmount_Cumulative', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(order_results.'cumm_Quantity'),0) as 'ActualQuantity_Cumulative', coalesce(sum(agreement_results.'Quantity'),0) as 'PlannedQuantity', coalesce(sum(agreement_results.'cumm_Quantity'),0) as 'PlannedQuantity_Cumulative', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'cumm_Quantity'),0) as 'ForecastQuantity_Cumulative';\n result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount') as 'PlannedAmount', sum('ForecastAmount') as 'ForecastAmount', sum(sum('ActualAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualAmount_Cumulative', sum(sum('PlannedAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedAmount_Cumulative', sum(sum('ForecastAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastAmount_Cumulative', sum('ActualQuantity') as 'ActualQuantity', sum('PlannedQuantity') as 'PlannedQuantity', sum('ForecastQuantity') as 'ForecastQuantity', sum(sum('ActualQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualQuantity_Cumulative', sum(sum('PlannedQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedQuantity_Cumulative', sum(sum('ForecastQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastQuantity_Cumulative';\n result = group result by all;\n result = foreach result generate sum('PlannedAmount') as 'PlannedAmount', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount')-sum('ActualAmount') as 'Revenue_Leak';\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["ActualAmount_Cumulative","PlannedAmount_Cumulative","ForecastAmount_Cumulative"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date: [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":["cumm_Amount"],"showDashLine":false},"timeAxis":{"showTitle":false,"showAxis":true,"referenceLines":[],"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","markers":[],"applyConditionalFormatting":true,"drawArea":{"measure":"ActualAmount_Cumulative","showDrawArea":true,"bounding1":"ActualAmount_Cumulative","bounding2":"ActualAmount_Cumulative"}},"type":"chart"}},"Account_Actual_Reven_2":{"broadcastFacet":true,"groups":[],"label":"Account Actual Revenue","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\nforecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current fiscal_year\"];\n forecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity';\n forecasts_results = group FilledData by ('Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity';\n forecast_results = filter forecasts_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current month\"];\n forecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\nagreements = load \"MFG_SalesAgreementProductSchedule\";\nagreements = filter agreements by 'isValidProductSchedule' == \"true\";\n agreements = filter agreements by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\n agreements = filter agreements by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"current fiscal_year\"];\n agreements = filter agreements by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"current fiscal_year\"..];\n agreements = foreach agreements generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n Start = foreach agreements generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyQuantity' else 'PlannedQuantityFinal' end as 'Quantity'                , 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n End_Value = foreach agreements generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyQuantity' \n    else 0 end as 'Quantity', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', sum('Quantity') as 'Quantity', min(first('PlannedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyQuantity';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'PlannedDailyQuantity' else 'Quantity' end as 'Quantity';\n agreement_results = group FilledData by ('Date_Year', 'Date_Month');\n agreement_results = foreach agreement_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n agreement_results = foreach agreement_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity';\n agreement_results = filter agreement_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current month\"];\n agreement_results = group agreement_results by 'StartDate_Year~~~StartDate_Month';\n agreement_results = foreach agreement_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity';\n agreement_results = order agreement_results by 'StartDate_Year~~~StartDate_Month' asc;\norders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current month\"];\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..];\n orders = group orders by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\n order_results = foreach orders generate 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n result = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, agreement_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate coalesce(coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month'), agreement_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'ActualAmount', coalesce(sum(order_results.'cumm_Amount'),0) as 'ActualAmount_Cumulative', coalesce(sum(agreement_results.'Amount'),0) as 'PlannedAmount', coalesce(sum(agreement_results.'cumm_Amount'),0) as 'PlannedAmount_Cumulative', coalesce(sum(forecast_results.'Amount'),0) as 'ForecastAmount', coalesce(sum(forecast_results.'cumm_Amount'),0) as 'ForecastAmount_Cumulative', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(order_results.'cumm_Quantity'),0) as 'ActualQuantity_Cumulative', coalesce(sum(agreement_results.'Quantity'),0) as 'PlannedQuantity', coalesce(sum(agreement_results.'cumm_Quantity'),0) as 'PlannedQuantity_Cumulative', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'cumm_Quantity'),0) as 'ForecastQuantity_Cumulative';\n result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount') as 'PlannedAmount', sum('ForecastAmount') as 'ForecastAmount', sum(sum('ActualAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualAmount_Cumulative', sum(sum('PlannedAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedAmount_Cumulative', sum(sum('ForecastAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastAmount_Cumulative', sum('ActualQuantity') as 'ActualQuantity', sum('PlannedQuantity') as 'PlannedQuantity', sum('ForecastQuantity') as 'ForecastQuantity', sum(sum('ActualQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualQuantity_Cumulative', sum(sum('PlannedQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedQuantity_Cumulative', sum(sum('ForecastQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastQuantity_Cumulative';\n result = group result by all;\n result = foreach result generate sum('PlannedAmount') as 'PlannedAmount', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount')-sum('ActualAmount') as 'Revenue_Leak';\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["ActualAmount_Cumulative","PlannedAmount_Cumulative","ForecastAmount_Cumulative"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date: [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":["cumm_Amount"],"showDashLine":false},"timeAxis":{"showTitle":false,"showAxis":true,"referenceLines":[],"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","markers":[],"applyConditionalFormatting":true,"drawArea":{"measure":"ActualAmount_Cumulative","showDrawArea":true,"bounding1":"ActualAmount_Cumulative","bounding2":"ActualAmount_Cumulative"}},"type":"chart"}},"Account_Actual_Reven_5":{"broadcastFacet":true,"groups":[],"label":"Account Actual Revenue","numbers":[],"query":"q = load \"MFG_Demo_Data_228\";\nq = filter q by date('Time_Year', 'Time_Month', 'Time_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\nq = group q by all;\nq = foreach q generate sum('Actual') as 'Actual';\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["ActualAmount_Cumulative","PlannedAmount_Cumulative","ForecastAmount_Cumulative"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date: [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":["cumm_Amount"],"showDashLine":false},"timeAxis":{"showTitle":false,"showAxis":true,"referenceLines":[],"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","markers":[],"applyConditionalFormatting":true,"drawArea":{"measure":"ActualAmount_Cumulative","showDrawArea":true,"bounding1":"ActualAmount_Cumulative","bounding2":"ActualAmount_Cumulative"}},"type":"chart"}},"Account_Actual_Reven_4":{"broadcastFacet":true,"groups":[],"label":"Account Actual Revenue","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\nforecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current fiscal_year\"];\n forecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity';\n forecasts_results = group FilledData by ('Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity';\n forecast_results = filter forecasts_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current month\"];\n forecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\nagreements = load \"MFG_SalesAgreementProductSchedule\";\nagreements = filter agreements by 'isValidProductSchedule' == \"true\";\n agreements = filter agreements by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\n agreements = filter agreements by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"current fiscal_year\"];\n agreements = filter agreements by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"current fiscal_year\"..];\n agreements = foreach agreements generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n Start = foreach agreements generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyQuantity' else 'PlannedQuantityFinal' end as 'Quantity'                , 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n End_Value = foreach agreements generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyQuantity' \n    else 0 end as 'Quantity', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', sum('Quantity') as 'Quantity', min(first('PlannedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyQuantity';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'PlannedDailyQuantity' else 'Quantity' end as 'Quantity';\n agreement_results = group FilledData by ('Date_Year', 'Date_Month');\n agreement_results = foreach agreement_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n agreement_results = foreach agreement_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity';\n agreement_results = filter agreement_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current month\"];\n agreement_results = group agreement_results by 'StartDate_Year~~~StartDate_Month';\n agreement_results = foreach agreement_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity';\n agreement_results = order agreement_results by 'StartDate_Year~~~StartDate_Month' asc;\norders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current month\"];\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..];\n orders = group orders by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\n order_results = foreach orders generate 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n result = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, agreement_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate coalesce(coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month'), agreement_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'ActualAmount', coalesce(sum(order_results.'cumm_Amount'),0) as 'ActualAmount_Cumulative', coalesce(sum(agreement_results.'Amount'),0) as 'PlannedAmount', coalesce(sum(agreement_results.'cumm_Amount'),0) as 'PlannedAmount_Cumulative', coalesce(sum(forecast_results.'Amount'),0) as 'ForecastAmount', coalesce(sum(forecast_results.'cumm_Amount'),0) as 'ForecastAmount_Cumulative', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(order_results.'cumm_Quantity'),0) as 'ActualQuantity_Cumulative', coalesce(sum(agreement_results.'Quantity'),0) as 'PlannedQuantity', coalesce(sum(agreement_results.'cumm_Quantity'),0) as 'PlannedQuantity_Cumulative', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'cumm_Quantity'),0) as 'ForecastQuantity_Cumulative';\n result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount') as 'PlannedAmount', sum('ForecastAmount') as 'ForecastAmount', sum(sum('ActualAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualAmount_Cumulative', sum(sum('PlannedAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedAmount_Cumulative', sum(sum('ForecastAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastAmount_Cumulative', sum('ActualQuantity') as 'ActualQuantity', sum('PlannedQuantity') as 'PlannedQuantity', sum('ForecastQuantity') as 'ForecastQuantity', sum(sum('ActualQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualQuantity_Cumulative', sum(sum('PlannedQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedQuantity_Cumulative', sum(sum('ForecastQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastQuantity_Cumulative';\n result = group result by all;\n result = foreach result generate sum('PlannedAmount') as 'PlannedAmount', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount')-sum('ActualAmount') as 'Revenue_Leak';\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["ActualAmount_Cumulative","PlannedAmount_Cumulative","ForecastAmount_Cumulative"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date: [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":["cumm_Amount"],"showDashLine":false},"timeAxis":{"showTitle":false,"showAxis":true,"referenceLines":[],"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","markers":[],"applyConditionalFormatting":true,"drawArea":{"measure":"ActualAmount_Cumulative","showDrawArea":true,"bounding1":"ActualAmount_Cumulative","bounding2":"ActualAmount_Cumulative"}},"type":"chart"}},"Upcoming_Renewal_1":{"broadcastFacet":true,"groups":[],"label":"Upcoming Renewal","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by !('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"Activated\", \"Cancelled\", \"Expired\"]);\nq = foreach q generate (case when ('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"Approved\", \"Pending Approval\"] && date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"]) or ('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"UnderRevision\", \"Upcoming Renewal\"]) then \"In\" else \"Out\" end) as 'Filter', 'SalesAgreementProduct.SalesAgreement.Derived_Status' as 'SalesAgreementProduct.SalesAgreement.Derived_Status', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name';\nq = filter q by 'Filter' == \"In\";\nresult = group q by 'SalesAgreementProduct.SalesAgreement.Name';\nresult = foreach result generate 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name', first('SalesAgreementProduct.SalesAgreement.Derived_Status') as 'SalesAgreementProduct.SalesAgreement.Derived_Status', sum('PlannedAmountFinal') as 'PlannedAmountFinal';\nresult = order result by ('PlannedAmountFinal' desc);","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Planned Amount","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Forecast_Attainment_4":{"broadcastFacet":true,"groups":[],"label":"Forecast Attainment","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\nforecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current month\"];\n forecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\n forecasts = foreach forecasts generate (case  when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current month\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current month\"]) then 'ForecastedRevenueFinal' when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current month\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current month\"]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)) ) when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current month\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('Period.EndDate', \"yyyy-MM-dd\")) ) when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current month\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-'ForecastedDailyRevenue'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('Period.EndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)) )  else 0 end) as 'ForecastedAmount';\n\norders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current month\"];\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..];\n \n \n \n result = cogroup forecasts by all, orders by all;\n result = foreach result generate sum(orders.'TotalPrice') as 'ActualAmount',sum(forecasts.'ForecastedAmount') as 'ForecastedAmount', coalesce(sum(orders.'TotalPrice'),0)/sum(forecasts.'ForecastedAmount')*100 as 'ForecastAttainment';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"Forecast_Attainment_3":{"broadcastFacet":true,"groups":[],"label":"Forecast Attainment","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\nforecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current day\"];\n forecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\n forecasts = foreach forecasts generate (case  when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"]) then 'ForecastedRevenueFinal' when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)) ) when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('Period.EndDate', \"yyyy-MM-dd\")) ) when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-'ForecastedDailyRevenue'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('Period.EndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)) )  else 0 end) as 'ForecastedAmount';\n\norders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current day\"];\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..];\n \n \n \n result = cogroup forecasts by all, orders by all;\n result = foreach result generate sum(orders.'TotalPrice') as 'ActualAmount',sum(forecasts.'ForecastedAmount') as 'ForecastedAmount', coalesce(sum(orders.'TotalPrice'),0)/sum(forecasts.'ForecastedAmount')*100 as 'ForecastAttainment';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"revenue_split_by_agr_1":{"broadcastFacet":true,"groups":[],"label":"revenue split by agreement status","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by !('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"Activated\", \"Cancelled\", \"Expired\"]);\nq = foreach q generate (case when ('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"Approved\", \"Pending Approval\"] && date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"]) or ('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"UnderRevision\", \"Upcoming Renewal\"]) then \"In\" else \"Out\" end) as 'Filter', 'SalesAgreementProduct.SalesAgreement.Derived_Status' as 'SalesAgreementProduct.SalesAgreement.Derived_Status', 'PlannedAmountFinal' as 'PlannedAmountFinal';\nq = filter q by 'Filter' == \"In\";\nresult = group q by 'SalesAgreementProduct.SalesAgreement.Derived_Status';\nresult = foreach result generate 'SalesAgreementProduct.SalesAgreement.Derived_Status' as 'SalesAgreementProduct.SalesAgreement.Derived_Status', sum('PlannedAmountFinal') as 'Planned_Revenue';\nresult = limit result 2000;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","centerText":"","legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"showMeasureTitle":false,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"pie","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"right","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"inner":80,"showActionMenu":true,"centerValueType":"number","valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Forecast_Attainment_1":{"broadcastFacet":true,"groups":[],"label":"Forecast Attainment","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\nforecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current day\"];\n forecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\n forecasts = foreach forecasts generate (case  when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"]) then 'ForecastedRevenueFinal' when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)) ) when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('Period.EndDate', \"yyyy-MM-dd\")) ) when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-'ForecastedDailyRevenue'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('Period.EndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)) )  else 0 end) as 'ForecastedAmount';\n\norders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current day\"];\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..];\n \n \n \n result = cogroup forecasts by all, orders by all;\n result = foreach result generate coalesce(sum(orders.'TotalPrice'),0)/sum(forecasts.'ForecastedAmount')*100 as 'ForecastAttainment';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"Upcoming_Renewal_4":{"broadcastFacet":true,"groups":[],"label":"Upcoming_Renewal","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by !('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"Activated\", \"Cancelled\", \"Expired\"]);\nq = foreach q generate (case when ('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"Approved\", \"Pending Approval\"] && date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"]) or ('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"UnderRevision\", \"Upcoming Renewal\"]) then \"In\" else \"Out\" end) as 'Filter', 'SalesAgreementProduct.SalesAgreement.Derived_Status' as 'SalesAgreementProduct.SalesAgreement.Derived_Status', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name';\nq = filter q by 'Filter' == \"In\";\nresult = group q by 'SalesAgreementProduct.SalesAgreement.Derived_Status';\nresult = foreach result generate (case when 'SalesAgreementProduct.SalesAgreement.Derived_Status' == \"Pending Approval\" then sum('PlannedAmountFinal') else 0 end) as 'Pending Approval', (case when 'SalesAgreementProduct.SalesAgreement.Derived_Status' == \"Upcoming Renewal\" then sum('PlannedAmountFinal') else 0 end) as 'Upcoming Renewal', (case when 'SalesAgreementProduct.SalesAgreement.Derived_Status' == \"Under Revision\" then sum('PlannedAmountFinal') else 0 end) as 'Under Revision';\nresult = group result by all;\nresult = foreach result generate sum('Pending Approval') as 'Pending Approval', sum('Upcoming Renewal') as 'Upcoming Renewal', sum('Under Revision') as 'Under Revision';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Upcoming_Renewal_3":{"broadcastFacet":true,"groups":[],"label":"Upcoming_Renewal","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by !('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"Activated\", \"Cancelled\", \"Expired\"]);\nq = foreach q generate (case when ('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"Approved\", \"Pending Approval\"] && date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"]) or ('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"UnderRevision\", \"Upcoming Renewal\"]) then \"In\" else \"Out\" end) as 'Filter', 'SalesAgreementProduct.SalesAgreement.Derived_Status' as 'SalesAgreementProduct.SalesAgreement.Derived_Status', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name';\nq = filter q by 'Filter' == \"In\";\nresult = group q by 'SalesAgreementProduct.SalesAgreement.Derived_Status';\nresult = foreach result generate (case when 'SalesAgreementProduct.SalesAgreement.Derived_Status' == \"Pending Approval\" then sum('PlannedAmountFinal') else 0 end) as 'Pending Approval', (case when 'SalesAgreementProduct.SalesAgreement.Derived_Status' == \"Upcoming Renewal\" then sum('PlannedAmountFinal') else 0 end) as 'Upcoming Renewal', (case when 'SalesAgreementProduct.SalesAgreement.Derived_Status' == \"Under Revision\" then sum('PlannedAmountFinal') else 0 end) as 'Under Revision';\nresult = group result by all;\nresult = foreach result generate sum('Pending Approval') as 'Pending_Approval', sum('Upcoming Renewal') as 'Upcoming_Renewal', sum('Under Revision') as 'Under_Revision';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Upcoming_Renewal_2":{"broadcastFacet":true,"groups":[],"label":"Upcoming_Renewal","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by 'SalesAgreementProduct.SalesAgreement.Derived_Status' == \"Upcoming Renewal\";\nresult = group q by all;\nresult = foreach result generate sum('PlannedAmountFinal') as 'Upcoming_Renewal';\nresult = order result by ('Upcoming_Renewal' asc);","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Logged_In_User":{"broadcastFacet":false,"groups":[],"label":"Logged_In_User","numbers":[],"query":"q = load \"MFG_Users\";\nq = group q by 'Id';\nq = foreach q generate 'Id' as 'Id', first('Name') as 'Name', count() as 'count';\nq = order q by 'Id' asc;\nq = limit q 1;","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"singlerequired","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Date_Filter_1":{"broadcastFacet":true,"groups":[],"label":"Date_Filter","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = foreach q generate \"1970\" as 'Date_Year', \"01\" as 'Date_Month', \"01\" as 'Date_Day';\nq = group q by ('Date_Year', 'Date_Month', 'Date_Day');\nq = foreach q generate 'Date_Year', 'Date_Month', 'Date_Day', count() as 'sum';\n-- use fill() to generate null rows for any missing dates. Then you can use timeseries().\nq = fill q by (dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = timeseries q generate 'sum' as 'cnt' with (length=60000,  dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = foreach q generate 'Date_Year' + \"-\" + 'Date_Month' + \"-\" + 'Date_Day'+ \" 00:00:00\" as 'Date','Date_Year', 'Date_Month', 'Date_Day';\nq = filter q by date('Date_Year', 'Date_Month', 'Date_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\nq = foreach q generate toDate('Date') as 'Date', date_to_epoch(toDate('Date')) as 'Date_sec_epoch';\nq = group q by all;\nq = foreach q generate min('Date') as 'Min Date', toDate(max('Date_sec_epoch')+86399) as 'Max Date', min('Date_sec_epoch')*1000 as 'Min', (max('Date_sec_epoch')+86399)*1000 as 'Max',           date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))*1000 as 'Prev_Min', (date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))+86399)*1000 as 'Prev_Max';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Accounts_Forecast_Attainment":{"broadcastFacet":true,"groups":[],"label":"Accounts_Forecast_Attainment","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\n forecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current day\"];\n forecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End', 'Id' as 'Id', 'Product.Family' as 'Product.Family', 'Account.Name' as 'Account.Name', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Product.Family' as 'Product.Family', 'Account.Name' as 'Account.Name', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Product.Family' as 'Product.Family', 'Account.Name' as 'Account.Name', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Product.Family' as 'Product.Family', 'Account.Name' as 'Account.Name', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', first('Product.Family') as 'Product.Family', first('Account.Name') as 'Account.Name', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', first('Product.Family') as 'Product.Family', first('Account.Name') as 'Account.Name', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity';\n forecasts_results = group FilledData by ('Account.Name', 'Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', 'Account.Name' as 'Account.Name', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Account.Name' as 'Account.Name', 'Amount' as 'Amount', 'Quantity' as 'Quantity';\n forecast_results = filter forecasts_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current day\"];\n forecast_results = group forecast_results by 'Account.Name';\n forecast_results = foreach forecast_results generate first('Account.Name') as 'Account.Name', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n\n orders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current day\"];\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..];\n orders = group orders by ('Order.Account.Name');\n order_results = foreach orders generate 'Order.Account.Name' as 'Order.Account.Name', sum('TotalPrice') as 'Amount', sum('Quantity') as 'Quantity';\n\n result = cogroup order_results by 'Order.Account.Name' full, forecast_results by 'Account.Name';\n result = foreach result generate coalesce(forecast_results.'Account.Name', order_results.'Order.Account.Name') as 'Account.Name', coalesce(sum(order_results.'Amount'),0)*100/sum(forecast_results.'Amount') as 'ForecastAttainment';\n result = order result by 'ForecastAttainment' asc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":10,"position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["ForecastAttainment"],"showNullValues":true,"customizeLegend":true,"showPercentage":false,"showDimensions":true,"showMeasures":true,"dimensions":["Account.Name"]}}},"visualizationType":"hbar","title":{"fontSize":10,"subtitleFontSize":10,"label":"","align":"right","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","dimensionAxis":{"showTitle":false,"customSize":30,"showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Forecast_Attainment":{"broadcastFacet":true,"groups":[],"label":"Forecast Attainment","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\nforecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current day\"];\n forecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\n forecasts = foreach forecasts generate (case  when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"]) then 'ForecastedRevenueFinal' when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)) ) when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('Period.EndDate', \"yyyy-MM-dd\")) ) when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-'ForecastedDailyRevenue'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('Period.EndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)) )  else 0 end) as 'ForecastedAmount';\n\norders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current day\"];\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..];\n \n \n \n result = cogroup forecasts by all, orders by all;\n result = foreach result generate sum(orders.'TotalPrice') as 'ActualAmount',sum(forecasts.'ForecastedAmount') as 'ForecastedAmount', coalesce(sum(orders.'TotalPrice'),0)/sum(forecasts.'ForecastedAmount')*100 as 'ForecastAttainment';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"totals":true,"verticalPadding":8},"type":"table"}},"KPI_chart_2_2":{"broadcastFacet":true,"groups":[],"label":"KPI chart 2","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\nforecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current day\"];\n forecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\n forecasts = foreach forecasts generate (case  when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"]) then 'ForecastedRevenueFinal' when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)) ) when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-( 'ForecastedDailyRevenue'*daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('Period.EndDate', \"yyyy-MM-dd\")) ) when (toDate('Period.StartDate', \"yyyy-MM-dd\") in [..\"current day\"] && toDate('Period.EndDate', \"yyyy-MM-dd\") in [\"current fiscal_year\"..]) then 'ForecastedRevenueFinal'-'ForecastedDailyRevenue'*( daysBetween(toDate(toString(now(), \"yyyy-MM-dd\"), \"yyyy-MM-dd\"),toDate('Period.EndDate', \"yyyy-MM-dd\")) + daysBetween(toDate('Period.StartDate', \"yyyy-MM-dd\"), toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)) )  else 0 end) as 'ForecastedAmount';\n\norders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current day\"];\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..];\n \n \n \n result = cogroup forecasts by all, orders by all;\n result = foreach result generate coalesce(sum(orders.'TotalPrice'),0)/sum(forecasts.'ForecastedAmount')*100 as 'ForecastAttainment';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":10,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":[],"plots":["ForecastAttainment"]},"showActionMenu":false,"min":0,"valueType":"none","theme":"wave","referenceLines":[],"applyConditionalFormatting":true},"type":"chart"}},"KPI_chart_1_2":{"broadcastFacet":true,"groups":[],"label":"KPI chart 1","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\n forecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current day\"];\n forecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End', 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity';\n forecasts_results = group FilledData by ('Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity';\n forecast_results = filter forecasts_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current day\"];\n forecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\nagreements = load \"MFG_SalesAgreementProductSchedule\";\nagreements = filter agreements by 'isValidProductSchedule' == \"true\";\n agreements = filter agreements by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\n agreements = filter agreements by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"current day\"];\n agreements = filter agreements by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"current fiscal_year\"..];\n agreements = foreach agreements generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', date_to_epoch(toDate(toString(now(),\"yyyy-MM-dd\")    +    \" 23:59:59\", \"yyyy-MM-dd HH:mm:ss\")) as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n Start = foreach agreements generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyQuantity' else 'PlannedQuantityFinal' end as 'Quantity'                , 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n End_Value = foreach agreements generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyQuantity' \n    else 0 end as 'Quantity', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', sum('Quantity') as 'Quantity', min(first('PlannedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyQuantity';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'PlannedDailyQuantity' else 'Quantity' end as 'Quantity';\n agreement_results = group FilledData by ('Date_Year', 'Date_Month');\n agreement_results = foreach agreement_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n agreement_results = foreach agreement_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity';\n agreement_results = filter agreement_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current day\"];\n agreement_results = group agreement_results by 'StartDate_Year~~~StartDate_Month';\n agreement_results = foreach agreement_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity';\n agreement_results = order agreement_results by 'StartDate_Year~~~StartDate_Month' asc;\n orders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current day\"];\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..];\n orders = group orders by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\n order_results = foreach orders generate 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n result = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, agreement_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate coalesce(coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month'), agreement_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'ActualAmount', coalesce(sum(order_results.'cumm_Amount'),0) as 'ActualAmount_Cumulative', coalesce(sum(agreement_results.'Amount'),0) as 'PlannedAmount', coalesce(sum(agreement_results.'cumm_Amount'),0) as 'PlannedAmount_Cumulative', coalesce(sum(forecast_results.'Amount'),0) as 'ForecastAmount', coalesce(sum(forecast_results.'cumm_Amount'),0) as 'ForecastAmount_Cumulative', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(order_results.'cumm_Quantity'),0) as 'ActualQuantity_Cumulative', coalesce(sum(agreement_results.'Quantity'),0) as 'PlannedQuantity', coalesce(sum(agreement_results.'cumm_Quantity'),0) as 'PlannedQuantity_Cumulative', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'cumm_Quantity'),0) as 'ForecastQuantity_Cumulative';\n result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount') as 'PlannedAmount', sum('ForecastAmount') as 'ForecastAmount', sum(sum('ActualAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualAmount_Cumulative', sum(sum('PlannedAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedAmount_Cumulative', sum(sum('ForecastAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastAmount_Cumulative', sum('ActualQuantity') as 'ActualQuantity', sum('PlannedQuantity') as 'PlannedQuantity', sum('ForecastQuantity') as 'ForecastQuantity', sum(sum('ActualQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualQuantity_Cumulative', sum(sum('PlannedQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedQuantity_Cumulative', sum(sum('ForecastQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastQuantity_Cumulative';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'ActualAmount_Cumulative' as 'ActualAmount_Cumulative', 'PlannedAmount_Cumulative' as 'PlannedAmount_Cumulative', 'ForecastAmount_Cumulative' as 'ForecastAmount_Cumulative';\n result = order result by 'StartDate_Year~~~StartDate_Month' asc;\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":false,"showAxis":false,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":false,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"}},"TODAY_reference_line_1":{"broadcastFacet":true,"groups":[],"label":"TODAY_reference_line","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = foreach q generate date_diff(\"week\", toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000), now()) as 'CurrentWeek';\nq = group q by all;\nq = foreach q generate first('CurrentWeek') as 'CurrentWeek', \"W\"+number_to_string(first('CurrentWeek'), \"#00\") as 'CurrentWeek_label', toString(now(),\"yyyy\")+\"~~~\"+toString(now(),\"MM\") as 'Current_Year~~~Current_Month';\nq = limit q 1;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Upcoming_Renewals":{"broadcastFacet":true,"groups":[],"label":"Upcoming_Renewal","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = filter q by !('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"Activated\", \"Cancelled\", \"Expired\"]);\nq = foreach q generate (case when ('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"Approved\", \"Pending Approval\"] && date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"]) or ('SalesAgreementProduct.SalesAgreement.Derived_Status' in [\"UnderRevision\", \"Upcoming Renewal\"]) then \"In\" else \"Out\" end) as 'Filter', 'SalesAgreementProduct.SalesAgreement.Derived_Status' as 'SalesAgreementProduct.SalesAgreement.Derived_Status', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'SalesAgreementProduct.SalesAgreement.Name' as 'SalesAgreementProduct.SalesAgreement.Name';\nq = filter q by 'Filter' == \"In\";\nresult = group q by 'SalesAgreementProduct.SalesAgreement.Derived_Status';\nresult = foreach result generate (case when 'SalesAgreementProduct.SalesAgreement.Derived_Status' == \"Pending Approval\" then sum('PlannedAmountFinal') else 0 end) as 'Pending Approval', (case when 'SalesAgreementProduct.SalesAgreement.Derived_Status' == \"Upcoming Renewal\" then sum('PlannedAmountFinal') else 0 end) as 'Upcoming Renewal', (case when 'SalesAgreementProduct.SalesAgreement.Derived_Status' == \"Under Revision\" then sum('PlannedAmountFinal') else 0 end) as 'Under Revision';\nresult = group result by all;\nresult = foreach result generate round(sum('Pending Approval')) as 'Pending_Approval', sum('Upcoming Renewal') as 'Upcoming_Renewal', sum('Under Revision') as 'Under_Revision';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Account_Actual_Reven_1":{"broadcastFacet":true,"groups":[],"label":"Account Actual Revenue","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\nforecasts = filter forecasts by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [..\"current fiscal_year\"];\n forecasts = filter forecasts by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..];\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity';\n forecasts_results = group FilledData by ('Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity';\n forecast_results = filter forecasts_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n forecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\nagreements = load \"MFG_SalesAgreementProductSchedule\";\nagreements = filter agreements by 'isValidProductSchedule' == \"true\";\n agreements = filter agreements by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\n agreements = filter agreements by date('StartDate_Year', 'StartDate_Month', 'StartDate_Day') in [..\"current fiscal_year\"];\n agreements = filter agreements by date('ActualEndDate_Year', 'ActualEndDate_Month', 'ActualEndDate_Day') in [\"current fiscal_year\"..];\n agreements = foreach agreements generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n Start = foreach agreements generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'PlannedDailyQuantity' else 'PlannedQuantityFinal' end as 'Quantity'                , 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n End_Value = foreach agreements generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'PlannedDailyQuantity' \n    else 0 end as 'Quantity', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity', 'PlannedAmountFinal' as 'PlannedAmountFinal', 'PlannedDailyAmount' as 'PlannedDailyAmount', 'PlannedQuantityFinal' as 'PlannedQuantityFinal', 'PlannedDailyQuantity' as 'PlannedDailyQuantity';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', sum('Quantity') as 'Quantity', min(first('PlannedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyQuantity';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'PlannedDailyQuantity' else 'Quantity' end as 'Quantity';\n agreement_results = group FilledData by ('Date_Year', 'Date_Month');\n agreement_results = foreach agreement_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity';\n agreement_results = foreach agreement_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity';\n agreement_results = filter agreement_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n agreement_results = group agreement_results by 'StartDate_Year~~~StartDate_Month';\n agreement_results = foreach agreement_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity';\n agreement_results = order agreement_results by 'StartDate_Year~~~StartDate_Month' asc;\norders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [..\"current fiscal_year\"];\n orders = filter orders by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..];\n orders = group orders by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\n order_results = foreach orders generate 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n result = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, agreement_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate coalesce(coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month'), agreement_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'ActualAmount', coalesce(sum(order_results.'cumm_Amount'),0) as 'ActualAmount_Cumulative', coalesce(sum(agreement_results.'Amount'),0) as 'PlannedAmount', coalesce(sum(agreement_results.'cumm_Amount'),0) as 'PlannedAmount_Cumulative', coalesce(sum(forecast_results.'Amount'),0) as 'ForecastAmount', coalesce(sum(forecast_results.'cumm_Amount'),0) as 'ForecastAmount_Cumulative', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(order_results.'cumm_Quantity'),0) as 'ActualQuantity_Cumulative', coalesce(sum(agreement_results.'Quantity'),0) as 'PlannedQuantity', coalesce(sum(agreement_results.'cumm_Quantity'),0) as 'PlannedQuantity_Cumulative', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'cumm_Quantity'),0) as 'ForecastQuantity_Cumulative';\n result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('ActualAmount') as 'ActualAmount', sum('PlannedAmount') as 'PlannedAmount', sum('ForecastAmount') as 'ForecastAmount', sum(sum('ActualAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualAmount_Cumulative', sum(sum('PlannedAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedAmount_Cumulative', sum(sum('ForecastAmount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastAmount_Cumulative', sum('ActualQuantity') as 'ActualQuantity', sum('PlannedQuantity') as 'PlannedQuantity', sum('ForecastQuantity') as 'ForecastQuantity', sum(sum('ActualQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ActualQuantity_Cumulative', sum(sum('PlannedQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'PlannedQuantity_Cumulative', sum(sum('ForecastQuantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'ForecastQuantity_Cumulative';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'ActualAmount_Cumulative' as 'ActualAmount_Cumulative', 'PlannedAmount_Cumulative' as 'PlannedAmount_Cumulative', 'ForecastAmount_Cumulative' as 'ForecastAmount_Cumulative';\n result = order result by 'StartDate_Year~~~StartDate_Month' asc;\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["ActualAmount_Cumulative","PlannedAmount_Cumulative","ForecastAmount_Cumulative"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date: [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":["cumm_Amount"],"showDashLine":false},"timeAxis":{"showTitle":false,"showAxis":true,"referenceLines":[],"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","markers":[],"applyConditionalFormatting":true,"drawArea":{"measure":"ActualAmount_Cumulative","showDrawArea":true,"bounding1":"ActualAmount_Cumulative","bounding2":"ActualAmount_Cumulative"}},"type":"chart"}},"Attainment_by_Accoun_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_Demo_Data_228"}],"isGlobal":false,"label":"Attainment_by_Account","query":{"query":"{\"measures\":[[\"avg\",\"Attainment\"]],\"groups\":[\"AccountName\"],\"order\":[[\"avg_Attainment\",{\"ascending\":false}]]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnProperties":{"AccountName":{"type":"text","parameters":{"styles":{"linkColor":"#006dcc"},"alignment":"left"}}},"columnMap":{"trellis":[],"dimensionAxis":["AccountName"],"plots":["avg_Attainment"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Attainments_Guage_KP_2":{"broadcastFacet":false,"groups":[],"label":"Attainments_Guage_KPI","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\ntargets = filter targets by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('AssignedTo.Id')}};\n targets = filter targets by date('AcctMgrTarget.Period.StartDate_Year', 'AcctMgrTarget.Period.StartDate_Month', 'AcctMgrTarget.Period.StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets = filter targets by date('AcctMgrTarget.Period.EndDate_Year', 'AcctMgrTarget.Period.EndDate_Month', 'AcctMgrTarget.Period.EndDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets_m1 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', 'Period.StartDate' as 'Period' ;\ntargets_m2 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null \nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m3 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m4 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m5 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m6 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m7 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m8 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m9 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m10 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m11 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m12 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nend) as 'Period';\n\n\n\n\ntargets = union targets_m1, targets_m2, targets_m3, targets_m4, targets_m5, targets_m6, targets_m7, targets_m8, targets_m9, targets_m10, targets_m11, targets_m12;\ntargets = filter targets by 'Period' is not null;\n\n\n target_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('TargetActualsOwner.Managers')}};\n target_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\n target_actuals_proj = group target_actuals by ('TargetActualsOwner.Managers', 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month') ;\ntarget_actuals_proj = foreach target_actuals_proj generate 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice' ;\ntarget_actuals_proj = fill target_actuals_proj by (dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\")) ;\ntarget_actuals_proj = timeseries target_actuals_proj generate 'sum_TotalPrice' as Projected_sum_TotalPrice with (length=36, dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"), seasonality = 0, ignoreLast = false) ;\ntarget_actuals_proj = foreach target_actuals_proj generate 'Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\" as 'Period', 'Period.StartDate_Year' + \"~~~\" + 'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', 'Period.StartDate_Year' as 'Period.StartDate_Year', 'Period.StartDate_Month' as 'Period.StartDate_Month', \"01\" as 'Period.StartDate_Day', case when 'sum_TotalPrice' > coalesce('Projected_sum_TotalPrice',0) then 'sum_TotalPrice' when coalesce('Projected_sum_TotalPrice',0) >= 0 then 'Projected_sum_TotalPrice' else 0 end as 'sum_TotalPrice', month_last_day(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-27 00:00:00\",\"yyyy-MM-dd HH:mm:ss\")) as 'Month Last Day';\n target_actuals_proj = filter target_actuals_proj by 'Month Last Day' > now();\n target_actuals = foreach target_actuals generate 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice' ;\n\n target_attainment_1 = cogroup targets by 'Period' left, target_actuals by 'Period' left, target_actuals_proj by 'Period' ;\ntarget_attainment_1 = foreach target_attainment_1 generate toDate(coalesce(targets.'Period', target_actuals.'Period'), \"yyyy-MM-dd\") as 'Period', (case when sum(target_actuals.'sum_TotalPrice')<0 then 0 else sum(target_actuals.'sum_TotalPrice') end) as 'Target_Actuals', sum(targets.'MonthlyTargetCurrencyValue') as 'Target_Value', sum(target_actuals_proj.'sum_TotalPrice') as 'Projections_only', coalesce(sum(target_actuals_proj.'sum_TotalPrice'),sum(target_actuals.'sum_TotalPrice')) as 'Projections' ;\n target_attainment_1 = group target_attainment_1 by all;\n target_attainment_1 = foreach target_attainment_1 generate coalesce(sum('Projections'),0)*100/sum('Target_Value') as 'Target_Attainment_percentage';\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"polargauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,20],"enable":true,"type":"x","chartsPerLine":4},"icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"Attainment Type"}},"inner":80,"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"RunningTotals_2":{"broadcastFacet":false,"groups":[],"numbers":[],"query":"q = load \"MFG_Demo_Data_228\";\nq = filter q by date('Time_Year', 'Time_Month', 'Time_Day') in [\"current year\"..\"current day\"];\nresult = group q by ('Time_Year', 'Time_Month');\nresult = foreach result generate q.'Time_Year' + \"~~~\" + q.'Time_Month' as 'Time_Year~~~Time_Month', sum(q.'Actual') as 'A', sum(q.'Plan') as 'C', sum(q.'Forecast') as 'E';\nresult = group result by 'Time_Year~~~Time_Month';\nresult = foreach result generate 'Time_Year~~~Time_Month', \nsum(sum(A)) over ([..0] partition by all order by ('Time_Year~~~Time_Month')) as 'Cumulative Actual Amount', \nsum(sum(C)) over ([..0] partition by all order by ('Time_Year~~~Time_Month')) as 'Cumulative Planned Amount', \nsum(sum(E)) over ([..0] partition by all order by ('Time_Year~~~Time_Month')) as 'Cumulative Forecasted Amount';\nresult = order result by ('Time_Year~~~Time_Month' asc);","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"none","strings":[],"type":"saql","useGlobal":true},"target_attainment_1_1":{"broadcastFacet":true,"groups":[],"label":"target_attainment_1","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\ntargets = filter targets by date('AcctMgrTarget.Period.StartDate_Year', 'AcctMgrTarget.Period.StartDate_Month', 'AcctMgrTarget.Period.StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets = filter targets by date('AcctMgrTarget.Period.EndDate_Year', 'AcctMgrTarget.Period.EndDate_Month', 'AcctMgrTarget.Period.EndDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets = filter targets by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('AssignedTo.Id')}};\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals = filter target_actuals by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('TargetActualsOwner.Managers')}};\n\ntarget_attainment = cogroup targets by all full, target_actuals by all;\ntarget_attainment = foreach target_attainment generate  sum(target_actuals.'TotalPrice') as 'Target_Actuals',  sum(target_actuals.'TotalPrice')*100/sum(targets.'PeriodTargetCurrencyValue') as 'Target_Attainment_percentage', sum(target_actuals.'TotalPrice')/sum(targets.'PeriodTargetCurrencyValue') as 'Target_attainment_Ratio', sum(targets.'PeriodTargetCurrencyValue') as 'Target_Value';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":"{{cell(target_attainment_1_1.result, 0, \"Target_Value\").asObject()}}","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":[],"plots":["Target_Actuals"]},"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","referenceLines":[],"compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Revenue_KPIs":{"broadcastFacet":true,"datasets":[{"name":"MFG_Demo_Data_228"}],"isGlobal":false,"label":"Revenue_KPIs","query":{"query":"{\"measures\":[[\"sum\",\"Plan\",\"A\"],[\"sum\",\"Actual\",\"B\"],[\"sum\",\"Actual\",\"Revenue_Leak\"],[\"sum\",\"Forecast\",\"D\"],[\"avg\",\"Attainment\",\"avg_Attainment\"]],\"columns\":[{\"query\":{\"measures\":[[\"sum\",\"Plan\"]]}},{\"query\":{\"measures\":[[\"sum\",\"Actual\"]]}},{\"query\":{\"measures\":[[\"sum\",\"Actual\"]],\"formula\":\"A-B\"},\"name\":\"Revenue_Leak\",\"header\":\"Revenue Leak\"},{\"query\":{\"measures\":[[\"sum\",\"Forecast\"]]}},{\"query\":{\"measures\":[[\"avg\",\"Attainment\"]]},\"name\":\"avg_Attainment\",\"header\":\"Attainment\"}],\"filters\":[[\"Time\",[[[\"fiscal_year\",0],[\"fiscal_year\",0]]],\">=<=\"]]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":true,"visualizationParameters":{"options":{},"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"showRowIndexColumn":false,"totals":true,"verticalPadding":8},"type":"table"}}},"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1},"widgets":{"number_12":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"B","numberColor":"#335779","numberSize":24,"showActionMenu":true,"step":"Revenue_KPIs","textAlignment":"center","title":"Actual Revenue","titleColor":"#335779","titleSize":10,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_11":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"D","numberColor":"rgb(51, 87, 121)","numberSize":24,"showActionMenu":true,"step":"Revenue_KPIs","textAlignment":"center","title":"Forecast Revenue","titleColor":"rgb(51, 87, 121)","titleSize":10,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_10":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Revenue_Leak","numberColor":"#335779","numberSize":24,"showActionMenu":true,"step":"Revenue_KPIs","textAlignment":"center","title":"Planned vs Actual Revenue","titleColor":"#335779","titleSize":10,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_18":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#FFFFFF"},"insert":"Choose KPI:"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_19":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#FFFFFF"},"insert":"Group by:"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"number_9":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"B","numberColor":"#335779","numberSize":24,"showActionMenu":true,"step":"Revenue_KPIs","textAlignment":"center","title":"Actual Revenue","titleColor":"#335779","titleSize":10,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_8":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"A","numberColor":"#335779","numberSize":24,"showActionMenu":true,"step":"Revenue_KPIs","textAlignment":"center","title":"Planned Revenue (YTM)","titleColor":"#335779","titleSize":10,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_15":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Under Revision","numberColor":"#335779","numberSize":24,"showActionMenu":true,"step":"Upcoming_Renewal_4","textAlignment":"center","title":"Under Revision","titleColor":"#335779","titleSize":10,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_14":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Upcoming_Renewal","numberColor":"#335779","numberSize":24,"showActionMenu":true,"step":"Upcoming_Renewal_3","textAlignment":"center","title":"Upcoming Renewals","titleColor":"#335779","titleSize":10,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_6":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"B","numberColor":"rgb(9, 26, 62)","numberSize":24,"showActionMenu":true,"step":"Revenue_KPIs","textAlignment":"center","title":"Actual Revenue","titleColor":"rgb(51, 87, 121)","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"container_2":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_3":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"chart_9":{"parameters":{"autoFitMode":"keepLabels","showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"exploreLink":true,"timeAxis":{"showTitle":false,"showAxis":false,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":false,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"light","step":"RunningTotals_2","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"container_4":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_3":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E"},"insert":"Current Attainment"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_2":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"32px","color":"#091A3E"},"insert":"93.5%"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_8":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"chart_8":{"parameters":{"autoFitMode":"keepLabels","max":100,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","exploreLink":false,"medium":33,"title":{"fontSize":10,"subtitleFontSize":11,"label":"","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":[],"plots":["avg_Attainment"]},"showActionMenu":false,"min":0,"valueType":"none","theme":"bluegrassLight","step":"Revenue_KPIs","referenceLines":[],"applyConditionalFormatting":true},"type":"chart"},"text_5":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E"},"insert":"Projected Attainment"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_7":{"parameters":{"autoFitMode":"keepLabels","centerText":"","legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"showMeasureTitle":false,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"pie","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"right","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"inner":80,"showActionMenu":true,"centerValueType":"number","valueType":"compactNumber","theme":"waterLight","step":"revenue_split_by_agr_1","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"container_9":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_4":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E"},"insert":"My Target"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_2":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":10,"position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["avg_Attainment"],"showNullValues":true,"customizeLegend":true,"showPercentage":false,"showDimensions":true,"showMeasures":true,"dimensions":["AccountName"]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":10,"subtitleFontSize":10,"label":"","align":"right","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"waterLight","step":"Attainment_by_Accoun_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":30,"showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"chart_1":{"parameters":{"autoFitMode":"keepLabels","showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["A","B","C","D","E","F"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date: [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":["cumm_Amount"],"showDashLine":false},"timeAxis":{"showTitle":false,"showAxis":true,"referenceLines":[{"time":{"data":"{{cell(TODAY_reference_line_1.result, 0, \"Current_Year~~~Current_Month\").asObject()}}","type":"static"},"label":{"data":"TODAY","type":"static"}}],"title":""},"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"light","step":"RunningTotals_2","markers":[],"applyConditionalFormatting":true,"drawArea":{"measure":"A","showDrawArea":true,"bounding1":"A","bounding2":"A"}},"type":"chart"},"chart_4":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"bottom-center","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["PlannedAmountFinal"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":["SalesAgreementProduct.SalesAgreement.Name","SalesAgreementProduct.SalesAgreement.Derived_Status"]}}},"visualizationType":"hbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"Planned Amount","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","step":"Upcoming_Renewal_1","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"image_5":{"parameters":{"alignmentX":"center","alignmentY":"top","fit":"fitheight","image":{"name":"metrics_png","namespace":""},"interactions":[]},"type":"image"},"text_1":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"32px","color":"#091A3E"},"insert":"86.5%"},{"attributes":{"align":"center"},"insert":"\n"}]},"interactions":[],"showActionMenu":true},"type":"text"},"image_6":{"parameters":{"alignmentX":"center","alignmentY":"top","fit":"fitheight","image":{"name":"agreement_png","namespace":""},"interactions":[]},"type":"image"},"link_3":{"parameters":{"destinationLink":{"name":"4abc4029-ae63-4361-b237-670eedd7be05"},"destinationType":"page","fontSize":18,"includeState":false,"text":"X","textAlignment":"center","textColor":"#091A3E"},"type":"link"},"link_1":{"parameters":{"destinationLink":{"name":"Sales_Agreements_Insights","namespace":"","pageName":"958150b7-123d-48ff-a984-7525ca18d609"},"destinationType":"dashboard","fontSize":10,"includeState":false,"text":"VIEW DASHBOARD","textAlignment":"left","textColor":"rgb(0, 109, 204)"},"type":"link"},"link_2":{"parameters":{"destinationLink":{"name":"Accounts_Health_Forecast_Plan_SA1","namespace":"","pageName":"eb5e70d9-9af9-42fc-a934-c6a9069bb355"},"destinationType":"dashboard","fontSize":10,"includeState":false,"text":"VIEW DASHBOARD","textAlignment":"left","textColor":"#0070D2"},"type":"link"},"number_4":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"avg_Attainment","numberColor":"rgb(9, 26, 62)","numberSize":24,"showActionMenu":true,"step":"Revenue_KPIs","textAlignment":"center","title":"Forecast Attainment","titleColor":"rgb(51, 87, 121)","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_3":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"avg_Attainment","numberColor":"rgb(51, 87, 121)","numberSize":24,"showActionMenu":true,"step":"Revenue_KPIs","textAlignment":"center","title":"Forecast Attainment","titleColor":"rgb(51, 87, 121)","titleSize":10,"tooltip":{"customizeTooltip":false}},"type":"number"},"link_9":{"parameters":{"destinationLink":{"name":"96fb1d7e-ae0d-4b51-bd1b-46fee7880e63"},"destinationType":"page","fontSize":24,"includeState":false,"text":"▷","textAlignment":"center","textColor":"#335779"},"type":"link"},"number_2":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Upcoming_Renewal","numberColor":"#335779","numberSize":24,"showActionMenu":true,"step":"Upcoming_Renewal_2","textAlignment":"center","title":"Upcoming Renewals","titleColor":"#335779","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_1":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"Pending_Approval","numberColor":"#335779","numberSize":24,"showActionMenu":true,"step":"Upcoming_Renewals","textAlignment":"center","title":"Pending Approvals","titleColor":"#335779","titleSize":10,"tooltip":{"customizeTooltip":false}},"type":"number"},"link_7":{"parameters":{"destinationLink":{"name":"Account_Insights_Sales_Forecast21","namespace":""},"destinationType":"dashboard","fontSize":10,"includeState":false,"text":"VIEW DASHBOARD","textAlignment":"left","textColor":"#0070D2"},"type":"link"},"link_8":{"parameters":{"destinationLink":{"name":"92345bd3-adbe-41eb-9ec5-04981e61717e"},"destinationType":"page","fontSize":24,"includeState":false,"text":"▷","textAlignment":"center","textColor":"#335779"},"type":"link"},"link_6":{"parameters":{"destinationLink":{"name":"53d74eb6-7714-449d-b10a-335bf96173db"},"destinationType":"page","fontSize":24,"includeState":false,"text":"▷","textAlignment":"center","textColor":"#335779"},"type":"link"},"image_1":{"parameters":{"alignmentX":"center","alignmentY":"center","fit":"fitwidth","image":{"name":"Powered_by_analytics_bannerpng7","namespace":""},"interactions":[]},"type":"image"},"container_11":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_10":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"image_3":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"fitwidth","image":{"name":"IconUserpng2","namespace":""},"interactions":[]},"type":"image"},"image_2":{"parameters":{"alignmentX":"center","alignmentY":"center","fit":"fitheight","image":{"name":"money_bag_png","namespace":""},"interactions":[]},"type":"image"},"chart_10":{"parameters":{"autoFitMode":"keepLabels","max":"{{cell(target_attainment_1_1.result, 0, \"Target_Value\").asObject()}}","legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Target_Actuals","Target_Attainment_percentage","Target_attainment_Ratio","Target_Value"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":true,"showMeasures":false,"dimensions":[]},"description":"Target Revenue : [Target_Value] \nActual Revenue : [Target_Actuals]"}},"visualizationType":"flatgauge","medium":33,"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":" "},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":[],"plots":["Target_Actuals"]},"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"light","step":"target_attainment_1_1","referenceLines":[{"label":{"data":"Actuals","type":"static"},"value":{"data":"{{cell(target_attainment_1_1.result, 0, \"Target_Actuals\").asObject()}}","type":"static"}}],"compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}}}