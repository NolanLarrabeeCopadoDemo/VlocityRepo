{"dataSourceLinksInfo":{"enableAutomaticLinking":false,"excludeRelationships":[],"links":[]},"filters":[],"gridLayouts":[{"maxWidth":1500,"name":"Default","numColumns":43,"pages":[{"label":"Sales Manager Home","name":"4ec1a3dd-8f8b-4e17-91dc-ba74c02825ad","navigationHidden":false,"widgets":[{"colspan":43,"column":0,"name":"container_1","row":0,"rowspan":11,"widgetStyle":{"backgroundColor":"rgb(202, 165, 55)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":1,"name":"image_2","row":2,"rowspan":7,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(255, 255, 255, 0.1)","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":4,"name":"text_1","row":2,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":4,"name":"text_2","row":5,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":16,"column":2,"name":"text_3","row":51,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":1,"name":"image_1","row":52,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":1,"name":"container_3","row":56,"rowspan":28,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":1,"name":"text_6","row":57,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"text_7","row":60,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":2,"name":"text_10","row":65,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":1,"name":"number_2","row":69,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":6,"name":"text_32","row":69,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":3,"column":10,"name":"number_4","row":69,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"text_22","row":67,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"chart_2","row":72,"rowspan":8,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":1,"name":"link_2","row":80,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":15,"name":"container_2","row":56,"rowspan":28,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":15,"name":"text_4","row":57,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"text_5","row":60,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":16,"name":"text_8","row":65,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":17,"name":"number_1","row":69,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"text_9","row":67,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"chart_1","row":72,"rowspan":8,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":15,"name":"link_1","row":80,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":14,"column":2,"name":"text_11","row":86,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":1,"name":"image_3","row":87,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":1,"name":"container_5","row":91,"rowspan":28,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":1,"name":"text_14","row":92,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"text_18","row":95,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":2,"name":"text_23","row":101,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"table_1","row":103,"rowspan":6,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"text_24","row":99,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"chart_3","row":110,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":1,"name":"link_3","row":115,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":15,"name":"container_6","row":91,"rowspan":28,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":15,"name":"text_16","row":92,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"text_20","row":95,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":16,"name":"text_26","row":101,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"number_3","row":103,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"text_27","row":99,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"chart_4","row":107,"rowspan":8,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":15,"name":"link_4","row":115,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":14,"column":2,"name":"text_12","row":121,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":1,"name":"image_4","row":122,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":1,"name":"container_8","row":126,"rowspan":30,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":1,"name":"text_13","row":127,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"text_17","row":130,"rowspan":5,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":2,"name":"text_25","row":136,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"text_29","row":140,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"text_28","row":138,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"chart_5","row":145,"rowspan":6,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":1,"name":"link_6","row":152,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":15,"name":"container_9","row":126,"rowspan":30,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":15,"name":"text_15","row":127,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"text_19","row":130,"rowspan":5,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":16,"name":"text_30","row":136,"rowspan":2,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":16,"name":"text_31","row":140,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"table_2","row":145,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":15,"name":"link_5","row":152,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":4,"name":"text_21","row":197,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":29,"name":"container_4","row":91,"rowspan":28,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":29,"name":"text_33","row":92,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":30,"name":"text_34","row":95,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":30,"name":"text_35","row":100,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":31,"name":"text_36","row":104,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":36,"name":"number_5","row":104,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":30,"name":"text_37","row":102,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":30,"name":"table_3","row":108,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":29,"name":"link_7","row":115,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":29,"name":"container_7","row":126,"rowspan":30,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":29,"name":"text_38","row":127,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":30,"name":"text_39","row":130,"rowspan":5,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":30,"name":"text_40","row":136,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":30,"name":"text_41","row":139,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":30,"name":"chart_7","row":144,"rowspan":8,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":29,"name":"link_8","row":152,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":31,"name":"number_6","row":141,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"text_42","row":138,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":1,"column":1,"name":"image_5","row":14,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":14,"column":2,"name":"text_43","row":13,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":1,"name":"container_10","row":18,"rowspan":31,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":1,"name":"text_44","row":19,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"text_45","row":22,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":1,"name":"link_9","row":45,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":15,"name":"container_11","row":18,"rowspan":31,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":13,"column":15,"name":"text_49","row":19,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"text_50","row":22,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":15,"name":"link_10","row":45,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":18,"name":"chart_9","row":25,"rowspan":10,"widgetStyle":{"borderEdges":[]}},{"colspan":3,"column":15,"name":"text_51","row":26,"rowspan":8,"widgetStyle":{"borderEdges":[]}},{"colspan":10,"column":18,"name":"chart_11","row":35,"rowspan":10,"widgetStyle":{"borderEdges":[]}},{"colspan":3,"column":15,"name":"text_52","row":36,"rowspan":8,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":2,"name":"chart_8","row":30,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"text_53","row":26,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":2,"name":"text_55","row":34,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"text_56","row":37,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":8,"name":"text_57","row":41,"rowspan":2,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":11,"name":"text_58","row":41,"rowspan":2,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":8,"name":"text_46","row":43,"rowspan":2,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":2,"column":11,"name":"text_47","row":43,"rowspan":2,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["left","right","bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":2,"name":"text_48","row":42,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":7,"name":"number_7","row":34,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":11,"name":"number_8","row":30,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":1,"name":"container_12","row":166,"rowspan":31,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":15,"name":"container_13","row":166,"rowspan":31,"widgetStyle":{"borderEdges":[]}},{"colspan":12,"column":2,"name":"text_54","row":160,"rowspan":4,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":1,"column":1,"name":"image_6","row":160,"rowspan":4,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":3,"name":"text_59","row":167,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":9,"column":17,"name":"text_60","row":167,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"text_63","row":174,"rowspan":2,"widgetStyle":{"backgroundColor":"rgb(119, 121, 128)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":16,"borderWidth":8}},{"colspan":11,"column":16,"name":"text_64","row":170,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":2,"name":"text_65","row":170,"rowspan":3,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#C6D3E1","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":16,"name":"text_66","row":174,"rowspan":2,"widgetStyle":{"backgroundColor":"rgb(119, 121, 128)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":16,"borderWidth":8}},{"colspan":7,"column":2,"name":"text_67","row":177,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":18,"name":"text_68","row":177,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":3,"column":10,"name":"number_10","row":177,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":2,"name":"chart_6","row":181,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":2,"name":"text_61","row":186,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":3,"column":2,"name":"number_11","row":189,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":9,"name":"text_62","row":191,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":2,"column":11,"name":"text_69","row":189,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":13,"column":1,"name":"link_11","row":193,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":13,"column":15,"name":"link_12","row":193,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":16,"name":"chart_18","row":179,"rowspan":7,"widgetStyle":{"borderEdges":[]}},{"colspan":5,"column":16,"name":"text_70","row":187,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":11,"column":16,"name":"chart_12","row":190,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":23,"name":"number_9","row":187,"rowspan":2,"widgetStyle":{"borderEdges":[]}}]}],"rowHeight":"fine","selectors":[],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"rgb(230, 236, 242)","cellSpacingX":0,"cellSpacingY":0,"fit":"fitwidth","gutterColor":"#C5D3E0"},"version":1.0}],"layouts":[],"steps":{"Best_Performing_Prod_1":{"broadcastFacet":true,"datasets":[{"name":"MFG_SalesAgreementProductSchedule"}],"isGlobal":false,"label":"Best Performing Product","query":{"query":"{\"measures\":[[\"sum\",\"DerivedPlannedAmount\",\"A\"],[\"sum\",\"DerivedActualAmount\",\"B\"],[\"count\",\"*\",\"C\"],[\"sum\",\"ActualQuantity\",\"D\"],[\"count\",\"*\",\"E\"]],\"columns\":[{\"query\":{\"measures\":[[\"sum\",\"DerivedPlannedAmount\"]],\"limit\":1,\"groups\":[\"SalesAgreementProduct.Name\"]},\"header\":\"Planned Revenue\"},{\"query\":{\"measures\":[[\"sum\",\"DerivedActualAmount\"]],\"limit\":1,\"groups\":[\"SalesAgreementProduct.Name\"],\"order\":[[-1,{\"ascending\":false,\"inner\":false}]]},\"header\":\"Actual Revenue\"},{\"query\":{\"measures\":[[\"count\",\"*\"]],\"limit\":1,\"groups\":[\"SalesAgreementProduct.Name\"],\"formula\":\"B/A\"},\"header\":\"Realization\"},{\"query\":{\"measures\":[[\"sum\",\"ActualQuantity\"]],\"limit\":1,\"groups\":[\"SalesAgreementProduct.Name\"]}},{\"query\":{\"measures\":[[\"count\",\"*\"]],\"limit\":1,\"groups\":[\"SalesAgreementProduct.Name\"],\"formula\":\"B/D\"},\"header\":\"Avg Price\"}],\"groups\":[\"SalesAgreementProduct.Name\"],\"filters\":[[\"SalesAgreementProduct.SalesAgreement.StatusCode\",[\"Activated\"],\"in\"]]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","type":"aggregateflex","useGlobal":true,"visualizationParameters":{"options":{},"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":["SalesAgreementProduct.Name","A","B","C"],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"showRowIndexColumn":false,"totals":true,"verticalPadding":8},"type":"table"}},"Top_performing_sales_1":{"broadcastFacet":true,"groups":[],"label":"Top performing sales agreement this year","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\";\nall_slaps = filter all_slaps by 'SalesAgreementProduct.SalesAgreement.StatusCode' == \"Activated\";\nvalid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}};\nvalid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}};\nvalid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\";\nStart = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now())>= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_actual = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))))),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_planned = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}})) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))))),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nDataForFill_actual = union Start, End_Value_actual;\nDataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month');\nFilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount';\nDataForFill_planned = union Start, End_Value_planned;\nDataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount';\nFilledData = union FilledData_actual, FilledData_planned;\nresult = group FilledData by ('Id'), valid_slaps by ('Id');\nresult = foreach result generate first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Name') as 'SalesAgreementProduct.SalesAgreement.Name', sum(FilledData.'Actual Amount') as 'Actual', sum(FilledData.'Planned Amount') as 'Plan';\nresult = group result by ('SalesAgreementProduct.SalesAgreement.Name');\nresult = foreach result generate 'SalesAgreementProduct.SalesAgreement.Name', sum('Actual')/sum('Plan')  as 'Compliance';\nresult = order result by 'Compliance' desc;\nresult = limit result 1;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"max":1,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"columnMap":{"trellis":[],"plots":["Compliance"]},"high":66,"showActionMenu":true,"min":0,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Team_Attainment_1":{"broadcastFacet":false,"groups":[],"label":"Team Attainment","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\n targets = filter targets by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n  targets = filter targets by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets = filter targets by 'AcctMgrTargetDstrId' is null;\n targets = filter targets by {{column(Logged_In_User.result, [\"Id\"]).asEquality(\"AssignedTo.Managers\")}} && ({{column(Logged_In_User.result, [\"Id\"]).asEquality(\"AssignedTo.ManagerId\")}} || {{column(Logged_In_User.result, [\"Id\"]).asEquality(\"AssignedTo.ForecastRole.ParentRole.ForecastUserId\")}});\n targets = filter targets by !({{column(Logged_In_User.result, [\"Id\"]).asEquality(\"AssignedTo.Id\")}});\n actuals = load \"MFG_TargetActuals\";\n actuals = filter actuals by 'Order.StatusCode' == \"Activated\";\n actuals = filter actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"]; \nactuals = filter actuals by !({{column(Logged_In_User.result, [\"Id\"]).asEquality(\"TargetActualsOwner.Id\")}});\n result = group targets by 'AssignedTo.Id' left, actuals by 'TargetActualsOwner.Managers';\n result = foreach result generate targets.'AssignedTo.Id' as 'AssignedTo.Id', first(targets.'AssignedTo.Name') as 'AssignedTo.Name', first(targets.'AssignedTo.SmallPhotoUrl') as 'AssignedTo.SmallPhotoUrl', sum(targets.'PeriodTargetCurrencyValue') as 'PeriodTargetCurrencyValue', coalesce(sum(actuals.'TotalPrice'),0) as 'TotalPrice', coalesce(sum(actuals.'TotalPrice'),0)/sum(targets.'PeriodTargetCurrencyValue') as 'attainment_ratio', 1 as 'count';\nresult = group result by ('AssignedTo.Id','AssignedTo.Name');\n result = foreach result generate 'AssignedTo.Id', first('AssignedTo.Name') as 'AssignedTo.Name', first('AssignedTo.SmallPhotoUrl') as 'AssignedTo.SmallPhotoUrl', sum('TotalPrice')/sum('PeriodTargetCurrencyValue') as 'Attainment', sum(sum('count')) over ([..] partition by all) as 'total reps', rank() over ([..] partition by all order by sum('attainment_ratio') desc ) as 'Rep_Rank';\n result = group result by ('AssignedTo.Id', 'AssignedTo.Name');\n result = foreach result generate 'AssignedTo.Id', 'AssignedTo.Name', first('AssignedTo.SmallPhotoUrl') as 'AssignedTo.SmallPhotoUrl', first('Attainment') as 'Attainment', first('total reps') as 'total reps', first('Rep_Rank') as 'Rep_Rank', max(max(Rep_Rank)) over ([..] partition by all) as 'Max_Rank';\n result_bottom = filter result by 'Rep_Rank' > ceil('Max_Rank'/2);\n result_bottom = order result_bottom by 'Attainment' asc nulls last;\n result_bottom = foreach result_bottom generate \"Bottom Performers\" as 'Group', 'AssignedTo.Name', 'AssignedTo.SmallPhotoUrl', 'Attainment';\n result_bottom = limit result_bottom 3;\n","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"max":1,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"polargauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":false,"size":[50,50],"enable":true,"type":"y","chartsPerLine":4},"icons":{"useIcons":false,"iconProps":{"fit":"cover","column":""}},"inner":80,"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"columnMap":{"trellis":["AssignedTo.Name"],"plots":["Attainment"]},"high":66,"showActionMenu":true,"min":0,"valueType":"percent","theme":"wave","applyConditionalFormatting":true},"type":"chart"}},"Compliance_over_time_1":{"broadcastFacet":true,"groups":[],"label":"Compliance over time for Account with lowest compliance","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\";\nall_slaps = filter all_slaps by 'SalesAgreementProduct.SalesAgreement.Account.Name' == \"{{coalesce(cell(Lowest_compliance_YT_1.result,0,\"SalesAgreementProduct.SalesAgreement.Account.Name\"),\" \").asObject()}}\";\nvalid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}};\nvalid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}};\nvalid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\";\nStart = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now())>= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_actual = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))))),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount',  0 as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nEnd_Value_planned = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 0 as 'Actual Amount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'PlannedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}})) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))))),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) * 'PlannedDailyAmount' else 0 end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nDataForFill_actual = union Start, End_Value_actual;\nDataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month');\nFilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', 0 as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Planned Amount';\nDataForFill_planned = union Start, End_Value_planned;\nDataForFill_planned = foreach DataForFill_planned generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount', 'Planned Amount' as 'Planned Amount', 'PlannedDailyAmount' as 'PlannedDailyAmount';\nFilledData_planned = fill DataForFill_planned by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_planned = group FilledData_planned by ('Id', 'Date_Year', 'Date_Month');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', 0 as 'Actual Amount', sum('Planned Amount') as 'Planned Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('PlannedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'PlannedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_planned = filter FilledData_planned by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_planned = foreach FilledData_planned generate 'Id', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Planned Amount' is null then month_days(toDate('Date'))*'PlannedDailyAmount' else 'Planned Amount' end) as 'Planned Amount';\nFilledData = union FilledData_actual, FilledData_planned;\nresult = group FilledData by ('Id','Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Planned Amount') as 'Plan', (sum('Planned Amount')-sum('Actual Amount')) as 'Demand Shortfall';\nresult = group result by ('Date_Year', 'Date_Month');\nresult = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actual')/sum('Plan') as 'Compliance';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":true,"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"split":[],"timeAxis":["StartDate_Year~~~StartDate_Month"],"trellis":[],"plots":["Compliance"]},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"}},"Rebate_TransactionAmount":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\"; all_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000; current_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000; Start_Current = foreach current_valid_payout_sources generate {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyRebateAmount' else 'RebateAmount' end as 'RebateBeforeAdjustment', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity', 'DailyRebateAmount' as 'DailyRebateAmount'; End_Current = foreach current_valid_payout_sources generate {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyRebateAmount' else 0 end as 'RebateBeforeAdjustment', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity', 'DailyRebateAmount' as 'DailyRebateAmount'; DataForFill_Current = union Start_Current, End_Current; DataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity', 'DailyRebateAmount' as 'DailyRebateAmount', 'RebateBeforeAdjustment' as 'RebateBeforeAdjustment'; FilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month'); FilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('RebateBeforeAdjustment') as 'RebateBeforeAdjustment', min(first('DailyRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity'; FilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount', (case when 'RebateBeforeAdjustment' is null then month_days(toDate('Date'))*'DailyRebateAmount' else 'RebateBeforeAdjustment' end) as 'RebateBeforeAdjustment', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity'; previous_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000; previous_valid_payout_sources = filter previous_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000;Start_Previous = foreach previous_valid_payout_sources generate {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateBeforeAdjustment', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000) && ({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity', 'DailyRebateAmount' as 'DailyRebateAmount'; End_Previous = foreach previous_valid_payout_sources generate {{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyRebateAmount' else 0 end as 'RebateBeforeAdjustment', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Prev_Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(lens_4.result,0,\"Prev_Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity', 'DailyRebateAmount' as 'DailyRebateAmount'; DataForFill_Previous = union Start_Previous, End_Previous; DataForFill_Previous = foreach DataForFill_Previous generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity', 'DailyRebateAmount' as 'DailyRebateAmount', 'RebateBeforeAdjustment' as 'RebateBeforeAdjustment'; FilledData_Previous = fill DataForFill_Previous by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_Previous = group FilledData_Previous by ('Id', 'Date_Year', 'Date_Month'); FilledData_Previous = foreach FilledData_Previous generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('RebateBeforeAdjustment') as 'RebateBeforeAdjustment', min(first('DailyRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity'; FilledData_Previous = filter FilledData_Previous by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_Previous = foreach FilledData_Previous generate 'Id', 'Date_Year', 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount', (case when 'RebateBeforeAdjustment' is null then month_days(toDate('Date'))*'DailyRebateAmount' else 'RebateBeforeAdjustment' end) as 'RebateBeforeAdjustment', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity'; result = group FilledData_Current by all full, FilledData_Previous by all; result = foreach result generate sum(FilledData_Current.'RebateAmount') as 'Total Payout', case when coalesce(sum(FilledData_Previous.'RebateAmount'),0) == 0 then \"-\" else number_to_string(round((coalesce(sum(FilledData_Current.'RebateAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount'),0)) * 100 / coalesce(sum(FilledData_Previous.'RebateAmount'),0),0),\"0\") end as 'RebateDelta', case when (coalesce(sum(FilledData_Current.'RebateAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount'),0)) > 0 then \"rgb(255, 152, 151)\" else \"rgb(0, 181, 49)\" end as 'RebateColor', case when (coalesce(sum(FilledData_Current.'RebateAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount'),0)) > 0 then \"↑\"  when (coalesce(sum(FilledData_Current.'RebateAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount'),0)) == 0 then \"-\" else \"↓\" end as 'RebateArrow', sum(FilledData_Current.'RebateBeforeAdjustment') as 'sum_RebateBeforeAdjustment', case when coalesce(sum(FilledData_Previous.'RebateBeforeAdjustment'),0) == 0 then \"-\" else number_to_string(round((coalesce(sum(FilledData_Current.'RebateBeforeAdjustment'),0) - coalesce(sum(FilledData_Previous.'RebateBeforeAdjustment'),0)) * 100 / coalesce(sum(FilledData_Previous.'RebateBeforeAdjustment'),0),0),\"0\") end as 'RebateBeforeAdjustmentDelta', case when (coalesce(sum(FilledData_Current.'RebateBeforeAdjustment'),0) - coalesce(sum(FilledData_Previous.'RebateBeforeAdjustment'),0)) > 0 then \"rgb(255, 152, 151)\" else \"rgb(0, 181, 49)\" end as 'RebateBeforeAdjustmentColor', case when (coalesce(sum(FilledData_Current.'RebateBeforeAdjustment'),0) - coalesce(sum(FilledData_Previous.'RebateBeforeAdjustment'),0)) > 0 then \"↑\"  when (coalesce(sum(FilledData_Current.'RebateBeforeAdjustment'),0) - coalesce(sum(FilledData_Previous.'RebateBeforeAdjustment'),0)) == 0 then \"-\" else \"↓\" end as 'RebateBeforeAdjustmentArrow', sum(FilledData_Current.'TotalQuantity') as 'Total Quantity', case when coalesce(sum(FilledData_Previous.'TotalQuantity'),0) == 0 then \"-\" else number_to_string(round((coalesce(sum(FilledData_Current.'TotalQuantity'),0) - coalesce(sum(FilledData_Previous.'TotalQuantity'),0)) * 100 / coalesce(sum(FilledData_Previous.'TotalQuantity'),0),0),\"0\") end as 'QuantityDelta', case when (coalesce(sum(FilledData_Current.'TotalQuantity'),0) - coalesce(sum(FilledData_Previous.'TotalQuantity'),0)) > 0 then \"rgb(0, 181, 49)\" else \"rgb(255, 152, 151)\" end as 'QuantityColor', case when (coalesce(sum(FilledData_Current.'TotalQuantity'),0) - coalesce(sum(FilledData_Previous.'TotalQuantity'),0)) > 0 then \"↑\"  when (coalesce(sum(FilledData_Current.'TotalQuantity'),0) - coalesce(sum(FilledData_Previous.'TotalQuantity'),0)) == 0 then \"-\" else \"↓\" end as 'QuantityArrow', sum(FilledData_Current.'TotalTransactionAmount') as 'Total Revenue', case when coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0) == 0 then \"-\" else number_to_string(round((coalesce(sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0)) * 100 / coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0),0),\"0\") end as 'TransactionDelta', case when (coalesce(sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0)) > 0 then \"rgb(0, 181, 49)\" else \"rgb(255, 152, 151)\" end as 'TransactionColor', case when (coalesce(sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0)) > 0 then \"↑\"  when (coalesce(sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'TotalTransactionAmount'),0)) == 0 then \"-\" else \"↓\" end as 'TransactionArrow', round(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalTransactionAmount'),4) as 'Payout:Revenue', case when coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0) == 0 then \"-\" else number_to_string(round((coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0)) * 100 / coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0),0),\"0\") end as 'Payout:RevenueDelta', case when (coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0)) > 0 then \"rgb(255, 152, 151)\" else \"rgb(0, 181, 49)\" end as 'Payout:RevenueColor',  case when (coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0)) > 0 then \"↑\"  when (coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalTransactionAmount'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalTransactionAmount'),0)) == 0 then \"-\" else \"↓\" end as 'Payout:RevenueArrow', round(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalQuantity'),2) as 'sum_Payout:Quantity', case when coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalQuantity'),0) == 0 then \"-\" else number_to_string(round((coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalQuantity'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalQuantity'),0)) * 100 / coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalQuantity'),0),0),\"0\") end as 'Payout:QuantityDelta', case when (coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalQuantity'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalQuantity'),0)) > 0 then \"rgb(255, 152, 151)\" else \"rgb(0, 181, 49)\" end as 'Payout:QuantityColor', case when (coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalQuantity'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalQuantity'),0)) > 0 then \"↑\"  when (coalesce(sum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalQuantity'),0) - coalesce(sum(FilledData_Previous.'RebateAmount')/sum(FilledData_Previous.'TotalQuantity'),0)) == 0 then \"-\" else \"↓\" end as 'Payout:QuantityArrow';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Highest_Demanded_Pro_1":{"broadcastFacet":true,"groups":[],"label":"Highest Demanded Product","numbers":[],"query":"all_slaps_schedule = load \"MFG_SalesAgreementProductSchedule\";\nall_slaps_forecast = load \"MFG_AccountProductPeriodForecast1\";\nall_slaps_order = load \"MFG_OrderProduct4\";\nall_slaps_schedule = filter all_slaps_schedule by !('SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\", \"Rejected\"]);\nall_slaps_schedule = filter all_slaps_schedule by 'isValidProductSchedule' == \"true\";\nall_slaps_order = filter all_slaps_order by 'Order.StatusCode' == \"Activated\";\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' <= (date_to_epoch(year_last_day(now()))+86399);\nall_slaps_order = filter all_slaps_order by 'Order.EffectiveDate_sec_epoch' >= (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60);\nall_slaps_forecast = filter all_slaps_forecast by 'Period.StartDate_sec_epoch' <= (date_to_epoch(year_last_day(now()))+86399);\nall_slaps_forecast = filter all_slaps_forecast by 'Period.EndDate_sec_epoch' >= (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60);\nall_slaps_schedule = filter all_slaps_schedule by 'StartDate_sec_epoch' <= (date_to_epoch(year_last_day(now()))+86399);\nall_slaps_schedule = filter all_slaps_schedule by 'ActualEndDate_sec_epoch' >= (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60);\nall_slaps_order = foreach all_slaps_order generate 'Id', 'Product.Name' as 'SalesAgreementProduct.Name','Order.EffectiveDate_sec_epoch' as 'StartDate_sec_epoch', 'Order.EffectiveDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'UnitPrice' as 'SalesPrice', 0 as 'DiscountPercentage', 'TotalPrice' as 'DerivedActualAmount', 0 as 'ForecastedAmountFinal', 0 as 'ForecastedDailyAmount', 1 as 'Type';\nall_slaps_forecast = foreach all_slaps_forecast generate 'Id' as 'Id', 'AccountProductForecast.Name' as 'SalesAgreementProduct.Name', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 2 as 'Type';\nall_slaps_schedule = foreach all_slaps_schedule generate 'Id' as 'Id', 'SalesAgreementProduct.Name' as 'SalesAgreementProduct.Name', 'StartDate_sec_epoch' as 'StartDate_sec_epoch', 'ActualEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'SalesPrice' as 'SalesPrice', 'DiscountPercentage' as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'PlannedAmountFinal' as 'ForecastedAmountFinal', 'PlannedDailyAmount' as 'ForecastedDailyAmount', 3 as 'Type';\nvalid_slaps = union all_slaps_order, all_slaps_forecast, all_slaps_schedule;\nall_slaps_forecast = union all_slaps_forecast, all_slaps_schedule;\nStart = foreach all_slaps_forecast generate (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60) as 'Start', (date_to_epoch(year_last_day(now()))+86399) as 'End', 'Id' as 'Id', 'Type' as 'Type',  'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && (date_to_epoch(year_last_day(now()))+86399) >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)) && ('ActualEndDate_sec_epoch' >= (date_to_epoch(year_last_day(now()))+86399)) && (date_to_epoch(year_last_day(now()))+86399) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate((date_to_epoch(year_last_day(now()))+86399)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60))))) && (date_to_epoch(year_last_day(now()))+86399) >= date_to_epoch(month_last_day(toDate((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)))) then (daysBetween(toDate((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)),month_last_day(toDate((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60))))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60))))) && (date_to_epoch(year_last_day(now()))+86399) >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)) && ((date_to_epoch(year_last_day(now()))+86399) <= date_to_epoch(month_last_day(toDate((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60))))) && (date_to_epoch(year_last_day(now()))+86399) <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60)),toDate((date_to_epoch(year_last_day(now()))+86399)))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60) as 'Start', (date_to_epoch(year_last_day(now()))+86399) as 'End', 'Id' as 'Id', 'Type' as 'Type', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < (date_to_epoch(year_last_day(now()))+86399)) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate((date_to_epoch(year_last_day(now()))+86399)),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < (date_to_epoch(year_last_day(now()))+86399)) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate((date_to_epoch(year_last_day(now()))+86399)),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60) < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= (date_to_epoch(year_last_day(now()))+86399)))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(year_last_day(now()))+86399)))) - 2764800)))) + 86400)) && ((({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60) < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(year_last_day(now()))+86399)))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= (date_to_epoch(year_last_day(now()))+86399))) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(year_last_day(now()))+86399)))) - 2764800)))))),toDate((date_to_epoch(year_last_day(now()))+86399)))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_actual = foreach all_slaps_order generate 'Id', 'Type' as 'Type', date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") as 'Date_Year', date_to_string(toDate('StartDate_sec_epoch'),\"MM\") as 'Date_Month', 'DerivedActualAmount' as 'Actual Amount', 'SalesPrice' as 'SalesPrice', 0 as 'Forecasted Amount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Type' as 'Type', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', min(first('Type')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Type', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Type' as 'Type', 'Date_Year', 'Date_Month', 0 as 'Actual Amount', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = union FilledData_actual, FilledData_Forecasted;\nFilledData = foreach FilledData generate 'Id' as 'Id', 'Date_Year', 'Date_Month', 'Actual Amount' as 'Actual Amount', case when 'Type' == 2 then 'Forecasted Amount' else 0 end as 'Forecasted Amount', case when 'Type' == 3 then 'Forecasted Amount' else 0 end as 'Planned Amount';\nresult = group FilledData by 'Id' left, valid_slaps by 'Id';\nresult = foreach result generate first(valid_slaps.'SalesAgreementProduct.Name') as 'SalesAgreementProduct.Name', sum(FilledData.'Planned Amount') as 'PlannedDemand', sum(FilledData.'Forecasted Amount') as 'ForecastedDemand', sum(FilledData.'Forecasted Amount') - sum(FilledData.'Actual Amount') as 'NetForecastedDemand';\nresult = group result by ('SalesAgreementProduct.Name');\nresult = foreach result generate 'SalesAgreementProduct.Name', sum('PlannedDemand') as 'PlannedDemand', sum('ForecastedDemand') as 'ForecastedDemand', sum('NetForecastedDemand') as 'NetForecastedDemand';\nresult = order result by 'ForecastedDemand' desc nulls last;\nresult = limit result 1;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Target_Value":{"broadcastFacet":true,"groups":[],"label":"Target_Value","numbers":[],"query":"q = load \"MFG_AccountManagerPeriodicTargetDistribution\";\nq = group q by all;\nq = foreach q generate {{coalesce(cell(Attainments_numbers.result, 0, \"Target_Value\"),0).asObject()}} as 'count';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"MAPE_Query_1":{"broadcastFacet":true,"groups":[],"label":"MAPE Query","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\nforecasts = filter forecasts by 'Period.StartDate_sec_epoch' <= (date_to_epoch(now()));\nforecasts = filter forecasts by 'Period.EndDate_sec_epoch' >= (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60);\nforecasts = foreach forecasts generate  (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60) as 'Start', (date_to_epoch(now())) as 'End', 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'ForecastedRevenue' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\nStart = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity',                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                                 , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\nEnd_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj',  case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\nDataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', first('Account.Name') as 'Account.Name', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Account.Name' as 'Account.Name', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\nforecasts_results = group FilledData by ('Account.Name', 'Date_Year', 'Date_Month');\nforecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', 'Account.Name' as 'Account.Name', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\nforecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Account.Name' as 'Account.Name', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\nforecast_results = filter forecasts_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current day\"];\nforecast_results = group forecast_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\nforecast_results = foreach forecast_results generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\nforecast_results = foreach forecast_results generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\nforecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\norders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by 'Order.EffectiveDate_sec_epoch' <= (date_to_epoch(now()));\norders = filter orders by 'Order.EffectiveDate_sec_epoch' >= (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60);\norders = group orders by ('Order.Account.Name', 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\norder_results = foreach orders generate 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Order.Account.Name' as 'Account.Name', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Quantity';\norder_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\nresult = cogroup order_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month') full, forecast_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\nresult = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month',  coalesce(forecast_results.'Account.Name', order_results.'Account.Name') as 'Account.Name', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\nresult = group result by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\nresult = foreach result generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', sum('Actuals')-sum('Forecast') as 'ForecastAmountGap', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', sum('Actuals')-sum('Forecast_before_adj') as 'ForecastAmountGap_before_adj', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligible', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligible', sum('ActualQuantity')-sum('ForecastQuantity') as 'ForecastQuantityGap', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', sum('ActualQuantity')-sum('ForecastQuantity_before_adj') as 'ForecastQuantityGap_before_adj';\nresult = group result by 'StartDate_Year~~~StartDate_Month';\nresult = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('amount_mape')*100/sum('amount_mape_eligible') as 'amount_mape';\nresult = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'amount_mape' as 'amount_mape';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Min_and_Max_Dates_fo_1":{"broadcastFacet":true,"groups":[],"label":"Min and Max Dates for CYTD","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = group q by all;\nq = foreach q generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Min', date_to_epoch(now()) as 'Max';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Logged_In_User":{"broadcastFacet":false,"groups":[],"label":"Logged_In_User","numbers":[],"query":"q = load \"MFG_Users\";\nq = group q by 'Id';\nq = foreach q generate 'Id' as 'Id', first('Name') as 'Name', count() as 'count';\nq = order q by 'Id' asc;\nq = limit q 1;","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"singlerequired","strings":[],"type":"saql","useGlobal":false,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Date_Filter_1":{"broadcastFacet":true,"groups":[],"label":"Date_Filter","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = foreach q generate \"1970\" as 'Date_Year', \"01\" as 'Date_Month', \"01\" as 'Date_Day';\nq = group q by ('Date_Year', 'Date_Month', 'Date_Day');\nq = foreach q generate 'Date_Year', 'Date_Month', 'Date_Day', count() as 'sum';\n-- use fill() to generate null rows for any missing dates. Then you can use timeseries().\nq = fill q by (dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = timeseries q generate 'sum' as 'cnt' with (length=60000,  dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = foreach q generate 'Date_Year' + \"-\" + 'Date_Month' + \"-\" + 'Date_Day'+ \" 00:00:00\" as 'Date','Date_Year', 'Date_Month', 'Date_Day';\nq = filter q by date('Date_Year', 'Date_Month', 'Date_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\nq = foreach q generate toDate('Date') as 'Date', date_to_epoch(toDate('Date')) as 'Date_sec_epoch';\nq = group q by all;\nq = foreach q generate min('Date') as 'Min Date', toDate(max('Date_sec_epoch')+86399) as 'Max Date', min('Date_sec_epoch')*1000 as 'Min', (max('Date_sec_epoch')+86399)*1000 as 'Max',           date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))*1000 as 'Prev_Min', (date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))+86399)*1000 as 'Prev_Max';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Target_Actuals":{"broadcastFacet":true,"groups":[],"label":"Target_Actuals","numbers":[],"query":"q = load \"MFG_AccountManagerPeriodicTargetDistribution\";\nq = group q by all;\nq = foreach q generate {{coalesce(cell(Attainments_numbers.result, 0, \"Target_Actuals\"),0).asObject()}} as 'count';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Products_Analysis_1":{"broadcastFacet":true,"groups":[],"label":"Products Analysis","numbers":[],"query":"targets_all = load \"MFG_AccountManagerPeriodicTargetDistribution\";\n targets = filter targets_all by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('AssignedTo.Id')}};\n targets = filter targets by 'AcctMgrTargetDstrId' is not null && 'AcctMgrTargetDstr.ProductId' is not null;\n targets_cy = filter targets by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets_cy = filter targets_cy by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n\ntarget_actuals = load \"MFG_TargetActuals\";\n target_actuals = filter target_actuals by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('TargetActualsOwner.Managers')}};\n target_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\n\ntarget_actuals_cy = filter target_actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n\n\ntarget_actuals = group target_actuals by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Product.Name');\ntarget_actuals = foreach target_actuals generate 'Product.Name', 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice';\ntarget_actuals = foreach target_actuals generate 'Product.Name', 'Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\" as 'Period', 'Period.StartDate_Year' + \"~~~\" + 'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', date_to_epoch(toDate('Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\", \"yyyy-MM-dd\") ) as 'Period_sec_epoch', sum_TotalPrice as sum_TotalPrice;\n\n\n\ntarget_attainment = cogroup targets_cy by 'AcctMgrTargetDstr.Product.Name' left, target_actuals_cy by 'Product.Name';\ntarget_attainment = foreach target_attainment generate coalesce(targets_cy.'AcctMgrTargetDstr.Product.Name', target_actuals_cy.'Product.Name') as 'AcctMgrTargetDstr.Product.Name', sum(target_actuals_cy.'TotalPrice')/sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Attainment_Ratio',  sum(target_actuals_cy.'TotalPrice')/sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Attainment_Percentage',  sum(target_actuals_cy.'TotalPrice') as 'Target_Actuals', sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Value';\n\ntarget_attainment_current_fy_view = foreach target_attainment generate 'AcctMgrTargetDstr.Product.Name', 'Target_Value', 'Target_Actuals', 'Target_Attainment_Percentage';\n target_attainment_current_fy_view = filter target_attainment_current_fy_view by 'Target_Attainment_Percentage' <= .50;\n target_attainment_current_fy_view = group target_attainment_current_fy_view by all;\n target_attainment_current_fy_view = foreach target_attainment_current_fy_view generate count() as 'count';\n targets_notnull = group targets_all by all;\n targets_notnull = foreach targets_notnull generate 0 as 'count';\n target_attainment_current_fy_view = union target_attainment_current_fy_view, targets_notnull;\n target_attainment_current_fy_view = group target_attainment_current_fy_view by all;\n target_attainment_current_fy_view = foreach target_attainment_current_fy_view generate sum('count') as 'count';","receiveFacetSource":{"mode":"exclude","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Demand_shortfall_CM_1":{"broadcastFacet":true,"groups":[],"label":"Demand shortfall CM by account","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; valid_slaps = filter all_slaps by 'ActualEndDate_sec_epoch' <= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now()) >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now())>= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';  result = group Start by ('Id') left, valid_slaps by ('Id'); result = foreach result generate first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum(Start.'Actual Amount') as 'Actual', sum(Start.'Planned Amount') as 'Plan'; result = group result by 'SalesAgreementProduct.SalesAgreement.Account.Name'; result = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name', sum('Actual') as 'Actual', sum('Plan') as 'Plan', (sum('Plan')-sum('Actual')) as 'Demand Shortfall'; result = order result by 'Demand Shortfall' desc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"vbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":["SalesAgreementProduct.SalesAgreement.Account.Name"],"plots":["Demand Shortfall"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Average_realization__1":{"broadcastFacet":true,"datasets":[{"name":"MFG_SalesAgreementProductSchedule"}],"isGlobal":false,"label":"Average realization across products","query":{"query":"{\"measures\":[[\"sum\",\"DerivedPlannedAmount\",\"A\"],[\"sum\",\"DerivedActualAmount\",\"B\"],[\"count\",\"*\",\"C\"]],\"columns\":[{\"query\":{\"measures\":[[\"sum\",\"DerivedPlannedAmount\"]],\"limit\":1},\"header\":\"Planned Amount\"},{\"query\":{\"measures\":[[\"sum\",\"DerivedActualAmount\"]],\"limit\":1,\"order\":[[-1,{\"ascending\":false,\"inner\":false}]]},\"header\":\"Revenue\"},{\"query\":{\"measures\":[[\"count\",\"*\"]],\"limit\":1,\"formula\":\"B/A\"},\"header\":\"Realization\"}],\"filters\":[[\"SalesAgreementProduct.SalesAgreement.StatusCode\",[\"Activated\"],\"in\"]]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":1,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":[],"plots":["C"]},"showActionMenu":true,"min":0,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"MAPE_value_1":{"broadcastFacet":true,"groups":[],"label":"MAPE value","numbers":[],"query":"forecasts = load \"MFG_AccountProductPeriodForecast1\";\nforecasts = filter forecasts by 'Period.StartDate_sec_epoch' <= date_to_epoch(now());\nforecasts = filter forecasts by 'Period.EndDate_sec_epoch' >= (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60);\nforecasts = foreach forecasts generate  (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60) as 'Start', date_to_epoch(now()) as 'End', 'Id' as 'Id', 'Period.StartDate_sec_epoch' as 'StartDate_sec_epoch', 'Period.EndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'ForecastedRevenue' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\nStart = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                ,                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\nEnd_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\nDataForFill = union Start, End_Value;\nDataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\nFilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\nFilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\nforecasts_results = group FilledData by ('Date_Year', 'Date_Month');\nforecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\nforecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\nforecast_results = filter forecasts_results by date('StartDate_Year','StartDate_Month','StartDate_Day') in [\"current fiscal_year\"..\"current day\"];\nforecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\nforecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\nforecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\nforecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\norders = load \"MFG_OrderProduct4\";\n orders = filter orders by 'Order.StatusCode' == \"Activated\";\n orders = filter orders by 'Order.EffectiveDate_sec_epoch' <= date_to_epoch(now());\norders = filter orders by 'Order.EffectiveDate_sec_epoch' >= (({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)-60);\norders = group orders by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\norder_results = foreach orders generate 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'Order.EffectiveDate_Year' + \"~~~\" + 'Order.EffectiveDate_Month' asc) as 'cumm_Quantity';\norder_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\nresult = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\nresult = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\nresult = group result by 'StartDate_Year~~~StartDate_Month';\nresult = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligibile', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligibile';\nresult = group result by all;\nresult = foreach result generate sum('amount_mape')*100/sum('amount_mape_eligibile') as 'amount_mape';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Top_Team_Attainment_1":{"broadcastFacet":false,"groups":[],"label":"Team Attainment","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\n targets = filter targets by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n  targets = filter targets by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets = filter targets by 'AcctMgrTargetDstrId' is null;\n targets = filter targets by {{column(Logged_In_User.result, [\"Id\"]).asEquality(\"AssignedTo.Managers\")}} && ({{column(Logged_In_User.result, [\"Id\"]).asEquality(\"AssignedTo.ManagerId\")}} || {{column(Logged_In_User.result, [\"Id\"]).asEquality(\"AssignedTo.ForecastRole.ParentRole.ForecastUserId\")}});\n targets = filter targets by !({{column(Logged_In_User.result, [\"Id\"]).asEquality(\"AssignedTo.Id\")}});\n actuals = load \"MFG_TargetActuals\";\n actuals = filter actuals by 'Order.StatusCode' == \"Activated\";\n actuals = filter actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"]; \nactuals = filter actuals by !({{column(Logged_In_User.result, [\"Id\"]).asEquality(\"TargetActualsOwner.Id\")}});\n result = group targets by 'AssignedTo.Id' left, actuals by 'TargetActualsOwner.Managers';\n result = foreach result generate targets.'AssignedTo.Id' as 'AssignedTo.Id', first(targets.'AssignedTo.Name') as 'AssignedTo.Name', first(targets.'AssignedTo.SmallPhotoUrl') as 'AssignedTo.SmallPhotoUrl', sum(targets.'PeriodTargetCurrencyValue') as 'PeriodTargetCurrencyValue', coalesce(sum(actuals.'TotalPrice'),0) as 'TotalPrice', coalesce(sum(actuals.'TotalPrice'),0)/sum(targets.'PeriodTargetCurrencyValue') as 'attainment_ratio', 1 as 'count';\nresult = group result by ('AssignedTo.Id','AssignedTo.Name');\n result = foreach result generate 'AssignedTo.Id', first('AssignedTo.Name') as 'AssignedTo.Name', first('AssignedTo.SmallPhotoUrl') as 'AssignedTo.SmallPhotoUrl', sum('TotalPrice')/sum('PeriodTargetCurrencyValue') as 'Attainment', sum(sum('count')) over ([..] partition by all) as 'total reps', rank() over ([..] partition by all order by sum('attainment_ratio') desc ) as 'Rep_Rank';\n result = group result by ('AssignedTo.Id', 'AssignedTo.Name');\n result = foreach result generate 'AssignedTo.Id', 'AssignedTo.Name', first('AssignedTo.SmallPhotoUrl') as 'AssignedTo.SmallPhotoUrl', first('Attainment') as 'Attainment', first('total reps') as 'total reps', first('Rep_Rank') as 'Rep_Rank', max(max(Rep_Rank)) over ([..] partition by all) as 'Max_Rank';\n result_top = filter result by 'Rep_Rank' <= ceil('Max_Rank'/2);\n result_top = order result_top by 'Attainment' desc nulls last;\n result_top = foreach result_top generate \"Top Performers\" as 'Group', 'AssignedTo.Name', 'AssignedTo.SmallPhotoUrl', 'Attainment';\n result_top = limit result_top 3;\n","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","start":"[]","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"max":1,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"polargauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":false,"size":[50,50],"enable":true,"type":"y","chartsPerLine":4},"icons":{"useIcons":false,"iconProps":{"fit":"cover","column":""}},"inner":80,"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"columnMap":{"trellis":["AssignedTo.Name"],"plots":["Attainment"]},"high":66,"showActionMenu":true,"min":0,"valueType":"percent","theme":"wave","applyConditionalFormatting":true},"type":"chart"}},"Min___Max_Date_for_C_1":{"broadcastFacet":true,"groups":[],"label":"Min & Max Dates for Current Month","numbers":["Min","Max"],"query":"q = load \"MFG_SalesAgreementProductSchedule\";\nq = group q by all;\nq = foreach q generate (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400) as 'Min', date_to_epoch(month_last_day(now())) as 'Max';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Total_Demand_shortfa_1":{"broadcastFacet":true,"groups":[],"label":"Total Demand shortfall Current Month","numbers":["Compliance","Demand Shortfall","sum_Total Outstanding Revenue"],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; valid_slaps = filter all_slaps by 'ActualEndDate_sec_epoch' <= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now()) >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now())>= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}))) then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}) && ({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}} <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Min\"),0).asObject()}}),toDate({{coalesce(cell(Min___Max_Date_for_C_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount'; result = group Start by 'Id' left, valid_slaps by 'Id'; result = foreach result generate sum(Start.'Planned Amount') as 'Planned Amount', sum(Start.'Actual Amount') as 'Actual Amount', sum(valid_slaps.'DerivedPlannedAmount') as 'DerivedPlannedAmount', sum(valid_slaps.'DerivedActualAmount') as 'DerivedActualAmount'; result = group result by all; result = foreach result generate sum('DerivedPlannedAmount')-sum('DerivedActualAmount') as 'sum_Total Outstanding Revenue',(sum('Planned Amount')-sum('Actual Amount')) as 'Demand Shortfall', sum('Actual Amount')/sum('Planned Amount') as 'Compliance';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":["SalesAgreementProduct.SalesAgreement.Account.Name"],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"vbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Attainments_Projections":{"broadcastFacet":false,"groups":[],"label":"Attainments Projections","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\n targets = filter targets by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('AssignedTo.Id')}};\n targets = filter targets by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets = filter targets by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets_m1 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', 'Period.StartDate' as 'Period' ;\ntargets_m2 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null \nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+1)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m3 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+2)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m4 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+3)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m5 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+4)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m6 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+5)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m7 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+6)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m8 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+7)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m9 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+8)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m10 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+9)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m11 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse \nnumber_to_string(string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"yyyy\")) + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#\")+\"-\"\n+\nnumber_to_string((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)%13 + floor((string_to_number(toString(toDate('Period.StartDate', \"yyyy-MM-dd\"), \"MM\"))+10)/13), \"#,00\")\n+\ntoString(toDate('Period.StartDate', \"yyyy-MM-dd\"),\"-dd\") \nend) as 'Period';\ntargets_m12 = foreach targets generate 'Name', 'MonthlyTargetCurrencyValue', (case when 'Period.Type' == \"Month\" then null\nwhen 'Period.Type'==\"Quarter\" then null\nelse toString(toDate('Period.EndDate', \"yyyy-MM-dd\"),\"yyyy-MM-\")+\"01\"\nend) as 'Period';\n\n\n\n\n targets = union targets_m1, targets_m2, targets_m3, targets_m4, targets_m5, targets_m6, targets_m7, targets_m8, targets_m9, targets_m10, targets_m11, targets_m12;\n targets = filter targets by 'Period' is not null;\n\n\n target_actuals = load \"MFG_TargetActuals\";\ntarget_actuals = filter target_actuals by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('TargetActualsOwner.Managers')}};\n target_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\ntarget_actuals_proj = group target_actuals by ('TargetActualsOwner.Managers', 'Order.EffectiveDate_Year', 'Order.EffectiveDate_Month');\ntarget_actuals_proj = foreach target_actuals_proj generate 'TargetActualsOwner.Managers', 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice';\n\ntarget_actuals_proj = fill target_actuals_proj by (dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"), partition='TargetActualsOwner.Managers');\ntarget_actuals_proj = timeseries target_actuals_proj generate 'sum_TotalPrice' as Projected_sum_TotalPrice with (partition='TargetActualsOwner.Managers', length=36, dateCols=('Period.StartDate_Year','Period.StartDate_Month', \"Y-M\"), seasonality = 0, ignoreLast = false);\ntarget_actuals_proj = foreach target_actuals_proj generate 'TargetActualsOwner.Managers', 'Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\" as 'Period', 'Period.StartDate_Year' + \"~~~\" + 'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', case when 'sum_TotalPrice' > coalesce('Projected_sum_TotalPrice',0) then 'sum_TotalPrice' when coalesce('Projected_sum_TotalPrice',0) >= 0 then 'Projected_sum_TotalPrice' else 0 end as 'sum_TotalPrice', month_last_day(toDate('Period.StartDate_Year'+\"-\"+'Period.StartDate_Month'+\"-27 00:00:00\",\"yyyy-MM-dd HH:mm:ss\")) as 'Month Last Day';\n target_actuals_proj = filter target_actuals_proj by 'Month Last Day' > now();\ntarget_actuals = foreach target_actuals generate 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice' ;\n\ntarget_attainment = cogroup targets by 'Period' left, target_actuals by 'Period'left , target_actuals_proj by 'Period';\ntarget_attainment = foreach target_attainment generate toDate(coalesce(targets.'Period', target_actuals.'Period'), \"yyyy-MM-dd\") as 'Period', (case when sum(target_actuals.'sum_TotalPrice')<0 then 0 else sum(target_actuals.'sum_TotalPrice') end) as 'Target_Actuals', sum(targets.'MonthlyTargetCurrencyValue') as 'Target_Value', sum(target_actuals_proj.'sum_TotalPrice') as 'Projections_only', coalesce(sum(target_actuals_proj.'sum_TotalPrice'),sum(target_actuals.'sum_TotalPrice')) as 'Projections';\ntarget_attainment = filter target_attainment by 'Period' in [\"current fiscal_year\"..\"current fiscal_year\"];\n target_attainment = group target_attainment by all;\n target_attainment = foreach target_attainment generate sum('Projections')*100/sum('Target_Value')  as 'Target_Attainment';\n","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"polargauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,20],"enable":true,"type":"x","chartsPerLine":4},"icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"Attainment Type"}},"inner":80,"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Top_inactive_account_1":{"broadcastFacet":true,"groups":[],"label":"Top inactive account","numbers":[],"query":"q = load \"MFG_SalesAgreementProductSchedule\"; expired_thisyear = filter q by date('SalesAgreementProduct.SalesAgreement.EndDate_Year', 'SalesAgreementProduct.SalesAgreement.EndDate_Month', 'SalesAgreementProduct.SalesAgreement.EndDate_Day') in [\"current day - 12 months\"..\"current day\"]; expired_thisyear = filter expired_thisyear by 'SalesAgreementProduct.SalesAgreement.StatusCode' == \"Expired\"; good_accounts_1 = filter q by date('SalesAgreementProduct.SalesAgreement.EndDate_Year', 'SalesAgreementProduct.SalesAgreement.EndDate_Month', 'SalesAgreementProduct.SalesAgreement.EndDate_Day') in [\"current fiscal_year\"..]; good_accounts = filter good_accounts_1 by 'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Activated\", \"Approved\"]; accounts_with_drafts =  filter good_accounts_1 by 'SalesAgreementProduct.SalesAgreement.StatusCode' in [\"Draft\"]; result = group q by 'SalesAgreementProduct.SalesAgreement.Account.Name' left, expired_thisyear by 'SalesAgreementProduct.SalesAgreement.Account.Name' left, good_accounts by 'SalesAgreementProduct.SalesAgreement.Account.Name' left, accounts_with_drafts by 'SalesAgreementProduct.SalesAgreement.Account.Name'; result = foreach result generate q.'SalesAgreementProduct.SalesAgreement.Account.Name' as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum(q.'DerivedActualAmount') as 'Past Revenue', unique(q.'SalesAgreementProduct.SalesAgreement.Name') as '# Past Agreements', coalesce(count(expired_thisyear),0) as 'Expired_Flag', coalesce(count(good_accounts),0) as 'ValidAgreements_Flag', toDate(max(expired_thisyear.'SalesAgreementProduct.SalesAgreement.EndDate_sec_epoch')) as 'SalesAgreementProduct.SalesAgreement.EndDate', unique(accounts_with_drafts.'SalesAgreementProduct.SalesAgreement.Name') as '# Draft Agreements'; result = filter result by 'Expired_Flag' > 0 && 'ValidAgreements_Flag' == 0; result = order result by ('Past Revenue' desc); result = limit result 1;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":["Past Revenue","# Past Agreements","SalesAgreementProduct.SalesAgreement.EndDate","# Draft Agreements"],"customBulkActions":[],"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","numberOfLines":1,"showActionMenu":true,"showRowIndexColumn":false,"verticalPadding":8},"type":"table"}},"Avg_Price_for_best_p_1":{"broadcastFacet":true,"groups":[],"label":"Avg Price for best performing product across time","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; all_slaps = filter all_slaps by 'SalesAgreementProduct.SalesAgreement.StatusCode' == \"Activated\"; valid_slaps = filter all_slaps by 'SalesAgreementProduct.Name' == \"{{cell(Best_Performing_Prod_1.result,0,\"SalesAgreementProduct.Name\").asObject()}}\"; valid_slaps = filter valid_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now())>= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount'; End_Value_actual = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") when (date_to_epoch(now()) < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' < date_to_epoch(now())) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") when (date_to_epoch(now()) < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' > date_to_epoch(now())) then date_to_string(now(),\"MM\") else  date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) >= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when ('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))) + 86400)) && (date_to_epoch(now()) <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) <= 'ActualEndDate_sec_epoch') then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(now())) - 2764800)))))),now())) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)))  && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && (date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} ) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) - 2764800)))))),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount'; DataForFill_actual = union Start, End_Value_actual; DataForFill_actual = foreach DataForFill_actual generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Actual Amount' as 'Actual Amount', 'ActualDailyAmount' as 'ActualDailyAmount'; FilledData_actual = fill DataForFill_actual by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id'); FilledData_actual = group FilledData_actual by ('Id', 'Date_Year', 'Date_Month'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', min(first('End Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'End Date', sum('Actual Amount') as 'Actual Amount', min(first('ActualDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ActualDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice'; FilledData_actual = filter FilledData_actual by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter'); FilledData_actual = foreach FilledData_actual generate 'Id', 'Date_Year', 'Date_Month', case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end as 'Actual Amount', (case when 'Actual Amount' is null then month_days(toDate('Date'))*'ActualDailyAmount' else 'Actual Amount' end)/'SalesPrice' as 'Quantity'; result = group FilledData_actual by ('Id','Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year', 'Date_Month', sum('Actual Amount') as 'Actual', sum('Quantity') as 'Quantity'; result = group result by ('Date_Year', 'Date_Month'); result = foreach result generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', sum('Quantity') as 'Quantity', sum('Actual') as 'Actual', (sum('Actual')/sum('Quantity')) as 'Avg Price';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"none","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"timeAxis":{"showTitle":true,"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"columnMap":{"split":[],"timeAxis":["StartDate_Year~~~StartDate_Month"],"trellis":[],"plots":["Avg Price"]},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"wave","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"}},"Lowest_compliance_YT_1":{"broadcastFacet":true,"groups":[],"label":"Lowest compliance YTD","numbers":[],"query":"all_slaps = load \"MFG_SalesAgreementProductSchedule\"; valid_slaps = filter all_slaps by 'StartDate_sec_epoch' <= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}; valid_slaps = filter valid_slaps by 'isValidProductSchedule' == \"true\"; Start = foreach valid_slaps generate {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} as 'Start', {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now())> date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} > date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now())  then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now()) >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && 'StartDate_sec_epoch' < date_to_epoch(now()) && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch'  && StartDate_sec_epoch <= date_to_epoch(now()) then (daysBetween(toDate('StartDate_sec_epoch'), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now())>= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && date_to_epoch(now())>= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' >= date_to_epoch(now()) && date_to_epoch(now()) <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(now()) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), now())+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) when 'StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} &&  'ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) && date_to_epoch(now()) >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}} <= date_to_epoch(now()) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}), toDate('ActualEndDate_sec_epoch'))+1) * (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) else 0 end as 'Actual Amount', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}))) then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),toDate('ActualEndDate_sec_epoch'))+1) * 'PlannedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}) && ({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}})))) && {{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}} <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Min\"),0).asObject()}}),toDate({{coalesce(cell(Min_and_Max_Dates_fo_1.result,0,\"Max\"),0).asObject()}}))+1) * 'PlannedDailyAmount' else 'PlannedAmountFinal' end as 'Planned Amount', (DerivedActualAmount/(daysBetween(toDate('StartDate_sec_epoch'),case when toDate('ActualEndDate_sec_epoch') < now() then toDate('ActualEndDate_sec_epoch') else now() end)+1)) as 'ActualDailyAmount', 'PlannedDailyAmount' as 'PlannedDailyAmount';  result = group Start by ('Id') left, valid_slaps by ('Id'); result = foreach result generate first(valid_slaps.'SalesAgreementProduct.SalesAgreement.Account.Name') as 'SalesAgreementProduct.SalesAgreement.Account.Name', sum(Start.'Actual Amount') as 'Actual', sum(Start.'Planned Amount') as 'Plan'; result = group result by 'SalesAgreementProduct.SalesAgreement.Account.Name'; result = foreach result generate 'SalesAgreementProduct.SalesAgreement.Account.Name', sum('Actual') as 'Actual', sum('Plan') as 'Plan', (sum('Actual') / sum('Plan')) as 'Compliance'; result = order result by 'Compliance' asc; result = limit result 1;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Attainments_numbers":{"broadcastFacet":false,"groups":[],"label":"Attainments_Guage_KPI","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\n targets = filter targets by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('AssignedTo.Id')}};\n targets = filter targets by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets = filter targets by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\n target_actuals = filter target_actuals by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('TargetActualsOwner.Managers')}};\n target_actuals = filter target_actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\n\ntarget_attainment = cogroup targets by all full, target_actuals by all;\ntarget_attainment = foreach target_attainment generate coalesce(sum(target_actuals.'TotalPrice'),0)*100/sum(targets.'PeriodTargetCurrencyValue') as 'Target_Attainment',  coalesce(sum(target_actuals.'TotalPrice'),0) as 'Target_Actuals', coalesce(sum(targets.'PeriodTargetCurrencyValue'),0) as 'Target_Value';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"polargauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,20],"enable":true,"type":"x","chartsPerLine":4},"icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"Attainment Type"}},"inner":80,"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"lens_5":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"q = load \"RebateProgramMemberMaster\";\nq = filter q by 'RebateProgram.Status' == \"Active\";\nq = group q by 'RebateProgram.Name';\nq = foreach q generate  sum(unique('RebateProgram.Name')) over ([..] partition by all) as 'count', row_number() over ([..] partition by all order by 'RebateProgram.Name') as row;\nq = filter q by row == 1;\nq = foreach q generate \" Active Rebate Programs - \" + number_to_string('count',\"###\"  ) as 'Active_Programs';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"Attainments_Guage_KP_1":{"broadcastFacet":false,"groups":[],"label":"Attainments_Guage_KPI","numbers":[],"query":"targets = load \"MFG_AccountManagerPeriodicTargetDistribution\";\ntargets = filter targets by 'AcctMgrTargetDstrId' is null;\n targets = filter targets by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('AssignedTo.Id')}};\n targets = filter targets by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets = filter targets by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n\n\ntarget_actuals = load \"MFG_TargetActuals\";\n target_actuals = filter target_actuals by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('TargetActualsOwner.Managers')}};\n target_actuals = filter target_actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\ntarget_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\n\ntarget_attainment = cogroup targets by all full, target_actuals by all;\ntarget_attainment = foreach target_attainment generate sum(target_actuals.'TotalPrice')*100/sum(targets.'PeriodTargetCurrencyValue') as 'Target_Attainment';","receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"polargauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,20],"enable":true,"type":"x","chartsPerLine":4},"icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"Attainment Type"}},"inner":80,"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"Accounts_Analysis_1":{"broadcastFacet":true,"groups":[],"label":"Accounts Analysis","numbers":[],"query":"targets_all = load \"MFG_AccountManagerPeriodicTargetDistribution\";\n targets = filter targets_all by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('AssignedTo.Id')}};\n targets = filter targets by 'AcctMgrTargetDstrId' is not null && 'AcctMgrTargetDstr.AccountId' is not null;\n targets_cy = filter targets by date('Period.StartDate_Year', 'Period.StartDate_Month', 'Period.StartDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n targets_cy = filter targets_cy by date('Period.EndDate_Year', 'Period.EndDate_Month', 'Period.EndDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n\ntarget_actuals = load \"MFG_TargetActuals\";\n target_actuals = filter target_actuals by {{cell(Logged_In_User.result, 0, \"Id\").asEquality('TargetActualsOwner.Managers')}};\n target_actuals = filter target_actuals by 'Order.Status' == \"Activated\";\n\ntarget_actuals_cy = filter target_actuals by date('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.EffectiveDate_Day') in [\"current fiscal_year\"..\"current fiscal_year\"];\n\n\ntarget_actuals = group target_actuals by ('Order.EffectiveDate_Year', 'Order.EffectiveDate_Month', 'Order.Account.UniqueAccountName');\ntarget_actuals = foreach target_actuals generate 'Order.Account.UniqueAccountName', 'Order.EffectiveDate_Year' + \"-\" + 'Order.EffectiveDate_Month' + \"-01\" as 'Period', 'Order.EffectiveDate_Year' as 'Period.StartDate_Year', 'Order.EffectiveDate_Month' as 'Period.StartDate_Month', sum('TotalPrice') as 'sum_TotalPrice';\ntarget_actuals = foreach target_actuals generate 'Order.Account.UniqueAccountName', 'Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\" as 'Period', 'Period.StartDate_Year' + \"~~~\" + 'Period.StartDate_Month' as 'Period.StartDate_Year~~~Period.StartDate_Month', date_to_epoch(toDate('Period.StartDate_Year' + \"-\" + 'Period.StartDate_Month' + \"-01\", \"yyyy-MM-dd\") ) as 'Period_sec_epoch', sum_TotalPrice as sum_TotalPrice;\n\n\n\ntarget_attainment = cogroup targets_cy by 'AcctMgrTargetDstr.Account.UniqueAccountName' left, target_actuals_cy by 'Order.Account.UniqueAccountName';\ntarget_attainment = foreach target_attainment generate coalesce(targets_cy.'AcctMgrTargetDstr.Account.UniqueAccountName', target_actuals_cy.'Order.Account.UniqueAccountName') as 'AcctMgrTargetDstr.Account.UniqueAccountName', sum(target_actuals_cy.'TotalPrice')/sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Attainment_Ratio',  sum(target_actuals_cy.'TotalPrice')/sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Attainment_Percentage',  sum(target_actuals_cy.'TotalPrice') as 'Target_Actuals', sum(targets_cy.'PeriodTargetCurrencyValue') as 'Target_Value';\n\ntarget_attainment_current_fy_view = foreach target_attainment generate 'AcctMgrTargetDstr.Account.UniqueAccountName', 'Target_Value', 'Target_Actuals', 'Target_Attainment_Percentage';\n target_attainment_current_fy_view = filter target_attainment_current_fy_view by 'Target_Attainment_Percentage' <= .50;\n target_attainment_current_fy_view = group target_attainment_current_fy_view by all;\n target_attainment_current_fy_view = foreach target_attainment_current_fy_view generate count() as 'count';\n targets_notnull = group targets_all by all;\n targets_notnull = foreach targets_notnull generate 0 as 'count';\n target_attainment_current_fy_view = union target_attainment_current_fy_view, targets_notnull;\n target_attainment_current_fy_view = group target_attainment_current_fy_view by all;\n target_attainment_current_fy_view = foreach target_attainment_current_fy_view generate sum('count') as 'count';","receiveFacetSource":{"mode":"exclude","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","max":100,"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"min":0,"showActionMenu":true,"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"}},"lens_3":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"q = load \"RebateProgramMemberMaster\";\r\nq = filter q by 'RebateProgram.Name' == \"{{cell(HighestPayingProgram.result, 0, \"HighPayoutProgramBinding\").asString()}}\";\nq1 = filter q by 'MemberStatus' == \"Active\";\nq1 = group q1 by 'Id';\nq1 = foreach q1 generate 'Id' as 'Id', sum(count()) over ([..] partition by all ) as 'Active_Members',number_to_string(rank() over ([..] partition by all order by 'Id'),\"###\") as 'Rank' ;\nq1 = filter q1 by 'Rank' == \"1\";\nq1 = foreach q1 generate 'Active_Members' as 'Active_Members','Rank' as 'Rank';\nq2 = group q by 'Id';\nq2 = foreach q2 generate 'Id' as 'Id', sum(count()) over ([..] partition by all ) as 'Enrolled_Members', number_to_string(rank() over ([..] partition by all order by 'Id'),\"###\") as 'Rank' ;\nq2 = filter q2 by 'Rank' == \"1\";\nq2 = foreach q2 generate 'Enrolled_Members' as 'Enrolled_Members','Rank' as 'Rank';\nq3 = cogroup q1 by 'Rank' , q2 by 'Rank';\nq3 = foreach q3 generate sum(q1.'Active_Members')/sum(q2.'Enrolled_Members') as 'Member Engagement';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"lens_4":{"broadcastFacet":true,"groups":[],"label":"lens_4","numbers":[],"query":"q = load \"RebateProgramMemberMaster\";\nq = foreach q generate number_to_string(string_to_number(date_to_string(quarter_first_day(now()),\"yyyy\")),\"####\") as 'Year', number_to_string(string_to_number(date_to_string(quarter_first_day(now()),\"MM\"))-1,\"0#\") as 'Month',date_to_string(quarter_first_day(now()),\"dd\") as 'Day'  ;\nq = foreach q generate  case when date_to_string(quarter_first_day(now()),\"MM\") == \"01\"  then number_to_string(string_to_number(date_to_string(quarter_first_day(now()),\"yyyy\"))-1,\"####\") else number_to_string(string_to_number(date_to_string(quarter_first_day(now()),\"yyyy\")),\"####\") end as  'Year', case when date_to_string(quarter_first_day(now()),\"MM\") == \"01\"  then \"12\" else number_to_string(string_to_number(date_to_string(quarter_first_day(now()),\"MM\"))-1,\"0#\") end as 'Month',  case when date_to_string(quarter_first_day(now()),\"MM\") == \"01\"  then \"31\" else date_to_string(quarter_first_day(now()),\"dd\") end as 'Day';\nq = foreach q generate toDate('Year' + \"-\" + 'Month' + \"-\" + 'Day',\"yyyy-MM-dd\") as 'Date', year_first_day(now()) as 'StartDate', year_last_day(now()) as 'EndDate',quarter_first_day(toDate('Year' + \"-\" + 'Month' + \"-\" + 'Day',\"yyyy-MM-dd\")) as 'LastQuarterFirstDay',quarter_last_day(toDate('Year' + \"-\" + 'Month' + \"-\" + 'Day',\"yyyy-MM-dd\")) as 'LastQuarterLastDay' ;\nq = group q by ('StartDate','EndDate','LastQuarterFirstDay','LastQuarterLastDay' );\nq = foreach q generate 'StartDate' as 'StartDate', 'EndDate' as 'EndDate', 'LastQuarterFirstDay' as 'LastQuarterFirstDay','LastQuarterLastDay' as 'LastQuarterLastDay', date_to_epoch('StartDate')*1000 as 'Min', (date_to_epoch('EndDate')+86399)*1000 as 'Max', date_to_epoch('LastQuarterFirstDay')*1000 as 'Prev_Min',(date_to_epoch('LastQuarterLastDay')+86399)*1000 as 'Prev_Max';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"lens_1":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"orders = load \"OrderMaster\";\norders_current = filter orders by 'Order.ActivatedDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\norders_current = filter orders_current by 'Order.ActivatedDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\norders_previous = filter orders by 'Order.ActivatedDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Max\"),0).asObject()}}/1000;\norders_previous = filter orders_previous by 'Order.ActivatedDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Prev_Min\"),0).asObject()}}/1000;\nresult = group orders_current by all full, orders_previous by all;\nresult = foreach result generate  (round({{coalesce(cell(Rebate_TransactionAmount.result, 0, \"Total Revenue\"),0).asObject()}}/sum(orders_current.'TotalPrice'),2)) as 'Revenue:Order';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"HighestPayingProgram":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\r\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\r\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\r\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', \r\n{{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('MemberPayout.PayoutPeriods.RebateProgram.Name',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\r\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start',\r\n {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id'+\"<#>\"+coalesce('MemberPayout.PayoutPeriods.RebateProgram.Name',\"-\") as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\r\nDataForFill_Current = union Start_Current, End_Current;\r\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\r\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\r\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\r\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity';\r\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\r\nFilledData_Current = foreach FilledData_Current generate substr('Id',index_of('Id',\"<#>\")+3) as 'MemberPayout.PayoutPeriods.RebateProgram.Name', 'Date_Year',\r\n 'Date_Month', (case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as \r\n 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as\r\n 'RebateAmount', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity';\r\nresult = group FilledData_Current by ('MemberPayout.PayoutPeriods.RebateProgram.Name');\r\nresult = foreach result generate 'MemberPayout.PayoutPeriods.RebateProgram.Name' as 'MemberPayout.PayoutPeriods.RebateProgram.Name', sum('RebateAmount') as 'RebateAmount',\r\nrank() over ([..] partition by all order by sum('RebateAmount') desc) as 'Rank';\r\nresult = filter result by Rank == 1;\r\nresult = foreach result generate \"Program with Highest Payout - \" + 'MemberPayout.PayoutPeriods.RebateProgram.Name' as 'HighestpayoutProgram', 'MemberPayout.PayoutPeriods.RebateProgram.Name' as 'HighPayoutProgramBinding';","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}},"lens_2":{"broadcastFacet":true,"groups":[],"numbers":[],"query":"all_payout_sources = load \"ProgramRebateTypePayoutSourceMaster\";\r\nall_payout_sources = filter all_payout_sources by 'RebateType.CalculationBasis' in [\"PayoutAndAccrual\", \"Payout\"];\nall_payout_sources =  filter all_payout_sources by 'MemberPayout.PayoutPeriods.RebateProgram.Name' == \"{{cell(HighestPayingProgram.result, 0, \"HighPayoutProgramBinding\").asString()}}\";\r\ncurrent_valid_payout_sources = filter all_payout_sources by 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000;\r\ncurrent_valid_payout_sources = filter current_valid_payout_sources by 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000;\r\nStart_Current = foreach current_valid_payout_sources generate {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 'AggregateObject.TotalTransactionAmount' end as 'TotalTransactionAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 'FinalRebateAmount' end as 'RebateAmount', case when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch')))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'))) then (daysBetween(toDate('MemberPayout.PayoutPeriods.StartDate_sec_epoch'),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 >= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when ('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 <= 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 'AggregateObject.TotalQuantity' end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\r\nEnd_Current = foreach current_valid_payout_sources generate {{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'Id' as 'Id', 'MemberPayout.PayoutPeriods.StartDate_sec_epoch' as 'Start Date', 'MemberPayout.PayoutPeriods.EndDate_sec_epoch' as 'End Date', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' < {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyTotalTransactionAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyTotalTransactionAmount' else 0 end as 'TotalTransactionAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyFinalRebateAmount' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyFinalRebateAmount' else 0 end as 'RebateAmount', case when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' <= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) - 2764800)))))),toDate('MemberPayout.PayoutPeriods.EndDate_sec_epoch'))) * 'DailyQuantity' when (('MemberPayout.PayoutPeriods.StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(lens_4.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('MemberPayout.PayoutPeriods.EndDate_sec_epoch' >= {{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(lens_4.result,0,\"Max\"),0).asObject()}}/1000))) * 'DailyQuantity' else 0 end as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\r\nDataForFill_Current = union Start_Current, End_Current;\r\nDataForFill_Current = foreach DataForFill_Current generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'TotalTransactionAmount' as 'TotalTransactionAmount', 'RebateAmount' as 'RebateAmount', 'TotalQuantity' as 'TotalQuantity', 'DailyTotalTransactionAmount' as 'DailyTotalTransactionAmount', 'DailyFinalRebateAmount' as 'DailyFinalRebateAmount', 'DailyQuantity' as 'DailyQuantity';\r\nFilledData_Current = fill DataForFill_Current by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\r\nFilledData_Current = group FilledData_Current by ('Id', 'Date_Year', 'Date_Month');\r\nFilledData_Current = foreach FilledData_Current generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date',  sum('TotalTransactionAmount') as 'TotalTransactionAmount', min(first('DailyTotalTransactionAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyTotalTransactionAmount', sum('RebateAmount') as 'RebateAmount', min(first('DailyFinalRebateAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyFinalRebateAmount', sum('TotalQuantity') as 'TotalQuantity', min(first('DailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'DailyQuantity';\r\nFilledData_Current = filter FilledData_Current by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\r\nFilledData_Current = foreach FilledData_Current generate 'Id' as 'Id', 'Date_Year', 'Date_Month', \r\n(case when 'TotalTransactionAmount' is null then month_days(toDate('Date'))*'DailyTotalTransactionAmount' else 'TotalTransactionAmount' end) as\r\n 'TotalTransactionAmount', (case when 'RebateAmount' is null then month_days(toDate('Date'))*'DailyFinalRebateAmount' else 'RebateAmount' end) as 'RebateAmount', (case when 'TotalQuantity' is null then month_days(toDate('Date'))*'DailyQuantity' else 'TotalQuantity' end) as 'TotalQuantity';\r\nresult = group FilledData_Current by ('Date_Year', 'Date_Month');\r\nresult = foreach result generate FilledData_Current.'Date_Year'+\"~~~\"+FilledData_Current.'Date_Month' as 'CreatedDate_Year~~~CreatedDate_Month', \r\nsum(FilledData_Current.'RebateAmount')/sum(FilledData_Current.'TotalTransactionAmount') as 'Payout:Revenue';\r\nresult = order result by 'CreatedDate_Year~~~CreatedDate_Month' asc;","receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","strings":[],"type":"saql","useGlobal":true,"visualizationParameters":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"hbar","title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","chartsPerLine":4},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"wave","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round"}}},"applyConditionalFormatting":true},"type":"chart"}}},"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1},"widgets":{"text_18":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"Which are the top performing products?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_17":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"What’s the compliance rate of my active agreements?\nWhat are the upcoming renewals?\nWhat’s the revenue loss due to cancellations?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_19":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"Which accounts do not have active or approved agreements? Which products can I recommend to my accounts?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"container_13":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_14":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Product Performance"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_12":{"parameters":{"destinationLink":{"name":"Rebate_Program_Analysis_Single_Program","namespace":""},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"View Rebate Program Analysis dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"text_13":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Sales Agreements Insights"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_16":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Pricing Insights"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_10":{"parameters":{"destinationLink":{"name":"Target_Leaderboard_w_Forecasts","namespace":""},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"Open Target Leaderboard Dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"text_15":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Whitespace Analysis"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_11":{"parameters":{"destinationLink":{"name":"All_Rebate_Programs_Analysis","namespace":""},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"View Business Insights dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"text_10":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"center"},"insert":"Outstanding Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_12":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#091A3E","align":"left"},"insert":"Protect and Grow My Business"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_11":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#091A3E","align":"left"},"insert":"Track My Product Portfolio"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_9":{"parameters":{"max":1,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"polargauge","medium":33,"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":true,"showGridLines":false,"size":[50,50],"enable":true,"type":"x","parameters":{},"chartsPerLine":4},"icons":{"useIcons":true,"iconProps":{"fit":"cover","column":"AssignedTo.SmallPhotoUrl"}},"inner":80,"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":["AssignedTo.Name"],"plots":["Attainment"]},"min":0,"showActionMenu":true,"valueType":"percent","theme":"wave","step":"Top_Team_Attainment_1","applyConditionalFormatting":true},"type":"chart"},"text_3":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#091A3E","align":"left"},"insert":"Understand My Accounts"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_6":{"parameters":{"max":1,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","exploreLink":true,"medium":33,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"showActionMenu":true,"min":0,"valueType":"compactNumber","theme":"wave","step":"lens_1","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"text_2":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"24px","color":"#FFFFFF","align":"left"},"insert":"Sales Manager Home"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_5":{"parameters":{"max":1,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","exploreLink":true,"medium":33,"title":{"fontSize":12,"subtitleFontSize":11,"label":"Compliance YTD","align":"left","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[150,80],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":[],"plots":["Compliance"]},"showActionMenu":true,"min":0,"valueType":"compactNumber","theme":"wave","step":"Top_performing_sales_1","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"text_5":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"How’s my account performing?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_8":{"parameters":{"max":100,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,20],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"showActionMenu":true,"min":0,"valueType":"none","theme":"wave","step":"Attainments_Guage_KP_1","applyConditionalFormatting":true},"type":"chart"},"text_4":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Account Insights"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_7":{"parameters":{"showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["amount_mape"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date (Year-Month) :  [StartDate_Year~~~StartDate_Month]"}},"missingValue":"connect","visualizationType":"time","dashLine":{"measures":"","showDashLine":false},"exploreLink":true,"timeAxis":{"showTitle":false,"showAxis":true,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"light","step":"MAPE_Query_1","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"text_7":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"How’s my business performing?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_2":{"parameters":{"autoFitMode":"keepLabels","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"vbar","exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"binValues":false,"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"columnMap":{"trellis":[],"dimensionAxis":["SalesAgreementProduct.SalesAgreement.Account.Name"],"plots":["Demand Shortfall"]},"showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":"","customDomain":{"showDomain":false}},"valueType":"compactNumber","theme":"light","step":"Demand_shortfall_CM_1","compactDecimalDigits":-1,"dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":false,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true},"type":"chart"},"text_6":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Accounts’ Health"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_1":{"parameters":{"showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Compliance"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date (Year-Month) :  [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"exploreLink":true,"timeAxis":{"showTitle":false,"showAxis":false,"title":"Date (Year-Month)"},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":true,"columnMap":{"split":[],"timeAxis":["StartDate_Year~~~StartDate_Month"],"trellis":[],"plots":["Compliance"]},"showActionMenu":false,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"light","step":"Compliance_over_time_1","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"text_9":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"(Year-to-date)"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_4":{"parameters":{"showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":["Quantity","Actual","Avg Price"],"showNullValues":true,"customizeLegend":true,"showPercentage":true,"showDimensions":false,"showMeasures":true,"dimensions":["StartDate_Year~~~StartDate_Month"]},"description":"Date (Year - Month) :  [StartDate_Year~~~StartDate_Month]"}},"visualizationType":"time","missingValue":"connect","dashLine":{"measures":"","showDashLine":false},"exploreLink":true,"timeAxis":{"showTitle":false,"showAxis":false,"title":""},"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":true,"columnMap":{"split":[],"timeAxis":["StartDate_Year~~~StartDate_Month"],"trellis":[],"plots":["Avg Price"]},"showActionMenu":false,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"light","step":"Avg_Price_for_best_p_1","applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"text_8":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"center"},"insert":"Account with Lowest Compliance Rate"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_3":{"parameters":{"max":1,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","exploreLink":true,"medium":33,"title":{"fontSize":12,"subtitleFontSize":11,"label":"Average Demand Realization Across Products","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":[],"plots":["C"]},"showActionMenu":true,"min":0,"valueType":"compactNumber","theme":"light","step":"Average_realization__1","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"text_1":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#FFFFFF","align":"left"},"insert":"ANALYTICS FOR MANUFACTURING"}]},"interactions":[],"showActionMenu":true},"type":"text"},"number_5":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"ForecastedDemand","numberColor":"#091A3E","numberSize":32,"showActionMenu":true,"step":"Highest_Demanded_Pro_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_4":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"Compliance","numberColor":"#091A3E","numberSize":32,"showActionMenu":true,"step":"Total_Demand_shortfa_1","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":14,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_3":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"E","numberColor":"#091A3E","numberSize":32,"showActionMenu":true,"step":"Best_Performing_Prod_1","textAlignment":"center","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_2":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"sum_Total Outstanding Revenue","numberColor":"#091A3E","numberSize":32,"showActionMenu":true,"step":"Total_Demand_shortfa_1","textAlignment":"right","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_1":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"Compliance","numberColor":"#091A3E","numberSize":32,"showActionMenu":true,"step":"Lowest_compliance_YT_1","textAlignment":"center","title":"{{cell(Lowest_compliance_YT_1.result,0,\"SalesAgreementProduct.SalesAgreement.Account.Name\").asObject()}}","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"container_12":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_11":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_10":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"number_9":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"Member Engagement","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"lens_3","textAlignment":"right","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_8":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"count","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"Target_Actuals","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_7":{"parameters":{"compact":true,"exploreLink":true,"interactions":[],"measureField":"count","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"Target_Value","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_6":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"amount_mape","numberColor":"#091A3E","numberSize":32,"showActionMenu":true,"step":"MAPE_value_1","textAlignment":"center","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_70":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"left"},"insert":"Member Engagement"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_3":{"parameters":{"destinationLink":{"name":"Product_Performance_Plan_SA_Forecast1","namespace":""},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"Open Product Performance Dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"text_69":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"{{cell(Rebate_TransactionAmount.result, 0, \"Payout:RevenueColor\").asString()}}","align":"right"},"insert":"{{cell(Rebate_TransactionAmount.result, 0, \"Payout:RevenueArrow\").asString()}}\r{{cell(Rebate_TransactionAmount.result, 0, \"Payout:RevenueDelta\").asString()}}%"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_4":{"parameters":{"destinationLink":{"name":"Pricing_Insights2","namespace":""},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"Open Pricing Insights Dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"text_68":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"center"},"insert":"Payout to Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_1":{"parameters":{"destinationLink":{"name":"Account_Insights_Agreements_Performance","namespace":""},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"Open Account Insights Dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_2":{"parameters":{"destinationLink":{"name":"Accounts_Health_Forecast_Plan_SA1","namespace":""},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"Open Accounts’ Health Dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"text_65":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"How are my rebate programs affecting revenue?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_64":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"How effective is my rebate program?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_67":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"left"},"insert":"Revenue to Order Value"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_66":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#FFFFFF","align":"center"},"insert":"{{cell(HighestPayingProgram.result, 0, \"HighestpayoutProgram\").asString()}}"}]},"interactions":[],"showActionMenu":true},"type":"text"},"table_1":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":["SalesAgreementProduct.Name","A","B","C"],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"showRowIndexColumn":false,"step":"Best_Performing_Prod_1","totals":true,"verticalPadding":8},"type":"table"},"text_61":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"left"},"insert":"Payout to Revenue"}]},"interactions":[],"showActionMenu":true},"type":"text"},"table_2":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":["Past Revenue","# Past Agreements","SalesAgreementProduct.SalesAgreement.EndDate","# Draft Agreements"],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"showRowIndexColumn":false,"step":"Top_inactive_account_1","verticalPadding":8},"type":"table"},"text_60":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Rebate Program Analysis"}]},"interactions":[],"showActionMenu":true},"type":"text"},"table_3":{"parameters":{"borderColor":"#e0e5ee","borderWidth":1,"cell":{"backgroundColor":"#ffffff","fontColor":"#16325c","fontSize":12},"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"header":{"backgroundColor":"#f4f6f9","fontColor":"#16325c","fontSize":12},"innerMajorBorderColor":"#a8b7c7","innerMinorBorderColor":"#e0e5ee","interactions":[],"mode":"fittocontainer","numberOfLines":1,"pivoted":false,"showActionMenu":true,"step":"Highest_Demanded_Pro_1","verticalPadding":8},"type":"table"},"link_9":{"parameters":{"destinationLink":{"name":"Targets_Performance","namespace":""},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"Open Target Tracking Dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"text_63":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#FFFFFF","align":"center"},"insert":"{{cell(lens_5.result, 0, \"Active_Programs\").asString()}}"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_62":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"right"},"insert":"vs. Last Quarter"}]},"interactions":[],"showActionMenu":true},"type":"text"},"link_7":{"parameters":{"destinationLink":{"name":"Product_Demand_w_forecast1","namespace":"","pageName":"a03bf10d-78a1-484a-9066-ed29c703c9db"},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"Open Product Demand Dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_8":{"parameters":{"destinationLink":{"name":"Forecast_Analysis2","namespace":""},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"Open Forecast Analysis Dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_5":{"parameters":{"destinationLink":{"name":"Whitespace_Analysis","namespace":""},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"Open Whitespace Analysis Dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"link_6":{"parameters":{"destinationLink":{"name":"Sales_Agreements_Insights","namespace":""},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"Open Sales Agreements Insights Dashboard","textAlignment":"center","textColor":"#0070D2"},"type":"link"},"number_11":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"Payout:Revenue","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"Rebate_TransactionAmount","textAlignment":"left","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_10":{"parameters":{"compact":false,"exploreLink":true,"interactions":[],"measureField":"Revenue:Order","numberColor":"#091A3E","numberSize":16,"showActionMenu":true,"step":"lens_1","textAlignment":"right","title":"","titleColor":"#091A3E","titleSize":16,"tooltip":{"customizeTooltip":false}},"type":"number"},"text_58":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#091A3E","align":"center"},"insert":"[Count_of_Rows]"}],"values":{"Count_of_Rows":{"field":"count","sourceType":"result","step":"Products_Analysis_1"}}},"interactions":[],"showActionMenu":false},"type":"text"},"text_57":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#091A3E","align":"center"},"insert":"[Count_of_Rows]"}],"values":{"Count_of_Rows":{"field":"count","sourceType":"result","step":"Accounts_Analysis_1"}}},"interactions":[],"showActionMenu":false},"type":"text"},"text_59":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Business Insights"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_54":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#091A3E","align":"left"},"insert":"Rebates Program Planner Home"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_53":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"[Target_Attainment_1]%"}],"values":{"Target_Attainment_1":{"field":"Target_Attainment","sourceType":"result","step":"Attainments_Guage_KP_1"}}},"interactions":[],"showActionMenu":false},"type":"text"},"text_56":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"center"},"insert":"Projected Attainment: [Target_Attainment]%"}],"values":{"Target_Attainment":{"field":"Target_Attainment","sourceType":"result","step":"Attainments_Projections"}}},"interactions":[],"showActionMenu":false},"type":"text"},"text_55":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"right"},"insert":"Target"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_50":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"How is my team's performance?"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_52":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"center"},"insert":"Bottom Performers"}]},"interactions":[],"showActionMenu":false},"type":"text"},"container_1":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"text_51":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"center"},"insert":"Top Performers"}]},"interactions":[],"showActionMenu":false},"type":"text"},"container_2":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_3":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_4":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_5":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_6":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_7":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_8":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"container_9":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","interactions":[]},"type":"container"},"image_5":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"fitwidth","image":{"name":"tracker_icon2xpng","namespace":""},"interactions":[]},"type":"image"},"image_4":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","image":{"name":"custom109png3","namespace":""},"interactions":[]},"type":"image"},"image_6":{"parameters":{"alignmentX":"center","alignmentY":"center","fit":"original","image":{"name":"tracker_iconpng","namespace":""},"interactions":[]},"type":"image"},"text_47":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"left"},"insert":"Products"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_46":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#091A3E","align":"left"},"insert":"Accounts"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_49":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Team Performance"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_48":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"Underperforming (<50% attainment)"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_43":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"18px","color":"#091A3E","align":"left"},"insert":"Track My Targets"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_42":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"(Sales Agreements Expired in Last 12 Months)"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_45":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"How does my attainment look?"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_44":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Target Attainment"}]},"interactions":[],"showActionMenu":false},"type":"text"},"text_41":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"(Year-to-date)"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_40":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"center"},"insert":"MAPE"}]},"interactions":[],"showActionMenu":true},"type":"text"},"chart_18":{"parameters":{"autoFitMode":"keepLabels","showPoints":false,"legend":{"descOrder":false,"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"line","dashLine":{"measures":"","showDashLine":false},"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"fillArea":true,"showActionMenu":true,"showZero":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":"","customDomain":{"showDomain":false}},"valueType":"none","theme":"dark","step":"lens_2","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":false,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}},"applyConditionalFormatting":true,"drawArea":{"measure":"","showDrawArea":false,"bounding1":"","bounding2":""}},"type":"chart"},"image_1":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","image":{"name":"customerspng3","namespace":""},"interactions":[]},"type":"image"},"image_3":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original","image":{"name":"custom113png3","namespace":""},"interactions":[]},"type":"image"},"image_2":{"parameters":{"alignmentX":"right","alignmentY":"center","fit":"fitheight","image":{"name":"manufacturing_app_icon2xpng8","namespace":""},"interactions":[]},"type":"image"},"chart_12":{"parameters":{"max":1,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"flatgauge","medium":33,"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"size":[100,100],"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"showActionMenu":true,"min":0,"valueType":"compactNumber","theme":"wave","step":"lens_3","compactDecimalDigits":-1,"applyConditionalFormatting":true},"type":"chart"},"chart_11":{"parameters":{"max":1,"legend":{"showHeader":true,"show":false,"position":"right-top","inside":false},"tooltip":{"content":{"legend":{"showBinLabel":true,"measures":[],"showNullValues":true,"customizeLegend":false,"showPercentage":true,"showDimensions":true,"showMeasures":true,"dimensions":[]}}},"visualizationType":"polargauge","medium":33,"exploreLink":true,"title":{"fontSize":14,"subtitleFontSize":11,"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":true,"showGridLines":false,"size":[50,50],"enable":true,"type":"x","parameters":{},"chartsPerLine":4},"icons":{"useIcons":true,"iconProps":{"fit":"cover","column":"AssignedTo.SmallPhotoUrl"}},"inner":80,"colors":{"mediumColor2":"#F29946","mediumColor1":"#FED444","lowColor1":"#F71979","lowColor2":"#CC203D","highColor1":"#7BDE4E","highColor2":"#169913"},"high":66,"columnMap":{"trellis":["AssignedTo.Name"],"plots":["Attainment"]},"min":0,"showActionMenu":true,"valueType":"percent","theme":"wave","step":"Team_Attainment_1","applyConditionalFormatting":true},"type":"chart"},"text_39":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"What’s the change in forecast?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_36":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"{{cell(Highest_Demanded_Pro_1.result,0,\"SalesAgreementProduct.Name\").asObject()}}"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_35":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"center"},"insert":"Most Demanded Product"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_38":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Forecast Analysis"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_37":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"(For current fiscal Year)"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_32":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#091A3E","align":"center"},"insert":"Compliance @"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_31":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"20px","color":"#091A3E","align":"center"},"insert":"{{coalesce(cell(Top_inactive_account_1.result,0,\"SalesAgreementProduct.SalesAgreement.Account.Name\"),\"--\").asObject()}}"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_34":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"What’s the forecasted demand of my products?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_33":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"center"},"insert":"Product Demand"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_30":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"center"},"insert":"Past Top Account"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_29":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"20px","color":"#091A3E","align":"center"},"insert":"{{cell(Top_performing_sales_1.result,0,\"SalesAgreementProduct.SalesAgreement.Name\").asObject()}}"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_28":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"(Year-to-date)"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_25":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"center"},"insert":"Best Performing Sales Agreement"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_24":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"(Across active agreements)"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_27":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"(Across active agreements)"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_26":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"center"},"insert":"Avg Price for {{cell(Best_Performing_Prod_1.result,0,\"SalesAgreementProduct.Name\").asObject()}}"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_21":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E","align":"left"},"insert":""}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_20":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"At what prices do I offer products to my accounts?\nWhat’s the price elasticity of the products?"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_23":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#335779","align":"center"},"insert":"Top Performing Product"}]},"interactions":[],"showActionMenu":true},"type":"text"},"text_22":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779","align":"center"},"insert":"(For agreement schedules ending this month)"}]},"interactions":[],"showActionMenu":true},"type":"text"}}}